
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package jl2755;

import jl2755.ast.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\003\003\000\002\005" +
    "\005\000\002\004\005\000\002\006\006\000\002\006\006" +
    "\000\002\006\005\000\002\007\004\000\002\007\005\000" +
    "\002\007\004\000\002\007\005\000\002\010\003\000\002" +
    "\010\003\000\002\013\003\000\002\013\003\000\002\014" +
    "\004\000\002\014\004\000\002\014\005\000\002\015\004" +
    "\000\002\015\005\000\002\016\005\000\002\016\006\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\005\000\002\020\003\000\002\020\003\000\002\021\004" +
    "\000\002\022\003\000\002\022\003\000\002\023\005\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\032" +
    "\006\000\002\032\005\000\002\032\006\000\002\032\006" +
    "\000\002\033\003\000\002\033\005\000\002\034\005\000" +
    "\002\035\003\000\002\035\005\000\002\035\002\000\002" +
    "\036\004\000\002\040\004\000\002\040\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\041\005\000\002\041\005\000\002" +
    "\042\007\000\002\042\011\000\002\043\007\000\002\044" +
    "\003\000\002\044\004\000\002\047\003\000\002\047\005" +
    "\000\002\030\010\000\002\012\004\000\002\012\002\000" +
    "\002\011\003\000\002\011\005\000\002\031\004\000\002" +
    "\031\002\000\002\027\003\000\002\027\005\000\002\045" +
    "\004\000\002\045\005\000\002\045\006\000\002\046\003" +
    "\000\002\046\004\000\002\026\004\000\002\026\005\000" +
    "\002\026\005\000\002\026\006\000\002\002\003\000\002" +
    "\002\004" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\010\002\uffa7\004\012\016\006\001\002\000" +
    "\006\002\uffa7\004\012\001\002\000\004\044\021\001\002" +
    "\000\004\004\012\001\002\000\006\002\uffa7\004\012\001" +
    "\002\000\004\002\013\001\002\000\004\002\uff9b\001\002" +
    "\000\104\002\000\004\000\012\000\013\000\014\000\015" +
    "\000\016\000\017\000\020\000\022\000\023\000\026\000" +
    "\027\000\031\000\032\000\033\000\034\000\035\000\036" +
    "\000\037\000\040\000\041\000\042\000\043\000\044\000" +
    "\045\000\046\000\047\000\050\000\051\000\052\000\053" +
    "\000\054\000\001\002\000\004\002\001\001\002\000\004" +
    "\002\uff9a\001\002\000\012\002\uff9f\004\uff9f\016\006\052" +
    "\016\001\002\000\010\002\uff9e\004\uff9e\016\006\001\002" +
    "\000\006\002\uff9d\004\uff9d\001\002\000\006\002\uff9c\004" +
    "\uff9c\001\002\000\004\004\012\001\002\000\004\050\236" +
    "\001\002\000\004\045\027\001\002\000\006\045\uffa6\051" +
    "\025\001\002\000\004\004\012\001\002\000\004\045\uffa5" +
    "\001\002\000\006\046\uffab\050\031\001\002\000\004\046" +
    "\146\001\002\000\006\024\037\025\033\001\002\000\004" +
    "\046\uffac\001\002\000\036\004\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\041\ufff3\042\ufff3\045\ufff3\046\ufff3\047\ufff3" +
    "\051\ufff3\052\ufff3\053\ufff3\054\ufff3\001\002\000\036\004" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\041\ufff6\042\042" +
    "\045\ufff6\046\ufff6\047\ufff6\051\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\001\002\000\034\004\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\041\ufff5\045\ufff5\046\ufff5\047\ufff5\051\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\001\002\000\006\046\uffaa\051\040" +
    "\001\002\000\036\004\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\041\ufff4\042\ufff4\045\ufff4\046\ufff4\047\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\001\002\000\006\024\037\025" +
    "\033\001\002\000\004\046\uffa9\001\002\000\032\004\012" +
    "\005\072\006\055\007\061\010\060\011\073\020\063\030" +
    "\066\043\047\044\067\046\070\054\057\001\002\000\036" +
    "\004\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\041\ufff1\042" +
    "\045\045\ufff1\046\ufff1\047\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\054\ufff1\001\002\000\034\004\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\041\ufff2\045\ufff2\046\ufff2\047\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\054\ufff2\001\002\000\004\043\047\001" +
    "\002\000\034\004\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\041\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\001\002\000\036\004\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\041\uffef\042\045\045\uffef\046\uffef\047" +
    "\uffef\051\uffef\052\uffef\053\uffef\054\uffef\001\002\000\034" +
    "\004\uffee\012\uffee\013\uffee\014\uffee\015\uffee\041\uffee\045" +
    "\uffee\046\uffee\047\uffee\051\uffee\052\uffee\053\uffee\054\uffee" +
    "\001\002\000\074\004\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\026\uffe8\027\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\042\116\043\uffe8\044\136\045\uffe8\046\uffe8" +
    "\047\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\001\002\000" +
    "\070\004\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7" +
    "\020\uffe7\022\uffe7\023\uffe7\026\uffe7\027\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\043\uffe7\045\uffe7\046\uffe7\047\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\054\uffe7\001\002\000\070\004\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\017\uffeb\020\uffeb\022\uffeb\023\uffeb\026" +
    "\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\043\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\001\002\000\070" +
    "\004\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\020" +
    "\uffe9\022\uffe9\023\uffe9\026\uffe9\027\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\043" +
    "\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\001\002\000\070\004\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\026\uffcf" +
    "\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\043\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\001\002\000\070\004" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6" +
    "\022\uffe6\023\uffe6\026\uffe6\027\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\043\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\051\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\001\002\000\004\044\130\001\002\000\070\004\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\015\uffcd\017\uffcd\020\uffcd\022" +
    "\uffcd\023\uffcd\026\uffcd\027\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\043\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\001\002\000\070\004\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\017\uffd0\020\uffd0\022\uffd0\023\uffd0\026\uffd0\027\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\043\uffd0\045\uffd0\046\uffd0\047\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\001\002\000\030\004\012\005" +
    "\072\006\055\007\061\010\060\011\073\020\063\030\066" +
    "\044\067\046\070\054\057\001\002\000\030\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\020\uffe1\030\uffe1" +
    "\044\uffe1\046\uffe1\054\uffe1\001\002\000\070\004\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4\020\uffe4\022\uffe4" +
    "\023\uffe4\026\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\043\uffe4\045\uffe4" +
    "\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\001" +
    "\002\000\070\004\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\017\uffea\020\uffea\022\uffea\023\uffea\026\uffea\027\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\043\uffea\045\uffea\046\uffea\047\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\001\002\000\030\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\020\uffe0\030\uffe0\044" +
    "\uffe0\046\uffe0\054\uffe0\001\002\000\030\004\012\005\072" +
    "\006\055\007\061\010\060\011\073\020\063\030\066\044" +
    "\067\046\070\054\057\001\002\000\032\004\012\005\072" +
    "\006\055\007\061\010\060\011\073\020\063\030\066\044" +
    "\067\046\070\047\uffc2\054\057\001\002\000\040\017\114" +
    "\020\105\022\076\023\100\026\106\027\102\031\101\032" +
    "\112\033\104\034\107\035\110\036\075\037\077\040\111" +
    "\043\103\001\002\000\070\004\uffce\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\017\uffce\020\uffce\022\uffce\023\uffce\026\uffce" +
    "\027\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\043\uffce\045\uffce\046\uffce\047\uffce" +
    "\051\uffce\052\uffce\053\uffce\054\uffce\001\002\000\070\004" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc" +
    "\022\uffcc\023\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\043\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\001\002\000\070\004\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3\026\uffe3\027" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\043\uffe3\045\uffe3\046\uffe3\047\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\001\002\000\030\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\020\uffd1\030" +
    "\uffd1\044\uffd1\046\uffd1\054\uffd1\001\002\000\030\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\020\uffdc\030" +
    "\uffdc\044\uffdc\046\uffdc\054\uffdc\001\002\000\030\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\020\uffd8\030" +
    "\uffd8\044\uffd8\046\uffd8\054\uffd8\001\002\000\030\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\020\uffdb\030" +
    "\uffdb\044\uffdb\046\uffdb\054\uffdb\001\002\000\030\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\020\uffd6\030" +
    "\uffd6\044\uffd6\046\uffd6\054\uffd6\001\002\000\030\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\020\uffd9\030" +
    "\uffd9\044\uffd9\046\uffd9\054\uffd9\001\002\000\074\004\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\017\uffed\020\uffed\022" +
    "\uffed\023\uffed\026\uffed\027\uffed\031\uffed\032\uffed\033\uffed" +
    "\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\116\043\uffed\045\uffed\046\uffed\047\uffed\051\uffed\052\uffed" +
    "\053\uffed\054\uffed\001\002\000\030\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\020\uffd4\030\uffd4\044\uffd4" +
    "\046\uffd4\054\uffd4\001\002\000\030\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\020\uffdd\030\uffdd\044\uffdd" +
    "\046\uffdd\054\uffdd\001\002\000\030\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\020\uffda\030\uffda\044\uffda" +
    "\046\uffda\054\uffda\001\002\000\030\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\020\uffd3\030\uffd3\044\uffd3" +
    "\046\uffd3\054\uffd3\001\002\000\030\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\020\uffd2\030\uffd2\044\uffd2" +
    "\046\uffd2\054\uffd2\001\002\000\030\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\020\uffd7\030\uffd7\044\uffd7" +
    "\046\uffd7\054\uffd7\001\002\000\030\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\020\uffd5\030\uffd5\044\uffd5" +
    "\046\uffd5\054\uffd5\001\002\000\030\004\012\005\072\006" +
    "\055\007\061\010\060\011\073\020\063\030\066\044\067" +
    "\046\070\054\057\001\002\000\030\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\020\uffde\030\uffde\044\uffde" +
    "\046\uffde\054\uffde\001\002\000\070\004\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\017\114\020\105\022\076\023\100" +
    "\026\106\027\102\031\101\032\112\033\104\034\107\035" +
    "\110\036\075\037\077\040\111\043\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\001\002\000" +
    "\030\004\012\005\072\006\055\007\061\010\060\011\073" +
    "\020\063\030\066\044\067\046\070\054\057\001\002\000" +
    "\074\004\uffec\012\uffec\013\uffec\014\uffec\015\uffec\017\uffec" +
    "\020\uffec\022\uffec\023\uffec\026\uffec\027\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\042\uffec\043\uffec\045\uffec\046\uffec\047\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\001\002\000\004\047\124" +
    "\001\002\000\042\017\114\020\105\022\076\023\100\026" +
    "\106\027\102\031\101\032\112\033\104\034\107\035\110" +
    "\036\075\037\077\040\111\047\uffc4\051\122\001\002\000" +
    "\032\004\012\005\072\006\055\007\061\010\060\011\073" +
    "\020\063\030\066\044\067\046\070\047\uffc2\054\057\001" +
    "\002\000\004\047\uffc3\001\002\000\070\004\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\017\uffc5\020\uffc5\022\uffc5\023" +
    "\uffc5\026\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\043\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\001\002" +
    "\000\040\017\114\020\105\022\076\023\100\026\106\027" +
    "\102\031\101\032\112\033\104\034\107\035\110\036\075" +
    "\037\077\040\111\045\126\001\002\000\070\004\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020\uffe5\022\uffe5" +
    "\023\uffe5\026\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\043\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\001" +
    "\002\000\070\004\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\017\114\020\105\022\076\023\100\026\106\027\102\031" +
    "\101\032\112\033\104\034\107\035\110\036\075\037\077" +
    "\040\111\043\uffe2\045\uffe2\046\uffe2\047\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\001\002\000\004\004\012\001\002" +
    "\000\006\042\116\045\135\001\002\000\004\045\133\001" +
    "\002\000\070\004\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\017\uffc8\020\uffc8\022\uffc8\023\uffc8\026\uffc8\027\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\043\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\001\002\000\072\004\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\017\uffc1\020\uffc1\022\uffc1\023" +
    "\uffc1\026\uffc1\027\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\043\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\001\002\000\070\004\uffc9\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\017\uffc9\020\uffc9\022\uffc9\023\uffc9\026\uffc9\027\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\043\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\001\002\000\032\004\012\005" +
    "\072\006\055\007\061\010\060\011\073\020\063\030\066" +
    "\044\067\045\141\046\070\054\057\001\002\000\004\045" +
    "\144\001\002\000\042\017\114\020\105\022\076\023\100" +
    "\026\106\027\102\031\101\032\112\033\104\034\107\035" +
    "\110\036\075\037\077\040\111\045\uffc7\051\142\001\002" +
    "\000\070\004\uffca\012\uffca\013\uffca\014\uffca\015\uffca\017" +
    "\uffca\020\uffca\022\uffca\023\uffca\026\uffca\027\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\043\uffca\045\uffca\046\uffca\047\uffca\051\uffca\052\uffca" +
    "\053\uffca\054\uffca\001\002\000\030\004\012\005\072\006" +
    "\055\007\061\010\060\011\073\020\063\030\066\044\067" +
    "\046\070\054\057\001\002\000\004\045\uffc6\001\002\000" +
    "\070\004\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb" +
    "\020\uffcb\022\uffcb\023\uffcb\026\uffcb\027\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\043\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\001\002\000\006\002\uffad\004\uffad\001\002" +
    "\000\020\004\012\012\165\014\163\046\146\047\161\053" +
    "\153\054\057\001\002\000\026\004\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\046\uffbe\047\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\001\002\000\012\041\237\042\116\044\136\050\236" +
    "\001\002\000\026\004\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\046\uffbc\047\uffbc\052\uffbc\053\uffbc\054\uffbc\001\002" +
    "\000\004\041\234\001\002\000\006\041\230\051\177\001" +
    "\002\000\026\004\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\046\uffbb\047\uffbb\052\uffbb\053\uffbb\054\uffbb\001\002\000" +
    "\026\004\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\046\uffbd" +
    "\047\uffbd\052\uffbd\053\uffbd\054\uffbd\001\002\000\026\004" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\046\uffb8\047\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\001\002\000\026\004\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\046\uffba\047\uffba\052\uffba" +
    "\053\uffba\054\uffba\001\002\000\026\004\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\046\uffbf\047\uffbf\052\226\053\uffbf" +
    "\054\uffbf\001\002\000\030\002\uffa4\004\uffa4\012\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\046\uffa4\047\uffa4\052\uffa4\053\uffa4" +
    "\054\uffa4\001\002\000\006\015\216\047\217\001\002\000" +
    "\004\044\212\001\002\000\032\004\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\041\201\046\uffb9\047\uffb9\051\177\052" +
    "\uffb9\053\uffb9\054\uffb9\001\002\000\004\044\171\001\002" +
    "\000\022\004\012\012\165\014\163\015\uffa1\046\146\047" +
    "\uffa1\053\153\054\057\001\002\000\026\004\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\046\uffb7\047\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\001\002\000\006\015\uffa0\047\uffa0\001\002" +
    "\000\030\004\012\005\072\006\055\007\061\010\060\011" +
    "\073\020\063\030\066\044\067\046\070\054\057\001\002" +
    "\000\040\017\114\020\105\022\076\023\100\026\106\027" +
    "\102\031\101\032\112\033\104\034\107\035\110\036\075" +
    "\037\077\040\111\045\173\001\002\000\016\004\012\012" +
    "\165\014\163\046\146\053\153\054\057\001\002\000\026" +
    "\004\uffb4\012\uffb4\013\175\014\uffb4\015\uffb4\046\uffb4\047" +
    "\uffb4\052\uffb4\053\uffb4\054\uffb4\001\002\000\016\004\012" +
    "\012\165\014\163\046\146\053\153\054\057\001\002\000" +
    "\026\004\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\046\uffb3" +
    "\047\uffb3\052\uffb3\053\uffb3\054\uffb3\001\002\000\006\004" +
    "\012\053\206\001\002\000\004\041\203\001\002\000\030" +
    "\004\012\005\072\006\055\007\061\010\060\011\073\020" +
    "\063\030\066\044\067\046\070\054\057\001\002\000\062" +
    "\004\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\017\114\020" +
    "\105\022\076\023\100\026\106\027\102\031\101\032\112" +
    "\033\104\034\107\035\110\036\075\037\077\040\111\046" +
    "\ufffe\047\ufffe\052\ufffe\053\ufffe\054\ufffe\001\002\000\006" +
    "\004\012\054\057\001\002\000\004\044\136\001\002\000" +
    "\026\004\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\046\ufffc" +
    "\047\ufffc\052\ufffc\053\ufffc\054\ufffc\001\002\000\006\041" +
    "\ufff8\051\177\001\002\000\006\041\ufffa\051\177\001\002" +
    "\000\004\041\ufff9\001\002\000\004\041\ufff7\001\002\000" +
    "\030\004\012\005\072\006\055\007\061\010\060\011\073" +
    "\020\063\030\066\044\067\046\070\054\057\001\002\000" +
    "\040\017\114\020\105\022\076\023\100\026\106\027\102" +
    "\031\101\032\112\033\104\034\107\035\110\036\075\037" +
    "\077\040\111\045\214\001\002\000\016\004\012\012\165" +
    "\014\163\046\146\053\153\054\057\001\002\000\026\004" +
    "\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\046\uffb2\047\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\001\002\000\032\004\012\005" +
    "\072\006\055\007\061\010\060\011\073\020\063\030\066" +
    "\044\067\046\070\047\uffb1\054\057\001\002\000\030\002" +
    "\uffa3\004\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\046\uffa3" +
    "\047\uffa3\052\uffa3\053\uffa3\054\uffa3\001\002\000\004\047" +
    "\221\001\002\000\030\002\uffa2\004\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\046\uffa2\047\uffa2\052\uffa2\053\uffa2\054" +
    "\uffa2\001\002\000\004\047\uffb0\001\002\000\042\017\114" +
    "\020\105\022\076\023\100\026\106\027\102\031\101\032" +
    "\112\033\104\034\107\035\110\036\075\037\077\040\111" +
    "\047\uffaf\051\224\001\002\000\030\004\012\005\072\006" +
    "\055\007\061\010\060\011\073\020\063\030\066\044\067" +
    "\046\070\054\057\001\002\000\004\047\uffae\001\002\000" +
    "\026\004\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\046\uffc0" +
    "\047\uffc0\052\uffc0\053\uffc0\054\uffc0\001\002\000\004\041" +
    "\232\001\002\000\006\004\012\054\057\001\002\000\026" +
    "\004\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\046\ufffb\047" +
    "\ufffb\052\ufffb\053\ufffb\054\ufffb\001\002\000\006\004\012" +
    "\054\057\001\002\000\026\004\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\046\ufffd\047\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\001\002\000\030\004\012\005\072\006\055\007\061\010" +
    "\060\011\073\020\063\030\066\044\067\046\070\054\057" +
    "\001\002\000\062\004\uffb5\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\017\114\020\105\022\076\023\100\026\106\027\102" +
    "\031\101\032\112\033\104\034\107\035\110\036\075\037" +
    "\077\040\111\046\uffb5\047\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\001\002\000\006\024\037\025\033\001\002\000\030\004" +
    "\012\005\072\006\055\007\061\010\060\011\073\020\063" +
    "\030\066\044\067\046\070\054\057\001\002\000\062\004" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\017\114\020\105" +
    "\022\076\023\100\026\106\027\102\031\101\032\112\033" +
    "\104\034\107\035\110\036\075\037\077\040\111\046\uffb6" +
    "\047\uffb6\052\uffb6\053\uffb6\054\uffb6\001\002\000\034\004" +
    "\uffff\012\uffff\013\uffff\014\uffff\015\uffff\041\uffff\045\uffff" +
    "\046\uffff\047\uffff\051\uffff\052\uffff\053\uffff\054\uffff\001" +
    "\002\000\004\002\uffa8\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\014\002\007\003\004\026\006\030\003\031" +
    "\010\001\001\000\010\003\004\030\003\031\241\001\001" +
    "\000\002\001\001\000\004\003\014\001\001\000\010\003" +
    "\004\030\003\031\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\016\001\001\000\004\026\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\021\005" +
    "\023\027\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\021\005\023\027\025\001" +
    "\001\000\002\001\001\000\004\012\027\001\001\000\004" +
    "\045\144\001\001\000\012\010\035\011\031\013\033\014" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\043\016\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\035\011\040\013\033" +
    "\014\034\001\001\000\002\001\001\000\026\003\050\017" +
    "\070\020\052\021\064\022\061\023\053\025\063\032\055" +
    "\034\073\036\051\001\001\000\004\015\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\047\001\001\000\002\001\001\000\004\016\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\050\017\126" +
    "\020\052\021\064\022\061\023\053\025\063\032\055\034" +
    "\073\036\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\050\017" +
    "\124\020\052\021\064\022\061\023\053\025\063\032\055" +
    "\034\073\036\051\001\001\000\030\003\050\017\120\020" +
    "\052\021\064\022\061\023\053\025\063\032\055\034\073" +
    "\035\117\036\051\001\001\000\004\024\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\050\017\114\020\052\021" +
    "\064\022\061\023\053\025\063\032\055\034\073\036\051" +
    "\001\001\000\002\001\001\000\004\024\112\001\001\000" +
    "\026\003\050\017\070\020\052\021\064\022\061\023\053" +
    "\025\063\032\055\034\073\036\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\112\001\001\000\030" +
    "\003\050\017\120\020\052\021\064\022\061\023\053\025" +
    "\063\032\055\034\073\035\122\036\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\112\001\001\000" +
    "\002\001\001\000\004\024\112\001\001\000\006\003\130" +
    "\036\131\001\001\000\004\016\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\050\017\137\020\052\021\064\022\061\023" +
    "\053\025\063\032\055\033\136\034\073\036\051\001\001" +
    "\000\002\001\001\000\004\024\112\001\001\000\002\001" +
    "\001\000\030\003\050\017\137\020\052\021\064\022\061" +
    "\023\053\025\063\032\055\033\142\034\073\036\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\147\004\155\005\163\006\166\032\153\036" +
    "\151\037\157\040\165\041\146\042\154\043\150\045\156" +
    "\046\161\001\001\000\002\001\001\000\004\016\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\217\001\001\000\002\001\001\000\004\007" +
    "\177\001\001\000\002\001\001\000\034\003\147\004\155" +
    "\005\163\006\166\032\153\036\151\037\157\040\165\041" +
    "\146\042\154\043\150\045\156\046\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\050\017\171\020" +
    "\052\021\064\022\061\023\053\025\063\032\055\034\073" +
    "\036\051\001\001\000\004\024\112\001\001\000\032\003" +
    "\147\004\155\005\163\006\166\032\153\036\151\037\157" +
    "\040\173\041\146\042\154\043\150\045\156\001\001\000" +
    "\002\001\001\000\032\003\147\004\155\005\163\006\166" +
    "\032\153\036\151\037\157\040\175\041\146\042\154\043" +
    "\150\045\156\001\001\000\002\001\001\000\006\003\021" +
    "\005\206\001\001\000\002\001\001\000\026\003\050\017" +
    "\201\020\052\021\064\022\061\023\053\025\063\032\055" +
    "\034\073\036\051\001\001\000\004\024\112\001\001\000" +
    "\006\003\203\032\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\210\001\001\000\004\007\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\050" +
    "\017\212\020\052\021\064\022\061\023\053\025\063\032" +
    "\055\034\073\036\051\001\001\000\004\024\112\001\001" +
    "\000\032\003\147\004\155\005\163\006\166\032\153\036" +
    "\151\037\157\040\214\041\146\042\154\043\150\045\156" +
    "\001\001\000\002\001\001\000\030\003\050\017\222\020" +
    "\052\021\064\022\061\023\053\025\063\032\055\034\073" +
    "\036\051\047\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\112" +
    "\001\001\000\030\003\050\017\222\020\052\021\064\022" +
    "\061\023\053\025\063\032\055\034\073\036\051\047\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\203\032\230\001\001\000\002\001\001" +
    "\000\006\003\203\032\232\001\001\000\002\001\001\000" +
    "\026\003\050\017\234\020\052\021\064\022\061\023\053" +
    "\025\063\032\055\034\073\036\051\001\001\000\004\024" +
    "\112\001\001\000\010\010\240\013\033\014\034\001\001" +
    "\000\026\003\050\017\237\020\052\021\064\022\061\023" +
    "\053\025\063\032\055\034\073\036\051\001\001\000\004" +
    "\024\112\001\001\000\002\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 103. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Program start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // identifier ::= IDENTIFIER 
            {
                Identifier RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Identifier(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",1, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // var_decl ::= identifier COLON type 
            {
                VarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new VarDecl(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // var_init ::= var_decl GETS expr 
            {
                VarInit RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-2).<VarDecl> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new VarInit(vd, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_init",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // tuple_init ::= UNDERSCORE tuple_decl_list GETS function_call 
            {
                TupleInit RESULT = null;
                int tdlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TupleDeclList tdl = CUP$parser$stack.elementAt(CUP$parser$top-2).<TupleDeclList> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(tdl, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",4, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // tuple_init ::= var_decl tuple_decl_list GETS function_call 
            {
                TupleInit RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-3).<VarDecl> value();
                int tdlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TupleDeclList tdl = CUP$parser$stack.elementAt(CUP$parser$top-2).<TupleDeclList> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(vd, tdl, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",4, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // tuple_init ::= UNDERSCORE GETS function_call 
            {
                TupleInit RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // tuple_decl_list ::= COMMA var_decl 
            {
                TupleDeclList RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new TupleDeclList(vd, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // tuple_decl_list ::= COMMA var_decl tuple_decl_list 
            {
                TupleDeclList RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl> value();
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                TupleDeclList tdl = CUP$parser$stack.peek().<TupleDeclList> value();
                 RESULT = new TupleDeclList(vd, tdl, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",5, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // tuple_decl_list ::= COMMA UNDERSCORE 
            {
                TupleDeclList RESULT = null;
                 RESULT = new TupleDeclList(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // tuple_decl_list ::= COMMA UNDERSCORE tuple_decl_list 
            {
                TupleDeclList RESULT = null;
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                TupleDeclList tdl = CUP$parser$stack.peek().<TupleDeclList> value();
                 RESULT = new TupleDeclList(tdl, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",5, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // type ::= primitive_type 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                PrimitiveType pt = CUP$parser$stack.peek().<PrimitiveType> value();
                 RESULT = pt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // type ::= array_type 
            {
                Type RESULT = null;
                int atleft = CUP$parser$stack.peek().left;
                int atright = CUP$parser$stack.peek().right;
                ArrayType at = CUP$parser$stack.peek().<ArrayType> value();
                 RESULT = at; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // primitive_type ::= INT 
            {
                PrimitiveType RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Object i = CUP$parser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(0); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // primitive_type ::= BOOL 
            {
                PrimitiveType RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // array_type ::= primitive_type brackets 
            {
                ArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new ArrayType(pt, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",10, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // array_type ::= primitive_type brackets_with_content 
            {
                ArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int bwcleft = CUP$parser$stack.peek().left;
                int bwcright = CUP$parser$stack.peek().right;
                BracketsWithContent bwc = CUP$parser$stack.peek().<BracketsWithContent> value();
                 RESULT = new ArrayType(pt, bwc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",10, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // array_type ::= primitive_type brackets_with_content brackets 
            {
                ArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-2).<PrimitiveType> value();
                int bwcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int bwcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                BracketsWithContent bwc = CUP$parser$stack.elementAt(CUP$parser$top-1).<BracketsWithContent> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new ArrayType(pt, bwc, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // brackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
                Brackets RESULT = null;
                 RESULT = new Brackets(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",11, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // brackets ::= OPEN_BRACKET CLOSE_BRACKET brackets 
            {
                Brackets RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new Brackets(b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // brackets_with_content ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                BracketsWithContent RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new BracketsWithContent(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets_with_content",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // brackets_with_content ::= OPEN_BRACKET expr CLOSE_BRACKET brackets_with_content 
            {
                BracketsWithContent RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bwcleft = CUP$parser$stack.peek().left;
                int bwcright = CUP$parser$stack.peek().right;
                BracketsWithContent bwc = CUP$parser$stack.peek().<BracketsWithContent> value();
                 RESULT = new BracketsWithContent(e, bwc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets_with_content",12, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // expr ::= constant 
            {
                Expr RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Constant c = CUP$parser$stack.peek().<Constant> value();
                 RESULT = c; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // expr ::= unary_expr 
            {
                Expr RESULT = null;
                int ueleft = CUP$parser$stack.peek().left;
                int ueright = CUP$parser$stack.peek().right;
                UnaryExpr ue = CUP$parser$stack.peek().<UnaryExpr> value();
                 RESULT = ue; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // expr ::= binary_expr 
            {
                Expr RESULT = null;
                int beleft = CUP$parser$stack.peek().left;
                int beright = CUP$parser$stack.peek().right;
                BinaryExpr be = CUP$parser$stack.peek().<BinaryExpr> value();
                 RESULT = be; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // expr ::= identifier 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = id; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // expr ::= array_element 
            {
                Expr RESULT = null;
                int aeleft = CUP$parser$stack.peek().left;
                int aeright = CUP$parser$stack.peek().right;
                ArrayElement ae = CUP$parser$stack.peek().<ArrayElement> value();
                 RESULT = ae; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // expr ::= function_call 
            {
                Expr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = expression; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // constant ::= literal 
            {
                Constant RESULT = null;
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Literal l = CUP$parser$stack.peek().<Literal> value();
                 RESULT = l; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // constant ::= array_literal 
            {
                Constant RESULT = null;
                int alleft = CUP$parser$stack.peek().left;
                int alright = CUP$parser$stack.peek().right;
                ArrayLiteral al = CUP$parser$stack.peek().<ArrayLiteral> value();
                 RESULT = al; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // unary_expr ::= unary_op expr 
            {
                UnaryExpr RESULT = null;
                int uoleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int uoright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                UnaryOp uo = CUP$parser$stack.elementAt(CUP$parser$top-1).<UnaryOp> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(expression, uo); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // unary_op ::= MINUS 
            {
                UnaryOp RESULT = null;
                 RESULT = UnaryOp.INT_NEG; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // unary_op ::= NOT 
            {
                UnaryOp RESULT = null;
                 RESULT = UnaryOp.LOG_NEG; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // binary_expr ::= expr binary_op expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int opleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int opright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                BinaryOp op = CUP$parser$stack.elementAt(CUP$parser$top-1).<BinaryOp> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, op); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_expr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // binary_op ::= PLUS 
            {
                BinaryOp RESULT = null;
                 RESULT = BinaryOp.PLUS; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // binary_op ::= MINUS 
            {
                BinaryOp RESULT = null;
                 RESULT = BinaryOp.MINUS; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // binary_op ::= TIMES 
            {
                BinaryOp RESULT = null;
                 RESULT = BinaryOp.TIMES; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // binary_op ::= HIGH_MULT 
            {
                BinaryOp RESULT = null;
                 RESULT = BinaryOp.HIGH_MULT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // binary_op ::= DIVIDE 
            {
                BinaryOp RESULT = null;
                 RESULT = BinaryOp.DIVIDE; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // binary_op ::= MODULO 
            {
                BinaryOp RESULT = null;
                 RESULT = BinaryOp.MODULO; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // binary_op ::= EQUAL 
            {
                BinaryOp RESULT = null;
                 RESULT = BinaryOp.EQUAL; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // binary_op ::= NOT_EQUAL 
            {
                BinaryOp RESULT = null;
                 RESULT = BinaryOp.NOT_EQUAL; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // binary_op ::= LT 
            {
                BinaryOp RESULT = null;
                 RESULT = BinaryOp.LT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // binary_op ::= LEQ 
            {
                BinaryOp RESULT = null;
                 RESULT = BinaryOp.LEQ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // binary_op ::= GT 
            {
                BinaryOp RESULT = null;
                 RESULT = BinaryOp.GT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // binary_op ::= GEQ 
            {
                BinaryOp RESULT = null;
                 RESULT = BinaryOp.GEQ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // binary_op ::= AND 
            {
                BinaryOp RESULT = null;
                 RESULT = BinaryOp.AND; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // binary_op ::= OR 
            {
                BinaryOp RESULT = null;
                 RESULT = BinaryOp.OR; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // literal ::= INTEGER_LITERAL 
            {
                Literal RESULT = null;
                int illeft = CUP$parser$stack.peek().left;
                int ilright = CUP$parser$stack.peek().right;
                Long il = CUP$parser$stack.peek().<Long> value();
                 RESULT = new Literal(il); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // literal ::= CHARACTER_LITERAL 
            {
                Literal RESULT = null;
                int clleft = CUP$parser$stack.peek().left;
                int clright = CUP$parser$stack.peek().right;
                Character cl = CUP$parser$stack.peek().<Character> value();
                 RESULT = new Literal(cl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // literal ::= STRING_LITERAL 
            {
                Literal RESULT = null;
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                String sl = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // literal ::= TRUE 
            {
                Literal RESULT = null;
                 RESULT = new Literal(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // literal ::= FALSE 
            {
                Literal RESULT = null;
                 RESULT = new Literal(false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // function_call ::= identifier OPEN_PAREN function_arg CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int faleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int faright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionArg fa = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionArg> value();
                 RESULT = new FunctionCall(id, fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",24, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // function_call ::= identifier OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                 RESULT = new FunctionCall(id, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // function_call ::= LENGTH OPEN_PAREN identifier CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                 RESULT = new FunctionCall(id, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",24, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // function_call ::= LENGTH OPEN_PAREN array_element CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int aeleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aeright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayElement ae = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayElement> value();
                 RESULT = new FunctionCall(ae); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",24, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // function_arg ::= expr 
            {
                FunctionArg RESULT = null;
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new FunctionArg(expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // function_arg ::= expr COMMA function_arg 
            {
                FunctionArg RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int faleft = CUP$parser$stack.peek().left;
                int faright = CUP$parser$stack.peek().right;
                FunctionArg fa = CUP$parser$stack.peek().<FunctionArg> value();
                 RESULT = new FunctionArg(expression, fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",25, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // array_literal ::= OPEN_BRACE array_element_list CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int aelleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aelright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayElementList ael = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayElementList> value();
                 RESULT = new ArrayLiteral(ael); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literal",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // array_element_list ::= expr 
            {
                ArrayElementList RESULT = null;
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ArrayElementList(expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // array_element_list ::= expr COMMA array_element_list 
            {
                ArrayElementList RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int aelleft = CUP$parser$stack.peek().left;
                int aelright = CUP$parser$stack.peek().right;
                ArrayElementList ael = CUP$parser$stack.peek().<ArrayElementList> value();
                 RESULT = new ArrayElementList(expression,ael); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // array_element_list ::= 
            {
                ArrayElementList RESULT = null;
                 RESULT = null; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",27, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // array_element ::= identifier brackets_with_content 
            {
                ArrayElement RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int bwcleft = CUP$parser$stack.peek().left;
                int bwcright = CUP$parser$stack.peek().right;
                BracketsWithContent bwc = CUP$parser$stack.peek().<BracketsWithContent> value();
                 RESULT = new ArrayElement(id, bwc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",28, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // stmt ::= naked_stmt SEMICOLON 
            {
                Stmt RESULT = null;
                int nsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int nsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                NakedStmt ns = CUP$parser$stack.elementAt(CUP$parser$top-1).<NakedStmt> value();
                 RESULT = new Stmt(ns, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",30, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // stmt ::= naked_stmt 
            {
                Stmt RESULT = null;
                int nsleft = CUP$parser$stack.peek().left;
                int nsright = CUP$parser$stack.peek().right;
                NakedStmt ns = CUP$parser$stack.peek().<NakedStmt> value();
                 RESULT = new Stmt(ns, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // naked_stmt ::= assignment_stmt 
            {
                NakedStmt RESULT = null;
                int assleft = CUP$parser$stack.peek().left;
                int assright = CUP$parser$stack.peek().right;
                AssignmentStmt ass = CUP$parser$stack.peek().<AssignmentStmt> value();
                 RESULT = ass; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // naked_stmt ::= if_stmt 
            {
                NakedStmt RESULT = null;
                int isleft = CUP$parser$stack.peek().left;
                int isright = CUP$parser$stack.peek().right;
                IfStmt is = CUP$parser$stack.peek().<IfStmt> value();
                 RESULT = is; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // naked_stmt ::= while_stmt 
            {
                NakedStmt RESULT = null;
                int wsleft = CUP$parser$stack.peek().left;
                int wsright = CUP$parser$stack.peek().right;
                WhileStmt ws = CUP$parser$stack.peek().<WhileStmt> value();
                 RESULT = ws; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // naked_stmt ::= function_call 
            {
                NakedStmt RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // naked_stmt ::= block_stmt 
            {
                NakedStmt RESULT = null;
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = bs; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // naked_stmt ::= var_decl 
            {
                NakedStmt RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = vd; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // naked_stmt ::= var_init 
            {
                NakedStmt RESULT = null;
                int vileft = CUP$parser$stack.peek().left;
                int viright = CUP$parser$stack.peek().right;
                VarInit vi = CUP$parser$stack.peek().<VarInit> value();
                 RESULT = vi; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // naked_stmt ::= tuple_init 
            {
                NakedStmt RESULT = null;
                int tileft = CUP$parser$stack.peek().left;
                int tiright = CUP$parser$stack.peek().right;
                TupleInit ti = CUP$parser$stack.peek().<TupleInit> value();
                 RESULT = ti; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // assignment_stmt ::= identifier GETS expr 
            {
                AssignmentStmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(id, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",31, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // assignment_stmt ::= array_element GETS expr 
            {
                AssignmentStmt RESULT = null;
                int aeleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int aeright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayElement ae = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayElement> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(ae, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",31, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                IfStmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new IfStmt(e, s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",32, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt ELSE stmt 
            {
                IfStmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-4).<Expr> value();
                int s1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int s1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Stmt s1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Stmt> value();
                int s2left = CUP$parser$stack.peek().left;
                int s2right = CUP$parser$stack.peek().right;
                Stmt s2 = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new IfStmt(e, s1, s2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",32, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // while_stmt ::= WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                WhileStmt RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new WhileStmt(expression, s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",33, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // return_stmt ::= RETURN 
            {
                ReturnStmt RESULT = null;
                 RESULT = new ReturnStmt(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // return_stmt ::= RETURN return_list 
            {
                ReturnStmt RESULT = null;
                int rlleft = CUP$parser$stack.peek().left;
                int rlright = CUP$parser$stack.peek().right;
                ReturnList rl = CUP$parser$stack.peek().<ReturnList> value();
                 RESULT = new ReturnStmt(rl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",34, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // return_list ::= expr 
            {
                ReturnList RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ReturnList(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",37, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // return_list ::= expr COMMA return_list 
            {
                ReturnList RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int rlleft = CUP$parser$stack.peek().left;
                int rlright = CUP$parser$stack.peek().right;
                ReturnList rl = CUP$parser$stack.peek().<ReturnList> value();
                 RESULT = new ReturnList(e, rl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",37, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // function_decl ::= identifier OPEN_PAREN function_param CLOSE_PAREN return_type block_stmt 
            {
                FunctionDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-5).<Identifier> value();
                int fpleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int fpright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                FunctionParam fp = CUP$parser$stack.elementAt(CUP$parser$top-3).<FunctionParam> value();
                int rtleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rtright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnType rt = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnType> value();
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = new FunctionDecl(id, fp, rt, bs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",22, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // return_type ::= COLON type_list 
            {
                ReturnType RESULT = null;
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                TypeList tl = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new ReturnType(tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",8, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // return_type ::= 
            {
                ReturnType RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",8, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // type_list ::= type 
            {
                TypeList RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new TypeList(t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // type_list ::= type COMMA type_list 
            {
                TypeList RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                TypeList tl = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new TypeList(t, tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",7, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // function_decl_list ::= function_decl function_decl_list 
            {
                FunctionDeclList RESULT = null;
                int fdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionDecl fd = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionDecl> value();
                int fdlleft = CUP$parser$stack.peek().left;
                int fdlright = CUP$parser$stack.peek().right;
                FunctionDeclList fdl = CUP$parser$stack.peek().<FunctionDeclList> value();
                 RESULT = new FunctionDeclList(fd, fdl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl_list",23, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // function_decl_list ::= 
            {
                FunctionDeclList RESULT = null;
                 RESULT = null; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl_list",23, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // function_param ::= var_decl 
            {
                FunctionParam RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new FunctionParam(vd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // function_param ::= var_decl COMMA function_param 
            {
                FunctionParam RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-2).<VarDecl> value();
                int fpleft = CUP$parser$stack.peek().left;
                int fpright = CUP$parser$stack.peek().right;
                FunctionParam fp = CUP$parser$stack.peek().<FunctionParam> value();
                 RESULT = new FunctionParam(vd, fp); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // block_stmt ::= OPEN_BRACE CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                 RESULT = new BlockStmt(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",35, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // block_stmt ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                StmtList sl = CUP$parser$stack.elementAt(CUP$parser$top-1).<StmtList> value();
                 RESULT = new BlockStmt(sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",35, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // block_stmt ::= OPEN_BRACE stmt_list return_stmt CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                StmtList sl = CUP$parser$stack.elementAt(CUP$parser$top-2).<StmtList> value();
                int rsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnStmt rs = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnStmt> value();
                 RESULT = new BlockStmt(sl, rs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",35, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // stmt_list ::= stmt 
            {
                StmtList RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new StmtList(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // stmt_list ::= stmt stmt_list 
            {
                StmtList RESULT = null;
                int sleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Stmt s = CUP$parser$stack.elementAt(CUP$parser$top-1).<Stmt> value();
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                StmtList sl = CUP$parser$stack.peek().<StmtList> value();
                 RESULT = new StmtList(s, sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",36, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // use_id ::= USE identifier 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new UseId(id, false); System.out.println("1"); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",20, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // use_id ::= USE identifier SEMICOLON 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                 RESULT = new UseId(id, true); System.out.println("2"); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // use_id ::= USE identifier use_id 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int uileft = CUP$parser$stack.peek().left;
                int uiright = CUP$parser$stack.peek().right;
                UseId ui = CUP$parser$stack.peek().<UseId> value();
                 RESULT = new UseId(id, ui, false); System.out.println("3"); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // use_id ::= USE identifier SEMICOLON use_id 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int uileft = CUP$parser$stack.peek().left;
                int uiright = CUP$parser$stack.peek().right;
                UseId ui = CUP$parser$stack.peek().<UseId> value();
                 RESULT = new UseId(id, ui, true); System.out.println("4"); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",20, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // program ::= function_decl_list 
            {
                Program RESULT = null;
                int fdlleft = CUP$parser$stack.peek().left;
                int fdlright = CUP$parser$stack.peek().right;
                FunctionDeclList fdl = CUP$parser$stack.peek().<FunctionDeclList> value();
                 RESULT = new Program(fdl); System.out.println("p1"); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // program ::= use_id function_decl_list 
            {
                Program RESULT = null;
                int useidcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int useidcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                UseId useidc = CUP$parser$stack.elementAt(CUP$parser$top-1).<UseId> value();
                int fdlleft = CUP$parser$stack.peek().left;
                int fdlright = CUP$parser$stack.peek().right;
                FunctionDeclList fdl = CUP$parser$stack.peek().<FunctionDeclList> value();
                 RESULT = new Program(useidc, fdl); System.out.println("p2");
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
