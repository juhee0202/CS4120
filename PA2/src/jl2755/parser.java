
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package jl2755;


/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\004\005\000\002\003" +
    "\005\000\002\005\006\000\002\005\006\000\002\005\005" +
    "\000\002\006\004\000\002\006\005\000\002\006\004\000" +
    "\002\006\005\000\002\007\003\000\002\007\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\004\000\002\013" +
    "\004\000\002\013\005\000\002\014\004\000\002\014\005" +
    "\000\002\015\005\000\002\015\006\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\005\000\002\017" +
    "\003\000\002\017\003\000\002\020\004\000\002\020\004" +
    "\000\002\021\005\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\030\006\000\002\030\005\000\002\031" +
    "\003\000\002\031\005\000\002\032\005\000\002\033\003" +
    "\000\002\033\005\000\002\033\002\000\002\034\004\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\036\005\000\002\036\005" +
    "\000\002\037\007\000\002\037\010\000\002\040\007\000" +
    "\002\041\003\000\002\041\004\000\002\044\003\000\002" +
    "\044\005\000\002\026\010\000\002\011\004\000\002\011" +
    "\002\000\002\010\003\000\002\010\005\000\002\027\004" +
    "\000\002\027\002\000\002\025\003\000\002\025\005\000" +
    "\002\042\004\000\002\042\005\000\002\042\006\000\002" +
    "\043\003\000\002\043\004\000\002\043\004\000\002\043" +
    "\005\000\002\024\004\000\002\024\005\000\002\024\005" +
    "\000\002\024\006\000\002\002\003\000\002\002\004" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\010\002\uffad\004\011\020\005\001\002\000" +
    "\006\002\uffad\004\011\001\002\000\004\004\227\001\002" +
    "\000\006\002\uffad\004\011\001\002\000\004\002\225\001" +
    "\002\000\004\002\uff9f\001\002\000\004\043\012\001\002" +
    "\000\004\004\015\001\002\000\004\044\123\001\002\000" +
    "\006\044\uffac\050\121\001\002\000\004\047\016\001\002" +
    "\000\006\012\023\013\017\001\002\000\032\004\ufff4\014" +
    "\ufff4\016\ufff4\017\ufff4\040\ufff4\041\ufff4\044\ufff4\045\ufff4" +
    "\046\ufff4\050\ufff4\051\ufff4\052\ufff4\001\002\000\032\004" +
    "\ufff7\014\ufff7\016\ufff7\017\ufff7\040\ufff7\041\024\044\ufff7" +
    "\045\ufff7\046\ufff7\050\ufff7\051\ufff7\052\ufff7\001\002\000" +
    "\030\004\ufff6\014\ufff6\016\ufff6\017\ufff6\040\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\050\ufff6\051\ufff6\052\ufff6\001\002\000" +
    "\030\004\000\014\000\016\000\017\000\040\000\044\000" +
    "\045\000\046\000\050\000\051\000\052\000\001\002\000" +
    "\032\004\ufff5\014\ufff5\016\ufff5\017\ufff5\040\ufff5\041\ufff5" +
    "\044\ufff5\045\ufff5\046\ufff5\050\ufff5\051\ufff5\052\ufff5\001" +
    "\002\000\030\004\053\005\051\006\037\007\041\010\040" +
    "\011\052\022\042\027\045\042\031\043\046\045\047\001" +
    "\002\000\032\004\ufff2\014\ufff2\016\ufff2\017\ufff2\040\ufff2" +
    "\041\027\044\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\001\002\000\030\004\ufff3\014\ufff3\016\ufff3\017\ufff3" +
    "\040\ufff3\044\ufff3\045\ufff3\046\ufff3\050\ufff3\051\ufff3\052" +
    "\ufff3\001\002\000\004\042\031\001\002\000\030\004\ufff1" +
    "\014\ufff1\016\ufff1\017\ufff1\040\ufff1\044\ufff1\045\ufff1\046" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\001\002\000\032\004\ufff0" +
    "\014\ufff0\016\ufff0\017\ufff0\040\ufff0\041\027\044\ufff0\045" +
    "\ufff0\046\ufff0\050\ufff0\051\ufff0\052\ufff0\001\002\000\030" +
    "\004\uffef\014\uffef\016\uffef\017\uffef\040\uffef\044\uffef\045" +
    "\uffef\046\uffef\050\uffef\051\uffef\052\uffef\001\002\000\064" +
    "\004\uffe8\014\uffe8\016\uffe8\017\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\042\uffe8\044" +
    "\uffe8\045\uffe8\046\uffe8\050\uffe8\051\uffe8\052\uffe8\001\002" +
    "\000\064\004\uffec\014\uffec\016\uffec\017\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\042" +
    "\uffec\044\uffec\045\uffec\046\uffec\050\uffec\051\uffec\052\uffec" +
    "\001\002\000\064\004\uffea\014\uffea\016\uffea\017\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\042\uffea\044\uffea\045\uffea\046\uffea\050\uffea\051\uffea" +
    "\052\uffea\001\002\000\064\004\uffe7\014\uffe7\016\uffe7\017" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\042\uffe7\044\uffe7\045\uffe7\046\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\001\002\000\064\004\uffd1\014\uffd1\016" +
    "\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\042\uffd1\044\uffd1\045\uffd1\046\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\001\002\000\064\004\uffcf\014" +
    "\uffcf\016\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\042\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\050\uffcf\051\uffcf\052\uffcf\001\002\000\064\004" +
    "\uffd2\014\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\042\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\050\uffd2\051\uffd2\052\uffd2\001\002\000" +
    "\026\004\053\005\051\006\037\007\041\010\040\011\052" +
    "\022\042\027\045\043\046\045\047\001\002\000\064\004" +
    "\uffe5\014\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\042\uffe5\044\uffe5" +
    "\045\uffe5\046\uffe5\050\uffe5\051\uffe5\052\uffe5\001\002\000" +
    "\064\004\uffeb\014\uffeb\016\uffeb\017\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\042\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\050\uffeb\051\uffeb\052\uffeb\001" +
    "\002\000\026\004\053\005\051\006\037\007\041\010\040" +
    "\011\052\022\042\027\045\043\046\045\047\001\002\000" +
    "\026\004\053\005\051\006\037\007\041\010\040\011\052" +
    "\022\042\027\045\043\046\045\047\001\002\000\030\004" +
    "\053\005\051\006\037\007\041\010\040\011\052\022\042" +
    "\027\045\043\046\045\047\046\uffc6\001\002\000\040\021" +
    "\102\022\074\023\065\024\066\025\073\026\071\030\070" +
    "\031\100\032\072\033\075\034\076\035\064\036\067\037" +
    "\077\042\106\001\002\000\064\004\uffd0\014\uffd0\016\uffd0" +
    "\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\042\uffd0\044\uffd0\045\uffd0\046\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\001\002\000\064\004\uffce\014\uffce" +
    "\016\uffce\017\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\042\uffce\044\uffce\045\uffce\046" +
    "\uffce\050\uffce\051\uffce\052\uffce\001\002\000\070\004\uffe9" +
    "\014\uffe9\016\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\041\056\042\uffe9\043" +
    "\055\044\uffe9\045\uffe9\046\uffe9\050\uffe9\051\uffe9\052\uffe9" +
    "\001\002\000\064\004\uffe4\014\uffe4\016\uffe4\017\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\042\uffe4\044\uffe4\045\uffe4\046\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\001\002\000\030\004\053\005\051\006\037\007" +
    "\041\010\040\011\052\022\042\027\045\043\046\044\062" +
    "\045\047\001\002\000\026\004\053\005\051\006\037\007" +
    "\041\010\040\011\052\022\042\027\045\043\046\045\047" +
    "\001\002\000\066\004\uffc5\014\uffc5\016\uffc5\017\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\001\002\000\004\044\105\001\002\000" +
    "\042\021\102\022\074\023\065\024\066\025\073\026\071" +
    "\030\070\031\100\032\072\033\075\034\076\035\064\036" +
    "\067\037\077\044\uffcb\050\063\001\002\000\064\004\uffcc" +
    "\014\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\042\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc\001\002\000\026" +
    "\004\053\005\051\006\037\007\041\010\040\011\052\022" +
    "\042\027\045\043\046\045\047\001\002\000\026\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\022\uffd3\027" +
    "\uffd3\043\uffd3\045\uffd3\001\002\000\026\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\022\uffde\027\uffde\043" +
    "\uffde\045\uffde\001\002\000\026\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\022\uffdd\027\uffdd\043\uffdd\045" +
    "\uffdd\001\002\000\026\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\022\uffda\027\uffda\043\uffda\045\uffda\001" +
    "\002\000\026\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\022\uffd8\027\uffd8\043\uffd8\045\uffd8\001\002\000" +
    "\026\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\022\uffdb\027\uffdb\043\uffdb\045\uffdb\001\002\000\026\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\022\uffd6" +
    "\027\uffd6\043\uffd6\045\uffd6\001\002\000\026\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\022\uffdc\027\uffdc" +
    "\043\uffdc\045\uffdc\001\002\000\026\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\022\uffdf\027\uffdf\043\uffdf" +
    "\045\uffdf\001\002\000\026\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\022\uffd5\027\uffd5\043\uffd5\045\uffd5" +
    "\001\002\000\026\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\022\uffd4\027\uffd4\043\uffd4\045\uffd4\001\002" +
    "\000\026\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\022\uffd9\027\uffd9\043\uffd9\045\uffd9\001\002\000\026" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\022" +
    "\uffd7\027\uffd7\043\uffd7\045\uffd7\001\002\000\026\004\053" +
    "\005\051\006\037\007\041\010\040\011\052\022\042\027" +
    "\045\043\046\045\047\001\002\000\026\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\022\uffe0\027\uffe0\043" +
    "\uffe0\045\uffe0\001\002\000\064\004\uffe1\014\uffe1\016\uffe1" +
    "\017\uffe1\021\102\022\074\023\065\024\066\025\073\026" +
    "\071\030\070\031\100\032\072\033\075\034\076\035\064" +
    "\036\067\037\077\042\uffe1\044\uffe1\045\uffe1\046\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\001\002\000\004\044\uffca\001\002" +
    "\000\064\004\uffcd\014\uffcd\016\uffcd\017\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\042" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd\052\uffcd" +
    "\001\002\000\070\004\uffee\014\uffee\016\uffee\017\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\030\uffee" +
    "\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\056\042\uffee\044\uffee\045\uffee\046\uffee" +
    "\050\uffee\051\uffee\052\uffee\001\002\000\070\004\uffed\014" +
    "\uffed\016\uffed\017\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\044\uffed\045\uffed\046\uffed\050\uffed\051\uffed\052\uffed\001" +
    "\002\000\004\046\114\001\002\000\042\021\102\022\074" +
    "\023\065\024\066\025\073\026\071\030\070\031\100\032" +
    "\072\033\075\034\076\035\064\036\067\037\077\046\uffc8" +
    "\050\112\001\002\000\030\004\053\005\051\006\037\007" +
    "\041\010\040\011\052\022\042\027\045\043\046\045\047" +
    "\046\uffc6\001\002\000\004\046\uffc7\001\002\000\064\004" +
    "\uffc9\014\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\042\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\050\uffc9\051\uffc9\052\uffc9\001\002\000" +
    "\040\021\102\022\074\023\065\024\066\025\073\026\071" +
    "\030\070\031\100\032\072\033\075\034\076\035\064\036" +
    "\067\037\077\044\116\001\002\000\064\004\uffe6\014\uffe6" +
    "\016\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\042\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\001\002\000\064\004\uffe2" +
    "\014\uffe2\016\uffe2\017\uffe2\021\102\022\074\023\065\024" +
    "\066\025\073\026\071\030\070\031\100\032\072\033\075" +
    "\034\076\035\064\036\067\037\077\042\uffe2\044\uffe2\045" +
    "\uffe2\046\uffe2\050\uffe2\051\uffe2\052\uffe2\001\002\000\064" +
    "\004\uffe3\014\uffe3\016\uffe3\017\uffe3\021\uffe3\022\uffe3\023" +
    "\065\024\066\025\073\026\071\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\042\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\050\uffe3\051\uffe3\052\uffe3\001\002" +
    "\000\004\004\015\001\002\000\004\044\uffab\001\002\000" +
    "\006\045\uffb1\047\125\001\002\000\004\045\133\001\002" +
    "\000\006\012\023\013\017\001\002\000\004\045\uffb2\001" +
    "\002\000\006\045\uffb0\050\130\001\002\000\006\012\023" +
    "\013\017\001\002\000\004\045\uffaf\001\002\000\006\002" +
    "\uffb3\004\uffb3\001\002\000\016\004\147\014\151\016\146" +
    "\045\133\046\144\052\137\001\002\000\022\004\uffc4\014" +
    "\uffc4\016\uffc4\017\uffc4\045\uffc4\046\uffc4\051\uffc4\052\uffc4" +
    "\001\002\000\022\004\uffc2\014\uffc2\016\uffc2\017\uffc2\045" +
    "\uffc2\046\uffc2\051\uffc2\052\uffc2\001\002\000\004\040\223" +
    "\001\002\000\006\040\217\050\165\001\002\000\022\004" +
    "\uffc1\014\uffc1\016\uffc1\017\uffc1\045\uffc1\046\uffc1\051\uffc1" +
    "\052\uffc1\001\002\000\022\004\uffc3\014\uffc3\016\uffc3\017" +
    "\uffc3\045\uffc3\046\uffc3\051\uffc3\052\uffc3\001\002\000\022" +
    "\004\uffbe\014\uffbe\016\uffbe\017\uffbe\045\uffbe\046\uffbe\051" +
    "\uffbe\052\uffbe\001\002\000\022\004\uffc0\014\uffc0\016\uffc0" +
    "\017\uffc0\045\uffc0\046\uffc0\051\uffc0\052\uffc0\001\002\000" +
    "\024\002\uffaa\004\uffaa\014\uffaa\016\uffaa\017\uffaa\045\uffaa" +
    "\046\uffaa\051\uffaa\052\uffaa\001\002\000\006\017\206\046" +
    "\207\001\002\000\004\043\202\001\002\000\012\040\200" +
    "\041\056\043\055\047\016\001\002\000\026\004\uffbf\014" +
    "\uffbf\016\uffbf\017\uffbf\040\167\045\uffbf\046\uffbf\050\165" +
    "\051\uffbf\052\uffbf\001\002\000\004\043\157\001\002\000" +
    "\022\004\147\014\151\016\146\017\uffa7\045\133\046\uffa7" +
    "\051\154\052\137\001\002\000\022\004\uffbd\014\uffbd\016" +
    "\uffbd\017\uffbd\045\uffbd\046\uffbd\051\uffbd\052\uffbd\001\002" +
    "\000\020\004\147\014\151\016\146\017\uffa6\045\133\046" +
    "\uffa6\052\137\001\002\000\006\017\uffa5\046\uffa5\001\002" +
    "\000\006\017\uffa4\046\uffa4\001\002\000\026\004\053\005" +
    "\051\006\037\007\041\010\040\011\052\022\042\027\045" +
    "\043\046\045\047\001\002\000\040\021\102\022\074\023" +
    "\065\024\066\025\073\026\071\030\070\031\100\032\072" +
    "\033\075\034\076\035\064\036\067\037\077\044\161\001" +
    "\002\000\016\004\147\014\151\015\162\016\146\045\133" +
    "\052\137\001\002\000\014\004\147\014\151\016\146\045" +
    "\133\052\137\001\002\000\022\004\uffba\014\uffba\016\uffba" +
    "\017\uffba\045\uffba\046\uffba\051\uffba\052\uffba\001\002\000" +
    "\022\004\uffb9\014\uffb9\016\uffb9\017\uffb9\045\uffb9\046\uffb9" +
    "\051\uffb9\052\uffb9\001\002\000\006\004\015\052\174\001" +
    "\002\000\004\040\171\001\002\000\026\004\053\005\051" +
    "\006\037\007\041\010\040\011\052\022\042\027\045\043" +
    "\046\045\047\001\002\000\056\004\uffff\014\uffff\016\uffff" +
    "\017\uffff\021\102\022\074\023\065\024\066\025\073\026" +
    "\071\030\070\031\100\032\072\033\075\034\076\035\064" +
    "\036\067\037\077\045\uffff\046\uffff\051\uffff\052\uffff\001" +
    "\002\000\004\004\173\001\002\000\022\004\ufffd\014\ufffd" +
    "\016\ufffd\017\ufffd\045\ufffd\046\ufffd\051\ufffd\052\ufffd\001" +
    "\002\000\004\043\055\001\002\000\006\040\ufff9\050\165" +
    "\001\002\000\006\040\ufffb\050\165\001\002\000\004\040" +
    "\ufffa\001\002\000\004\040\ufff8\001\002\000\026\004\053" +
    "\005\051\006\037\007\041\010\040\011\052\022\042\027" +
    "\045\043\046\045\047\001\002\000\056\004\uffbc\014\uffbc" +
    "\016\uffbc\017\uffbc\021\102\022\074\023\065\024\066\025" +
    "\073\026\071\030\070\031\100\032\072\033\075\034\076" +
    "\035\064\036\067\037\077\045\uffbc\046\uffbc\051\uffbc\052" +
    "\uffbc\001\002\000\026\004\053\005\051\006\037\007\041" +
    "\010\040\011\052\022\042\027\045\043\046\045\047\001" +
    "\002\000\040\021\102\022\074\023\065\024\066\025\073" +
    "\026\071\030\070\031\100\032\072\033\075\034\076\035" +
    "\064\036\067\037\077\044\204\001\002\000\014\004\147" +
    "\014\151\016\146\045\133\052\137\001\002\000\022\004" +
    "\uffb8\014\uffb8\016\uffb8\017\uffb8\045\uffb8\046\uffb8\051\uffb8" +
    "\052\uffb8\001\002\000\030\004\053\005\051\006\037\007" +
    "\041\010\040\011\052\022\042\027\045\043\046\045\047" +
    "\046\uffb7\001\002\000\024\002\uffa9\004\uffa9\014\uffa9\016" +
    "\uffa9\017\uffa9\045\uffa9\046\uffa9\051\uffa9\052\uffa9\001\002" +
    "\000\004\046\211\001\002\000\024\002\uffa8\004\uffa8\014" +
    "\uffa8\016\uffa8\017\uffa8\045\uffa8\046\uffa8\051\uffa8\052\uffa8" +
    "\001\002\000\004\046\uffb6\001\002\000\042\021\102\022" +
    "\074\023\065\024\066\025\073\026\071\030\070\031\100" +
    "\032\072\033\075\034\076\035\064\036\067\037\077\046" +
    "\uffb5\050\214\001\002\000\026\004\053\005\051\006\037" +
    "\007\041\010\040\011\052\022\042\027\045\043\046\045" +
    "\047\001\002\000\004\046\uffb4\001\002\000\004\040\221" +
    "\001\002\000\004\004\173\001\002\000\022\004\ufffc\014" +
    "\ufffc\016\ufffc\017\ufffc\045\ufffc\046\ufffc\051\ufffc\052\ufffc" +
    "\001\002\000\004\004\173\001\002\000\022\004\ufffe\014" +
    "\ufffe\016\ufffe\017\ufffe\045\ufffe\046\ufffe\051\ufffe\052\ufffe" +
    "\001\002\000\026\004\053\005\051\006\037\007\041\010" +
    "\040\011\052\022\042\027\045\043\046\045\047\001\002" +
    "\000\056\004\uffbb\014\uffbb\016\uffbb\017\uffbb\021\102\022" +
    "\074\023\065\024\066\025\073\026\071\030\070\031\100" +
    "\032\072\033\075\034\076\035\064\036\067\037\077\045" +
    "\uffbb\046\uffbb\051\uffbb\052\uffbb\001\002\000\004\002\001" +
    "\001\002\000\004\002\uff9e\001\002\000\012\002\uffa3\004" +
    "\uffa3\020\005\051\230\001\002\000\010\002\uffa2\004\uffa2" +
    "\020\005\001\002\000\006\002\uffa1\004\uffa1\001\002\000" +
    "\006\002\uffa0\004\uffa0\001\002\000\004\002\uffae\001\002" +
    "" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\012\002\006\024\005\026\003\027\007\001" +
    "\001\000\006\026\003\027\232\001\001\000\002\001\001" +
    "\000\006\026\003\027\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\013\025\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\021\012\017\013\020\001\001\000\002" +
    "\001\001\000\006\014\025\015\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\047" +
    "\017\033\020\043\021\034\023\042\030\035\032\053\034" +
    "\032\001\001\000\004\014\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\117\017\033" +
    "\020\043\021\034\023\042\030\035\032\053\034\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\116" +
    "\017\033\020\043\021\034\023\042\030\035\032\053\034" +
    "\032\001\001\000\022\016\114\017\033\020\043\021\034" +
    "\023\042\030\035\032\053\034\032\001\001\000\024\016" +
    "\110\017\033\020\043\021\034\023\042\030\035\032\053" +
    "\033\107\034\032\001\001\000\004\022\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\056\001\001" +
    "\000\002\001\001\000\024\016\060\017\033\020\043\021" +
    "\034\023\042\030\035\031\057\032\053\034\032\001\001" +
    "\000\022\016\047\017\033\020\043\021\034\023\042\030" +
    "\035\032\053\034\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\100\001\001\000\002\001\001\000" +
    "\024\016\060\017\033\020\043\021\034\023\042\030\035" +
    "\031\103\032\053\034\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\102\017" +
    "\033\020\043\021\034\023\042\030\035\032\053\034\032" +
    "\001\001\000\002\001\001\000\004\022\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\100\001" +
    "\001\000\024\016\110\017\033\020\043\021\034\023\042" +
    "\030\035\032\053\033\112\034\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\100\001\001\000\002" +
    "\001\001\000\004\022\100\001\001\000\004\022\100\001" +
    "\001\000\006\004\013\025\121\001\001\000\002\001\001" +
    "\000\004\011\123\001\001\000\004\042\131\001\001\000" +
    "\012\007\126\010\125\012\017\013\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\126\010\130\012" +
    "\017\013\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\141\004\147\005\152\030\137\034\135\035" +
    "\151\036\133\037\140\040\134\042\142\043\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\207\001\001\000\002\001\001\000\004\015\056" +
    "\001\001\000\004\006\165\001\001\000\002\001\001\000" +
    "\030\003\141\004\147\005\152\030\137\034\135\035\151" +
    "\036\133\037\140\040\134\042\142\043\154\001\001\000" +
    "\002\001\001\000\030\003\141\004\147\005\152\030\137" +
    "\034\135\035\151\036\133\037\140\040\134\042\142\043" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\157\017\033\020\043\021\034\023\042\030\035\032" +
    "\053\034\032\001\001\000\004\022\100\001\001\000\026" +
    "\003\141\004\147\005\152\030\137\034\135\035\162\036" +
    "\133\037\140\040\134\042\142\001\001\000\026\003\141" +
    "\004\147\005\152\030\137\034\135\035\163\036\133\037" +
    "\140\040\134\042\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\174\001\001\000\002\001\001\000" +
    "\022\016\167\017\033\020\043\021\034\023\042\030\035" +
    "\032\053\034\032\001\001\000\004\022\100\001\001\000" +
    "\004\030\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\176\001\001\000\004\006\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\200\017\033" +
    "\020\043\021\034\023\042\030\035\032\053\034\032\001" +
    "\001\000\004\022\100\001\001\000\022\016\202\017\033" +
    "\020\043\021\034\023\042\030\035\032\053\034\032\001" +
    "\001\000\004\022\100\001\001\000\026\003\141\004\147" +
    "\005\152\030\137\034\135\035\204\036\133\037\140\040" +
    "\134\042\142\001\001\000\002\001\001\000\024\016\212" +
    "\017\033\020\043\021\034\023\042\030\035\032\053\034" +
    "\032\044\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\100\001" +
    "\001\000\024\016\212\017\033\020\043\021\034\023\042" +
    "\030\035\032\053\034\032\044\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\217\001\001\000\002" +
    "\001\001\000\004\030\221\001\001\000\002\001\001\000" +
    "\022\016\223\017\033\020\043\021\034\023\042\030\035" +
    "\032\053\034\032\001\001\000\004\022\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\230\001\001" +
    "\000\004\024\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 99. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // var_decl ::= IDENTIFIER COLON type 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // var_init ::= var_decl GETS expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_init",1, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // tuple_init ::= UNDERSCORE tuple_decl_list GETS function_call 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",3, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // tuple_init ::= var_decl tuple_decl_list GETS function_call 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",3, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // tuple_init ::= UNDERSCORE GETS function_call 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // tuple_decl_list ::= COMMA var_decl 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",4, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // tuple_decl_list ::= COMMA var_decl tuple_decl_list 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // tuple_decl_list ::= COMMA UNDERSCORE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",4, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // tuple_decl_list ::= COMMA UNDERSCORE tuple_decl_list 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // type ::= primitive_type 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // type ::= array_type 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // primitive_type ::= INT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // primitive_type ::= BOOL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // array_type ::= primitive_type brackets 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // array_type ::= primitive_type brackets_with_content 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // array_type ::= primitive_type brackets_with_content brackets 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // brackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",10, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // brackets ::= OPEN_BRACKET CLOSE_BRACKET brackets 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // brackets_with_content ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets_with_content",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // brackets_with_content ::= OPEN_BRACKET expr CLOSE_BRACKET brackets_with_content 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets_with_content",11, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // expr ::= constant 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // expr ::= unary_expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // expr ::= binary_expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // expr ::= IDENTIFIER 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // expr ::= array_element 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // expr ::= function_call 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // constant ::= literal 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // constant ::= array_literal 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // unary_expr ::= MINUS expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // unary_expr ::= NOT expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // binary_expr ::= expr binary_op expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // binary_op ::= PLUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // binary_op ::= MINUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // binary_op ::= TIMES 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // binary_op ::= HIGH_MULT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // binary_op ::= DIVIDE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // binary_op ::= MODULO 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // binary_op ::= EQUAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // binary_op ::= NOT_EQUAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // binary_op ::= LT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // binary_op ::= LEQ 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // binary_op ::= GT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // binary_op ::= GEQ 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // binary_op ::= AND 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // binary_op ::= OR 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // literal ::= INTEGER_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // literal ::= CHARACTER_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // literal ::= STRING_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // literal ::= TRUE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // literal ::= FALSE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // function_call ::= IDENTIFIER OPEN_PAREN function_arg CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",22, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // function_call ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",22, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // function_arg ::= expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",23, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // function_arg ::= expr COMMA function_arg 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",23, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // array_literal ::= OPEN_BRACE array_element_list CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literal",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // array_element_list ::= expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // array_element_list ::= expr COMMA array_element_list 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",25, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // array_element_list ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",25, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // array_element ::= IDENTIFIER brackets_with_content 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",26, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // stmt ::= assignment_stmt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // stmt ::= if_stmt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // stmt ::= while_stmt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // stmt ::= function_call 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // stmt ::= block_stmt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // stmt ::= var_decl 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // stmt ::= var_init 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // stmt ::= tuple_init 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // assignment_stmt ::= IDENTIFIER GETS expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // assignment_stmt ::= array_element GETS expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",29, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN ELSE stmt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",29, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // while_stmt ::= WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",30, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // return_stmt ::= RETURN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // return_stmt ::= RETURN return_list 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",31, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // return_list ::= expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // return_list ::= expr COMMA return_list 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",34, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // function_decl ::= IDENTIFIER OPEN_PAREN function_param CLOSE_PAREN return_type block_stmt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",20, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // return_type ::= COLON type_list 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",7, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // return_type ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",7, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // type_list ::= type 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // type_list ::= type COMMA type_list 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",6, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // function_decl_list ::= function_decl function_decl_list 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl_list",21, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // function_decl_list ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl_list",21, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // function_param ::= var_decl 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // function_param ::= var_decl COMMA function_param 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // block_stmt ::= OPEN_BRACE CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",32, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // block_stmt ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // block_stmt ::= OPEN_BRACE stmt_list return_stmt CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",32, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // stmt_list ::= stmt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",33, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // stmt_list ::= stmt SEMICOLON 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",33, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // stmt_list ::= stmt stmt_list 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",33, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // stmt_list ::= stmt SEMICOLON stmt_list 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",33, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // use_id ::= USE IDENTIFIER 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",18, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // use_id ::= USE IDENTIFIER SEMICOLON 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // use_id ::= USE IDENTIFIER use_id 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // use_id ::= USE IDENTIFIER SEMICOLON use_id 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",18, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // program ::= function_decl_list 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // program ::= use_id function_decl_list 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
