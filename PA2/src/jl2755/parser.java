
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package jl2755;

import jl2755.ast.*;
import java.io.IOException;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\003\003\000\002\005" +
    "\005\000\002\004\005\000\002\004\003\000\002\006\006" +
    "\000\002\006\006\000\002\006\005\000\002\007\004\000" +
    "\002\007\005\000\002\007\004\000\002\007\005\000\002" +
    "\010\003\000\002\010\003\000\002\013\003\000\002\013" +
    "\003\000\002\014\004\000\002\014\004\000\002\015\004" +
    "\000\002\015\005\000\002\016\005\000\002\016\006\000" +
    "\002\016\006\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\005\000\002\017\003\000\002\020\003\000\002\020\003" +
    "\000\002\021\004\000\002\021\004\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\027\006\000\002\027" +
    "\005\000\002\027\006\000\002\027\006\000\002\030\003" +
    "\000\002\030\005\000\002\031\005\000\002\032\003\000" +
    "\002\032\005\000\002\032\002\000\002\033\004\000\002" +
    "\033\004\000\002\035\004\000\002\035\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\036\005\000\002\036\005\000\002" +
    "\037\007\000\002\037\011\000\002\040\007\000\002\041" +
    "\003\000\002\041\004\000\002\041\004\000\002\041\005" +
    "\000\002\044\003\000\002\044\005\000\002\025\010\000" +
    "\002\012\004\000\002\012\002\000\002\011\003\000\002" +
    "\011\005\000\002\026\004\000\002\026\002\000\002\024" +
    "\003\000\002\024\005\000\002\024\002\000\002\042\004" +
    "\000\002\042\005\000\002\042\006\000\002\043\003\000" +
    "\002\043\004\000\002\023\004\000\002\023\005\000\002" +
    "\023\005\000\002\023\006\000\002\002\003\000\002\002" +
    "\004\000\002\002\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\012\002\uffa5\003\013\004\012\016\006\001" +
    "\002\000\006\002\uffa5\004\012\001\002\000\004\044\022" +
    "\001\002\000\004\004\012\001\002\000\006\002\uffa5\004" +
    "\012\001\002\000\004\002\014\001\002\000\004\002\uff98" +
    "\001\002\000\106\002\000\003\000\004\000\012\000\013" +
    "\000\014\000\015\000\016\000\017\000\020\000\022\000" +
    "\023\000\026\000\027\000\031\000\032\000\033\000\034" +
    "\000\035\000\036\000\037\000\040\000\041\000\042\000" +
    "\043\000\044\000\045\000\046\000\047\000\050\000\051" +
    "\000\052\000\053\000\054\000\001\002\000\004\002\uff96" +
    "\001\002\000\004\002\001\001\002\000\004\002\uff97\001" +
    "\002\000\012\002\uff9c\004\uff9c\016\006\052\017\001\002" +
    "\000\010\002\uff9b\004\uff9b\016\006\001\002\000\006\002" +
    "\uff9a\004\uff9a\001\002\000\006\002\uff99\004\uff99\001\002" +
    "\000\006\004\012\045\uffa2\001\002\000\004\050\260\001" +
    "\002\000\004\045\030\001\002\000\006\045\uffa4\051\026" +
    "\001\002\000\006\004\012\045\uffa2\001\002\000\004\045" +
    "\uffa3\001\002\000\006\046\uffa9\050\032\001\002\000\004" +
    "\046\165\001\002\000\006\024\040\025\034\001\002\000" +
    "\004\046\uffaa\001\002\000\040\003\ufff2\004\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\041\ufff2\042\ufff2\045\ufff2\046" +
    "\ufff2\047\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\001\002" +
    "\000\040\003\ufff5\004\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\041\ufff5\042\043\045\ufff5\046\ufff5\047\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\001\002\000\036\003\ufff4\004" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\041\ufff4\045\ufff4" +
    "\046\ufff4\047\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\001" +
    "\002\000\006\046\uffa8\051\041\001\002\000\040\003\ufff3" +
    "\004\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\041\ufff3\042" +
    "\ufff3\045\ufff3\046\ufff3\047\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\001\002\000\006\024\040\025\034\001\002\000" +
    "\004\046\uffa7\001\002\000\034\003\057\004\012\005\066" +
    "\006\052\007\056\010\055\011\070\020\062\030\063\043" +
    "\054\044\064\046\065\054\053\001\002\000\036\003\ufff0" +
    "\004\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\041\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\001\002\000\036\003\ufff1\004\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\041\ufff1\045\ufff1\046\ufff1\047\ufff1\051\ufff1" +
    "\052\ufff1\053\ufff1\054\ufff1\001\002\000\076\003\uffe8\004" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8" +
    "\022\uffe8\023\uffe8\026\uffe8\027\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042\150" +
    "\043\uffe8\044\153\045\uffe8\046\uffe8\047\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\001\002\000\072\003\uffe7\004\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\020\uffe7\022" +
    "\uffe7\023\uffe7\026\uffe7\027\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\043\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\001\002\000\072\003\uffea\004\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\017\uffea\020\uffea\022\uffea\023\uffea\026\uffea" +
    "\027\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\043\uffea\045\uffea\046\uffea\047\uffea" +
    "\051\uffea\052\uffea\053\uffea\054\uffea\001\002\000\074\003" +
    "\uffe6\004\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6" +
    "\020\uffe6\022\uffe6\023\uffe6\026\uffe6\027\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\042\150\043\uffe6\045\uffe6\046\uffe6\047\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\001\002\000\072\003\uffd0\004\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0\020\uffd0\022" +
    "\uffd0\023\uffd0\026\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\043\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\001\002\000\004\044\144\001\002\000\076\003\uffef\004" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\017\uffef\020\uffef" +
    "\022\uffef\023\uffef\026\uffef\027\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\042\142\043\uffef\045\uffef\046\uffef\047\uffef\051\uffef\052" +
    "\uffef\053\uffef\054\uffef\001\002\000\072\003\uffce\004\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\017\uffce\020\uffce\022" +
    "\uffce\023\uffce\026\uffce\027\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\043\uffce\045" +
    "\uffce\046\uffce\047\uffce\051\uffce\052\uffce\053\uffce\054\uffce" +
    "\001\002\000\072\003\uffd1\004\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\017\uffd1\020\uffd1\022\uffd1\023\uffd1\026\uffd1" +
    "\027\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\001\002\000\072\003" +
    "\uffe4\004\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4" +
    "\020\uffe4\022\uffe4\023\uffe4\026\uffe4\027\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\043\uffe4\045\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\001\002\000\072\003\uffe3\004\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\017\uffe3\020\uffe3\022\uffe3\023" +
    "\uffe3\026\uffe3\027\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\043\uffe3\045\uffe3\046" +
    "\uffe3\047\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\001\002" +
    "\000\072\003\uffe9\004\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\017\uffe9\020\uffe9\022\uffe9\023\uffe9\026\uffe9\027\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\043\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\001\002\000\032\003\057\004" +
    "\012\005\066\006\052\007\056\010\055\011\070\020\062" +
    "\030\063\044\064\046\065\054\053\001\002\000\032\003" +
    "\057\004\012\005\066\006\052\007\056\010\055\011\070" +
    "\020\062\030\063\044\064\046\065\054\053\001\002\000" +
    "\032\003\057\004\012\005\066\006\052\007\056\010\055" +
    "\011\070\020\062\030\063\044\064\046\065\054\053\001" +
    "\002\000\034\003\057\004\012\005\066\006\052\007\056" +
    "\010\055\011\070\020\062\030\063\044\064\046\065\047" +
    "\uffc3\054\053\001\002\000\072\003\uffcf\004\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf\022\uffcf\023" +
    "\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\043\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\001\002" +
    "\000\040\017\110\020\103\022\073\023\074\026\102\027" +
    "\076\031\077\032\107\033\101\034\104\035\105\036\072" +
    "\037\075\040\106\043\100\001\002\000\072\003\uffcd\004" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\017\uffcd\020\uffcd" +
    "\022\uffcd\023\uffcd\026\uffcd\027\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\043\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\001\002\000\072\003\uffe2\004\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\026" +
    "\uffe2\027\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\043\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\001\002\000\032" +
    "\003\057\004\012\005\066\006\052\007\056\010\055\011" +
    "\070\020\062\030\063\044\064\046\065\054\053\001\002" +
    "\000\032\003\057\004\012\005\066\006\052\007\056\010" +
    "\055\011\070\020\062\030\063\044\064\046\065\054\053" +
    "\001\002\000\032\003\057\004\012\005\066\006\052\007" +
    "\056\010\055\011\070\020\062\030\063\044\064\046\065" +
    "\054\053\001\002\000\032\003\057\004\012\005\066\006" +
    "\052\007\056\010\055\011\070\020\062\030\063\044\064" +
    "\046\065\054\053\001\002\000\032\003\057\004\012\005" +
    "\066\006\052\007\056\010\055\011\070\020\062\030\063" +
    "\044\064\046\065\054\053\001\002\000\032\003\057\004" +
    "\012\005\066\006\052\007\056\010\055\011\070\020\062" +
    "\030\063\044\064\046\065\054\053\001\002\000\076\003" +
    "\uffed\004\uffed\012\uffed\013\uffed\014\uffed\015\uffed\017\uffed" +
    "\020\uffed\022\uffed\023\uffed\026\uffed\027\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\043\043\uffed\045\uffed\046\uffed\047\uffed\051" +
    "\uffed\052\uffed\053\uffed\054\uffed\001\002\000\032\003\057" +
    "\004\012\005\066\006\052\007\056\010\055\011\070\020" +
    "\062\030\063\044\064\046\065\054\053\001\002\000\032" +
    "\003\057\004\012\005\066\006\052\007\056\010\055\011" +
    "\070\020\062\030\063\044\064\046\065\054\053\001\002" +
    "\000\032\003\057\004\012\005\066\006\052\007\056\010" +
    "\055\011\070\020\062\030\063\044\064\046\065\054\053" +
    "\001\002\000\032\003\057\004\012\005\066\006\052\007" +
    "\056\010\055\011\070\020\062\030\063\044\064\046\065" +
    "\054\053\001\002\000\032\003\057\004\012\005\066\006" +
    "\052\007\056\010\055\011\070\020\062\030\063\044\064" +
    "\046\065\054\053\001\002\000\032\003\057\004\012\005" +
    "\066\006\052\007\056\010\055\011\070\020\062\030\063" +
    "\044\064\046\065\054\053\001\002\000\032\003\057\004" +
    "\012\005\066\006\052\007\056\010\055\011\070\020\062" +
    "\030\063\044\064\046\065\054\053\001\002\000\032\003" +
    "\057\004\012\005\066\006\052\007\056\010\055\011\070" +
    "\020\062\030\063\044\064\046\065\054\053\001\002\000" +
    "\072\003\uffdf\004\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\017\uffdf\020\uffdf\022\073\023\074\026\102\027\076\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\043\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf\052" +
    "\uffdf\053\uffdf\054\uffdf\001\002\000\072\003\uffd6\004\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\017\110\020\103\022" +
    "\073\023\074\026\102\027\076\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\043\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\001\002\000\072\003\uffd9\004\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\017\110\020\103\022\073\023\074\026\102" +
    "\027\076\031\077\032\107\033\101\034\104\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\043\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\054\uffd9\001\002\000\072\003" +
    "\uffd3\004\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\017\110" +
    "\020\103\022\073\023\074\026\102\027\076\031\077\032" +
    "\107\033\101\034\104\035\uffd3\036\uffd3\037\075\040\106" +
    "\043\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3\052\uffd3\053" +
    "\uffd3\054\uffd3\001\002\000\072\003\uffd4\004\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\017\110\020\103\022\073\023" +
    "\074\026\102\027\076\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\043\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\001\002" +
    "\000\072\003\uffde\004\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\017\uffde\020\uffde\022\073\023\074\026\102\027\076" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\043\uffde\045\uffde\046\uffde\047\uffde\051\uffde" +
    "\052\uffde\053\uffde\054\uffde\001\002\000\072\003\uffdb\004" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb" +
    "\022\uffdb\023\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\043\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\001\002\000\072\003\uffd5\004\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\017\110\020\103\022\073\023\074\026" +
    "\102\027\076\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\043\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\001\002\000\074" +
    "\003\uffec\004\uffec\012\uffec\013\uffec\014\uffec\015\uffec\017" +
    "\uffec\020\uffec\022\uffec\023\uffec\026\uffec\027\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\043\uffec\045\uffec\046\uffec\047\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\001\002\000\074\003\uffeb\004" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb" +
    "\022\uffeb\023\uffeb\026\uffeb\027\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb" +
    "\043\uffeb\045\uffeb\046\uffeb\047\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\001\002\000\072\003\uffd7\004\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\017\110\020\103\022\073\023" +
    "\074\026\102\027\076\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\043\uffd7\045\uffd7\046" +
    "\uffd7\047\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\001\002" +
    "\000\072\003\uffda\004\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\017\uffda\020\uffda\022\uffda\023\uffda\026\uffda\027\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\043\uffda\045\uffda\046\uffda\047\uffda\051\uffda" +
    "\052\uffda\053\uffda\054\uffda\001\002\000\072\003\uffd8\004" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\017\110\020\103" +
    "\022\073\023\074\026\102\027\076\031\077\032\107\033" +
    "\101\034\104\035\uffd8\036\uffd8\037\uffd8\040\uffd8\043\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8\054" +
    "\uffd8\001\002\000\072\003\uffdc\004\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\017\uffdc\020\uffdc\022\uffdc\023\uffdc\026" +
    "\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\043\uffdc\045\uffdc\046\uffdc\047" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\001\002\000\072" +
    "\003\uffdd\004\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017" +
    "\uffdd\020\uffdd\022\uffdd\023\uffdd\026\uffdd\027\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\043\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\001\002\000\072\003\uffd2\004\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\017\110\020\103\022\073" +
    "\023\074\026\102\027\076\031\077\032\107\033\101\034" +
    "\104\035\105\036\uffd2\037\075\040\106\043\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\001" +
    "\002\000\004\047\135\001\002\000\042\017\110\020\103" +
    "\022\073\023\074\026\102\027\076\031\077\032\107\033" +
    "\101\034\104\035\105\036\072\037\075\040\106\047\uffc5" +
    "\051\133\001\002\000\034\003\057\004\012\005\066\006" +
    "\052\007\056\010\055\011\070\020\062\030\063\044\064" +
    "\046\065\047\uffc3\054\053\001\002\000\004\047\uffc4\001" +
    "\002\000\072\003\uffc6\004\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\017\uffc6\020\uffc6\022\uffc6\023\uffc6\026\uffc6\027" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\043\uffc6\045\uffc6\046\uffc6\047\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\001\002\000\040\017\110" +
    "\020\103\022\073\023\074\026\102\027\076\031\077\032" +
    "\107\033\101\034\104\035\105\036\072\037\075\040\106" +
    "\045\137\001\002\000\072\003\uffe5\004\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\017\uffe5\020\uffe5\022\uffe5\023\uffe5" +
    "\026\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\043\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\001\002\000" +
    "\072\003\uffe0\004\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\017\uffe0\020\uffe0\022\uffe0\023\uffe0\026\uffe0\027\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\043\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\054\uffe0\001\002\000\072\003\uffe1\004\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1\022" +
    "\uffe1\023\uffe1\026\uffe1\027\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\043\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\001\002\000\004\043\054\001\002\000\074\003\uffee\004" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\017\uffee\020\uffee" +
    "\022\uffee\023\uffee\026\uffee\027\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\043\uffee\045\uffee\046\uffee\047\uffee\051\uffee\052\uffee\053" +
    "\uffee\054\uffee\001\002\000\006\004\012\054\053\001\002" +
    "\000\010\042\150\044\153\045\155\001\002\000\004\045" +
    "\152\001\002\000\004\042\150\001\002\000\032\003\057" +
    "\004\012\005\066\006\052\007\056\010\055\011\070\020" +
    "\062\030\063\044\064\046\065\054\053\001\002\000\074" +
    "\003\uffc1\004\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\017" +
    "\uffc1\020\uffc1\022\uffc1\023\uffc1\026\uffc1\027\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\043\uffc1\045\uffc1\046\uffc1\047\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\054\uffc1\001\002\000\074\003\uffc9\004" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9\020\uffc9" +
    "\022\uffc9\023\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\042\uffc9" +
    "\043\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\001\002\000\034\003\057\004\012\005\066" +
    "\006\052\007\056\010\055\011\070\020\062\030\063\044" +
    "\064\045\160\046\065\054\053\001\002\000\074\003\uffc2" +
    "\004\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2\020" +
    "\uffc2\022\uffc2\023\uffc2\026\uffc2\027\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\043\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\001\002\000\074\003\uffca\004\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\017\uffca\020\uffca\022\uffca" +
    "\023\uffca\026\uffca\027\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\042\uffca\043\uffca" +
    "\045\uffca\046\uffca\047\uffca\051\uffca\052\uffca\053\uffca\054" +
    "\uffca\001\002\000\004\045\163\001\002\000\042\017\110" +
    "\020\103\022\073\023\074\026\102\027\076\031\077\032" +
    "\107\033\101\034\104\035\105\036\072\037\075\040\106" +
    "\045\uffc8\051\161\001\002\000\074\003\uffcb\004\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb\020\uffcb\022\uffcb" +
    "\023\uffcb\026\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\001\002\000\032\003\057\004\012\005\066\006\052" +
    "\007\056\010\055\011\070\020\062\030\063\044\064\046" +
    "\065\054\053\001\002\000\004\045\uffc7\001\002\000\074" +
    "\003\uffcc\004\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017" +
    "\uffcc\020\uffcc\022\uffcc\023\uffcc\026\uffcc\027\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\042\uffcc\043\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\001\002\000\006\002\uffab\004" +
    "\uffab\001\002\000\022\003\175\004\012\012\205\014\203" +
    "\046\165\047\201\053\172\054\053\001\002\000\030\003" +
    "\uffbe\004\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\046\uffbe" +
    "\047\uffbe\052\uffbe\053\uffbe\054\uffbe\001\002\000\012\041" +
    "\261\042\150\044\153\050\260\001\002\000\030\003\uffbc" +
    "\004\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\046\uffbc\047" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\001\002\000\004\041\256" +
    "\001\002\000\006\041\252\051\217\001\002\000\032\003" +
    "\uffbb\004\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\042\150" +
    "\046\uffbb\047\uffbb\052\uffbb\053\uffbb\054\uffbb\001\002\000" +
    "\030\003\uffbd\004\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\046\uffbd\047\uffbd\052\uffbd\053\uffbd\054\uffbd\001\002\000" +
    "\030\003\ufffd\004\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\046\ufffd\047\ufffd\052\ufffd\053\ufffd\054\ufffd\001\002\000" +
    "\030\003\uffb8\004\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\046\uffb8\047\uffb8\052\uffb8\053\uffb8\054\uffb8\001\002\000" +
    "\030\003\uffba\004\uffba\012\uffba\013\uffba\014\uffba\015\uffba" +
    "\046\uffba\047\uffba\052\uffba\053\uffba\054\uffba\001\002\000" +
    "\030\003\uffbf\004\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\046\uffbf\047\uffbf\052\250\053\uffbf\054\uffbf\001\002\000" +
    "\032\002\uffa1\003\uffa1\004\uffa1\012\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\046\uffa1\047\uffa1\052\uffa1\053\uffa1\054\uffa1\001" +
    "\002\000\006\015\236\047\237\001\002\000\004\044\232" +
    "\001\002\000\034\003\uffb9\004\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\041\221\046\uffb9\047\uffb9\051\217\052\uffb9" +
    "\053\uffb9\054\uffb9\001\002\000\004\044\211\001\002\000" +
    "\024\003\175\004\012\012\205\014\203\015\uff9e\046\165" +
    "\047\uff9e\053\172\054\053\001\002\000\030\003\uffb7\004" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\046\uffb7\047\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\001\002\000\006\015\uff9d\047" +
    "\uff9d\001\002\000\032\003\057\004\012\005\066\006\052" +
    "\007\056\010\055\011\070\020\062\030\063\044\064\046" +
    "\065\054\053\001\002\000\040\017\110\020\103\022\073" +
    "\023\074\026\102\027\076\031\077\032\107\033\101\034" +
    "\104\035\105\036\072\037\075\040\106\045\213\001\002" +
    "\000\020\003\175\004\012\012\205\014\203\046\165\053" +
    "\172\054\053\001\002\000\030\003\uffb4\004\uffb4\012\uffb4" +
    "\013\215\014\uffb4\015\uffb4\046\uffb4\047\uffb4\052\uffb4\053" +
    "\uffb4\054\uffb4\001\002\000\020\003\175\004\012\012\205" +
    "\014\203\046\165\053\172\054\053\001\002\000\030\003" +
    "\uffb3\004\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\046\uffb3" +
    "\047\uffb3\052\uffb3\053\uffb3\054\uffb3\001\002\000\006\004" +
    "\012\053\226\001\002\000\004\041\223\001\002\000\032" +
    "\003\057\004\012\005\066\006\052\007\056\010\055\011" +
    "\070\020\062\030\063\044\064\046\065\054\053\001\002" +
    "\000\064\003\ufffe\004\ufffe\012\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\017\110\020\103\022\073\023\074\026\102\027\076" +
    "\031\077\032\107\033\101\034\104\035\105\036\072\037" +
    "\075\040\106\046\ufffe\047\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\001\002\000\006\004\012\054\053\001\002\000\004\044" +
    "\153\001\002\000\030\003\ufffb\004\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\046\ufffb\047\ufffb\052\ufffb\053\ufffb\054" +
    "\ufffb\001\002\000\006\041\ufff7\051\217\001\002\000\006" +
    "\041\ufff9\051\217\001\002\000\004\041\ufff8\001\002\000" +
    "\004\041\ufff6\001\002\000\032\003\057\004\012\005\066" +
    "\006\052\007\056\010\055\011\070\020\062\030\063\044" +
    "\064\046\065\054\053\001\002\000\040\017\110\020\103" +
    "\022\073\023\074\026\102\027\076\031\077\032\107\033" +
    "\101\034\104\035\105\036\072\037\075\040\106\045\234" +
    "\001\002\000\020\003\175\004\012\012\205\014\203\046" +
    "\165\053\172\054\053\001\002\000\030\003\uffb2\004\uffb2" +
    "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\046\uffb2\047\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\001\002\000\036\003\057\004\012" +
    "\005\066\006\052\007\056\010\055\011\070\020\062\030" +
    "\063\044\064\046\065\047\uffb1\052\243\054\053\001\002" +
    "\000\032\002\uffa0\003\uffa0\004\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\046\uffa0\047\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\001\002\000\004\047\241\001\002\000\032\002\uff9f\003" +
    "\uff9f\004\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\046\uff9f" +
    "\047\uff9f\052\uff9f\053\uff9f\054\uff9f\001\002\000\006\047" +
    "\uffb0\052\247\001\002\000\004\047\uffaf\001\002\000\044" +
    "\017\110\020\103\022\073\023\074\026\102\027\076\031" +
    "\077\032\107\033\101\034\104\035\105\036\072\037\075" +
    "\040\106\047\uffad\051\245\052\uffad\001\002\000\032\003" +
    "\057\004\012\005\066\006\052\007\056\010\055\011\070" +
    "\020\062\030\063\044\064\046\065\054\053\001\002\000" +
    "\006\047\uffac\052\uffac\001\002\000\004\047\uffae\001\002" +
    "\000\030\003\uffc0\004\uffc0\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\046\uffc0\047\uffc0\052\uffc0\053\uffc0\054\uffc0\001\002" +
    "\000\004\041\254\001\002\000\006\004\012\054\053\001" +
    "\002\000\030\003\ufffa\004\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\046\ufffa\047\ufffa\052\ufffa\053\ufffa\054\ufffa\001" +
    "\002\000\006\004\012\054\053\001\002\000\030\003\ufffc" +
    "\004\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\046\ufffc\047" +
    "\ufffc\052\ufffc\053\ufffc\054\ufffc\001\002\000\032\003\057" +
    "\004\012\005\066\006\052\007\056\010\055\011\070\020" +
    "\062\030\063\044\064\046\065\054\053\001\002\000\064" +
    "\003\uffb5\004\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\017" +
    "\110\020\103\022\073\023\074\026\102\027\076\031\077" +
    "\032\107\033\101\034\104\035\105\036\072\037\075\040" +
    "\106\046\uffb5\047\uffb5\052\uffb5\053\uffb5\054\uffb5\001\002" +
    "\000\006\024\040\025\034\001\002\000\032\003\057\004" +
    "\012\005\066\006\052\007\056\010\055\011\070\020\062" +
    "\030\063\044\064\046\065\054\053\001\002\000\064\003" +
    "\uffb6\004\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\017\110" +
    "\020\103\022\073\023\074\026\102\027\076\031\077\032" +
    "\107\033\101\034\104\035\105\036\072\037\075\040\106" +
    "\046\uffb6\047\uffb6\052\uffb6\053\uffb6\054\uffb6\001\002\000" +
    "\036\003\uffff\004\uffff\012\uffff\013\uffff\014\uffff\015\uffff" +
    "\041\uffff\045\uffff\046\uffff\047\uffff\051\uffff\052\uffff\053" +
    "\uffff\054\uffff\001\002\000\004\002\uffa6\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\014\002\007\003\004\023\006\025\003\026" +
    "\010\001\001\000\010\003\004\025\003\026\263\001\001" +
    "\000\002\001\001\000\004\003\015\001\001\000\010\003" +
    "\004\025\003\026\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\017\001\001\000\004" +
    "\023\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\022\005\024\024\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\022\005" +
    "\024\024\026\001\001\000\002\001\001\000\004\012\030" +
    "\001\001\000\004\042\163\001\001\000\012\010\036\011" +
    "\032\013\034\014\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\044\016\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\036" +
    "\011\041\013\034\014\035\001\001\000\002\001\001\000" +
    "\022\003\045\017\066\020\047\021\060\022\057\027\050" +
    "\031\070\033\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\045\017\140\020\047\021\060" +
    "\022\057\027\050\031\070\033\046\001\001\000\022\003" +
    "\045\017\137\020\047\021\060\022\057\027\050\031\070" +
    "\033\046\001\001\000\022\003\045\017\135\020\047\021" +
    "\060\022\057\027\050\031\070\033\046\001\001\000\024" +
    "\003\045\017\131\020\047\021\060\022\057\027\050\031" +
    "\070\032\130\033\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\045\017\127\020\047\021\060\022\057\027\050\031\070" +
    "\033\046\001\001\000\022\003\045\017\126\020\047\021" +
    "\060\022\057\027\050\031\070\033\046\001\001\000\022" +
    "\003\045\017\125\020\047\021\060\022\057\027\050\031" +
    "\070\033\046\001\001\000\022\003\045\017\124\020\047" +
    "\021\060\022\057\027\050\031\070\033\046\001\001\000" +
    "\022\003\045\017\123\020\047\021\060\022\057\027\050" +
    "\031\070\033\046\001\001\000\022\003\045\017\122\020" +
    "\047\021\060\022\057\027\050\031\070\033\046\001\001" +
    "\000\006\015\121\016\120\001\001\000\022\003\045\017" +
    "\117\020\047\021\060\022\057\027\050\031\070\033\046" +
    "\001\001\000\022\003\045\017\116\020\047\021\060\022" +
    "\057\027\050\031\070\033\046\001\001\000\022\003\045" +
    "\017\115\020\047\021\060\022\057\027\050\031\070\033" +
    "\046\001\001\000\022\003\045\017\114\020\047\021\060" +
    "\022\057\027\050\031\070\033\046\001\001\000\022\003" +
    "\045\017\113\020\047\021\060\022\057\027\050\031\070" +
    "\033\046\001\001\000\022\003\045\017\112\020\047\021" +
    "\060\022\057\027\050\031\070\033\046\001\001\000\022" +
    "\003\045\017\111\020\047\021\060\022\057\027\050\031" +
    "\070\033\046\001\001\000\022\003\045\017\110\020\047" +
    "\021\060\022\057\027\050\031\070\033\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\045\017\131\020" +
    "\047\021\060\022\057\027\050\031\070\032\133\033\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\144\027" +
    "\146\033\145\001\001\000\004\016\153\001\001\000\002" +
    "\001\001\000\004\016\150\001\001\000\022\003\045\017" +
    "\066\020\047\021\060\022\057\027\050\031\070\033\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\045\017\156\020\047\021\060\022\057\027\050\030\155" +
    "\031\070\033\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\045\017\156\020\047\021\060\022\057\027" +
    "\050\030\161\031\070\033\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\166\004" +
    "\175\005\203\006\206\027\172\033\170\034\177\035\205" +
    "\036\165\037\173\040\167\042\176\043\201\001\001\000" +
    "\002\001\001\000\004\016\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\250\001\001\000\004\016" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\237\001\001\000\002\001\001\000\004" +
    "\007\217\001\001\000\002\001\001\000\034\003\166\004" +
    "\175\005\203\006\206\027\172\033\170\034\177\035\205" +
    "\036\165\037\173\040\167\042\176\043\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\045\017\211" +
    "\020\047\021\060\022\057\027\050\031\070\033\046\001" +
    "\001\000\002\001\001\000\032\003\166\004\175\005\203" +
    "\006\206\027\172\033\170\034\177\035\213\036\165\037" +
    "\173\040\167\042\176\001\001\000\002\001\001\000\032" +
    "\003\166\004\175\005\203\006\206\027\172\033\170\034" +
    "\177\035\215\036\165\037\173\040\167\042\176\001\001" +
    "\000\002\001\001\000\006\003\022\005\226\001\001\000" +
    "\002\001\001\000\022\003\045\017\221\020\047\021\060" +
    "\022\057\027\050\031\070\033\046\001\001\000\002\001" +
    "\001\000\006\003\223\027\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\230\001\001\000\004\007" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\045\017\232\020\047\021\060\022\057\027\050\031" +
    "\070\033\046\001\001\000\002\001\001\000\032\003\166" +
    "\004\175\005\203\006\206\027\172\033\170\034\177\035" +
    "\234\036\165\037\173\040\167\042\176\001\001\000\002" +
    "\001\001\000\024\003\045\017\243\020\047\021\060\022" +
    "\057\027\050\031\070\033\046\044\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\045" +
    "\017\243\020\047\021\060\022\057\027\050\031\070\033" +
    "\046\044\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\223\027" +
    "\252\001\001\000\002\001\001\000\006\003\223\027\254" +
    "\001\001\000\002\001\001\000\022\003\045\017\256\020" +
    "\047\021\060\022\057\027\050\031\070\033\046\001\001" +
    "\000\002\001\001\000\010\010\262\013\034\014\035\001" +
    "\001\000\022\003\045\017\261\020\047\021\060\022\057" +
    "\027\050\031\070\033\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


 
  public void report_fatal_error(String msg, Object info) {
    report_error(msg, info);
  }

  public void report_error(String msg, Object info) {
    Main.setToken((java_cup.runtime.Symbol)info);
  }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 107. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Program start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // identifier ::= IDENTIFIER 
            {
                Identifier RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Identifier(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",1, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // var_decl ::= identifier COLON type 
            {
                VarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new VarDecl(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // var_init ::= var_decl GETS expr 
            {
                VarInit RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-2).<VarDecl> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new VarInit(vd, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_init",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // var_init ::= error 
            {
                VarInit RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Object e = CUP$parser$stack.peek().<Object> value();
                 Main.handleError("Invalid assignment operator."); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_init",2, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // tuple_init ::= UNDERSCORE tuple_decl_list GETS function_call 
            {
                TupleInit RESULT = null;
                int tdlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TupleDeclList tdl = CUP$parser$stack.elementAt(CUP$parser$top-2).<TupleDeclList> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(tdl, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",4, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // tuple_init ::= var_decl tuple_decl_list GETS function_call 
            {
                TupleInit RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-3).<VarDecl> value();
                int tdlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TupleDeclList tdl = CUP$parser$stack.elementAt(CUP$parser$top-2).<TupleDeclList> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(vd, tdl, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",4, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // tuple_init ::= UNDERSCORE GETS function_call 
            {
                TupleInit RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // tuple_decl_list ::= COMMA var_decl 
            {
                TupleDeclList RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new TupleDeclList(vd, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // tuple_decl_list ::= COMMA var_decl tuple_decl_list 
            {
                TupleDeclList RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl> value();
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                TupleDeclList tdl = CUP$parser$stack.peek().<TupleDeclList> value();
                 RESULT = new TupleDeclList(vd, tdl, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",5, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // tuple_decl_list ::= COMMA UNDERSCORE 
            {
                TupleDeclList RESULT = null;
                 RESULT = new TupleDeclList(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // tuple_decl_list ::= COMMA UNDERSCORE tuple_decl_list 
            {
                TupleDeclList RESULT = null;
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                TupleDeclList tdl = CUP$parser$stack.peek().<TupleDeclList> value();
                 RESULT = new TupleDeclList(tdl, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",5, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // type ::= primitive_type 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                PrimitiveType pt = CUP$parser$stack.peek().<PrimitiveType> value();
                 RESULT = pt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // type ::= array_type 
            {
                Type RESULT = null;
                int atleft = CUP$parser$stack.peek().left;
                int atright = CUP$parser$stack.peek().right;
                ArrayType at = CUP$parser$stack.peek().<ArrayType> value();
                 RESULT = at; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // primitive_type ::= INT 
            {
                PrimitiveType RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Object i = CUP$parser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(0); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // primitive_type ::= BOOL 
            {
                PrimitiveType RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // array_type ::= primitive_type brackets 
            {
                ArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new ArrayType(pt, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",10, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // array_type ::= primitive_type brackets_with_content 
            {
                ArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int bwtleft = CUP$parser$stack.peek().left;
                int bwtright = CUP$parser$stack.peek().right;
                BracketsWithContent bwt = CUP$parser$stack.peek().<BracketsWithContent> value();
                 RESULT = new ArrayType(pt, bwt); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",10, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // brackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
                Brackets RESULT = null;
                 RESULT = new Brackets(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",11, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // brackets ::= OPEN_BRACKET CLOSE_BRACKET brackets 
            {
                Brackets RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new Brackets(b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // brackets_with_content ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                BracketsWithContent RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new BracketsWithContent(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets_with_content",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // brackets_with_content ::= OPEN_BRACKET expr CLOSE_BRACKET brackets_with_content 
            {
                BracketsWithContent RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bwcleft = CUP$parser$stack.peek().left;
                int bwcright = CUP$parser$stack.peek().right;
                BracketsWithContent bwc = CUP$parser$stack.peek().<BracketsWithContent> value();
                 RESULT = new BracketsWithContent(e, bwc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets_with_content",12, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // brackets_with_content ::= OPEN_BRACKET expr CLOSE_BRACKET brackets 
            {
                BracketsWithContent RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new BracketsWithContent(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets_with_content",12, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // expr ::= constant 
            {
                Expr RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Constant c = CUP$parser$stack.peek().<Constant> value();
                 RESULT = c; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // expr ::= op_expr 
            {
                Expr RESULT = null;
                int oeleft = CUP$parser$stack.peek().left;
                int oeright = CUP$parser$stack.peek().right;
                Expr oe = CUP$parser$stack.peek().<Expr> value();
                 RESULT = oe; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // expr ::= identifier 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = id; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // expr ::= array_element 
            {
                Expr RESULT = null;
                int aeleft = CUP$parser$stack.peek().left;
                int aeright = CUP$parser$stack.peek().right;
                ArrayElement ae = CUP$parser$stack.peek().<ArrayElement> value();
                 RESULT = ae; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // expr ::= function_call 
            {
                Expr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = expression; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // expr ::= error 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Object e = CUP$parser$stack.peek().<Object> value();
                 Main.handleError("Invalid expression."); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // constant ::= literal 
            {
                Constant RESULT = null;
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Literal l = CUP$parser$stack.peek().<Literal> value();
                 RESULT = l; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // constant ::= array_literal 
            {
                Constant RESULT = null;
                int alleft = CUP$parser$stack.peek().left;
                int alright = CUP$parser$stack.peek().right;
                ArrayLiteral al = CUP$parser$stack.peek().<ArrayLiteral> value();
                 RESULT = al; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // op_expr ::= MINUS expr 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(e, UnaryOp.INT_NEG); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // op_expr ::= NOT expr 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(e, UnaryOp.LOG_NEG); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // op_expr ::= expr PLUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.PLUS); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // op_expr ::= expr MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.MINUS); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // op_expr ::= expr TIMES expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.TIMES); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // op_expr ::= expr HIGH_MULT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.HIGH_MULT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // op_expr ::= expr DIVIDE expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.DIVIDE); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // op_expr ::= expr MODULO expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.MODULO); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // op_expr ::= expr NOT_EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.NOT_EQUAL); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // op_expr ::= expr EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.EQUAL); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // op_expr ::= expr LT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.LT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // op_expr ::= expr LEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.LEQ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // op_expr ::= expr GT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.GT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // op_expr ::= expr GEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.GEQ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // op_expr ::= expr AND expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.AND); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // op_expr ::= expr OR expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.OR); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // literal ::= INTEGER_LITERAL 
            {
                Literal RESULT = null;
                int illeft = CUP$parser$stack.peek().left;
                int ilright = CUP$parser$stack.peek().right;
                Long il = CUP$parser$stack.peek().<Long> value();
                 RESULT = new Literal(il); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // literal ::= CHARACTER_LITERAL 
            {
                Literal RESULT = null;
                int clleft = CUP$parser$stack.peek().left;
                int clright = CUP$parser$stack.peek().right;
                Character cl = CUP$parser$stack.peek().<Character> value();
                 RESULT = new Literal(cl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // literal ::= STRING_LITERAL 
            {
                Literal RESULT = null;
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                String sl = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // literal ::= TRUE 
            {
                Literal RESULT = null;
                 RESULT = new Literal(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // literal ::= FALSE 
            {
                Literal RESULT = null;
                 RESULT = new Literal(false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // function_call ::= identifier OPEN_PAREN function_arg CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int faleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int faright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionArg fa = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionArg> value();
                 RESULT = new FunctionCall(id, fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",21, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // function_call ::= identifier OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                 RESULT = new FunctionCall(id, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // function_call ::= LENGTH OPEN_PAREN identifier CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                 RESULT = new FunctionCall(id, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",21, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // function_call ::= LENGTH OPEN_PAREN array_element CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int aeleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aeright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayElement ae = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayElement> value();
                 RESULT = new FunctionCall(ae); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",21, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // function_arg ::= expr 
            {
                FunctionArg RESULT = null;
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new FunctionArg(expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // function_arg ::= expr COMMA function_arg 
            {
                FunctionArg RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int faleft = CUP$parser$stack.peek().left;
                int faright = CUP$parser$stack.peek().right;
                FunctionArg fa = CUP$parser$stack.peek().<FunctionArg> value();
                 RESULT = new FunctionArg(expression, fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",22, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // array_literal ::= OPEN_BRACE array_element_list CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int aelleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aelright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayElementList ael = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayElementList> value();
                 RESULT = new ArrayLiteral(ael); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literal",23, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // array_element_list ::= expr 
            {
                ArrayElementList RESULT = null;
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ArrayElementList(expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // array_element_list ::= expr COMMA array_element_list 
            {
                ArrayElementList RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int aelleft = CUP$parser$stack.peek().left;
                int aelright = CUP$parser$stack.peek().right;
                ArrayElementList ael = CUP$parser$stack.peek().<ArrayElementList> value();
                 RESULT = new ArrayElementList(expression,ael); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // array_element_list ::= 
            {
                ArrayElementList RESULT = null;
                 RESULT = new ArrayElementList(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",24, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // array_element ::= identifier brackets_with_content 
            {
                ArrayElement RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int bwcleft = CUP$parser$stack.peek().left;
                int bwcright = CUP$parser$stack.peek().right;
                BracketsWithContent bwc = CUP$parser$stack.peek().<BracketsWithContent> value();
                 RESULT = new ArrayElement(id, bwc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // array_element ::= function_call brackets_with_content 
            {
                ArrayElement RESULT = null;
                int fcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionCall fc = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionCall> value();
                int bwcleft = CUP$parser$stack.peek().left;
                int bwcright = CUP$parser$stack.peek().right;
                BracketsWithContent bwc = CUP$parser$stack.peek().<BracketsWithContent> value();
                 RESULT = new ArrayElement(fc, bwc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // stmt ::= naked_stmt SEMICOLON 
            {
                Stmt RESULT = null;
                int nsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int nsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                NakedStmt ns = CUP$parser$stack.elementAt(CUP$parser$top-1).<NakedStmt> value();
                 RESULT = new Stmt(ns, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",27, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // stmt ::= naked_stmt 
            {
                Stmt RESULT = null;
                int nsleft = CUP$parser$stack.peek().left;
                int nsright = CUP$parser$stack.peek().right;
                NakedStmt ns = CUP$parser$stack.peek().<NakedStmt> value();
                 RESULT = new Stmt(ns, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // naked_stmt ::= assignment_stmt 
            {
                NakedStmt RESULT = null;
                int assleft = CUP$parser$stack.peek().left;
                int assright = CUP$parser$stack.peek().right;
                AssignmentStmt ass = CUP$parser$stack.peek().<AssignmentStmt> value();
                 RESULT = ass; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // naked_stmt ::= if_stmt 
            {
                NakedStmt RESULT = null;
                int isleft = CUP$parser$stack.peek().left;
                int isright = CUP$parser$stack.peek().right;
                IfStmt is = CUP$parser$stack.peek().<IfStmt> value();
                 RESULT = is; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // naked_stmt ::= while_stmt 
            {
                NakedStmt RESULT = null;
                int wsleft = CUP$parser$stack.peek().left;
                int wsright = CUP$parser$stack.peek().right;
                WhileStmt ws = CUP$parser$stack.peek().<WhileStmt> value();
                 RESULT = ws; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // naked_stmt ::= function_call 
            {
                NakedStmt RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // naked_stmt ::= block_stmt 
            {
                NakedStmt RESULT = null;
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = bs; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // naked_stmt ::= var_decl 
            {
                NakedStmt RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = vd; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // naked_stmt ::= var_init 
            {
                NakedStmt RESULT = null;
                int vileft = CUP$parser$stack.peek().left;
                int viright = CUP$parser$stack.peek().right;
                VarInit vi = CUP$parser$stack.peek().<VarInit> value();
                 RESULT = vi; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // naked_stmt ::= tuple_init 
            {
                NakedStmt RESULT = null;
                int tileft = CUP$parser$stack.peek().left;
                int tiright = CUP$parser$stack.peek().right;
                TupleInit ti = CUP$parser$stack.peek().<TupleInit> value();
                 RESULT = ti; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // assignment_stmt ::= identifier GETS expr 
            {
                AssignmentStmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(id, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // assignment_stmt ::= array_element GETS expr 
            {
                AssignmentStmt RESULT = null;
                int aeleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int aeright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayElement ae = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayElement> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(ae, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                IfStmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new IfStmt(e, s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",29, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt ELSE stmt 
            {
                IfStmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-4).<Expr> value();
                int s1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int s1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Stmt s1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Stmt> value();
                int s2left = CUP$parser$stack.peek().left;
                int s2right = CUP$parser$stack.peek().right;
                Stmt s2 = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new IfStmt(e, s1, s2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",29, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // while_stmt ::= WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                WhileStmt RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new WhileStmt(expression, s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",30, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // return_stmt ::= RETURN 
            {
                ReturnStmt RESULT = null;
                 RESULT = new ReturnStmt(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // return_stmt ::= RETURN return_list 
            {
                ReturnStmt RESULT = null;
                int rlleft = CUP$parser$stack.peek().left;
                int rlright = CUP$parser$stack.peek().right;
                ReturnList rl = CUP$parser$stack.peek().<ReturnList> value();
                 RESULT = new ReturnStmt(rl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",31, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // return_stmt ::= RETURN SEMICOLON 
            {
                ReturnStmt RESULT = null;
                 RESULT = new ReturnStmt(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",31, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // return_stmt ::= RETURN return_list SEMICOLON 
            {
                ReturnStmt RESULT = null;
                int rlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnList rl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnList> value();
                 RESULT = new ReturnStmt(rl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",31, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // return_list ::= expr 
            {
                ReturnList RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ReturnList(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // return_list ::= expr COMMA return_list 
            {
                ReturnList RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int rlleft = CUP$parser$stack.peek().left;
                int rlright = CUP$parser$stack.peek().right;
                ReturnList rl = CUP$parser$stack.peek().<ReturnList> value();
                 RESULT = new ReturnList(e, rl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",34, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // function_decl ::= identifier OPEN_PAREN function_param CLOSE_PAREN return_type block_stmt 
            {
                FunctionDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-5).<Identifier> value();
                int fpleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int fpright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                FunctionParam fp = CUP$parser$stack.elementAt(CUP$parser$top-3).<FunctionParam> value();
                int rtleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rtright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnType rt = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnType> value();
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = new FunctionDecl(id, fp, rt, bs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",19, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // return_type ::= COLON type_list 
            {
                ReturnType RESULT = null;
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                TypeList tl = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new ReturnType(tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",8, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // return_type ::= 
            {
                ReturnType RESULT = null;
                 RESULT = new ReturnType(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",8, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // type_list ::= type 
            {
                TypeList RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new TypeList(t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // type_list ::= type COMMA type_list 
            {
                TypeList RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                TypeList tl = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new TypeList(t, tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",7, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // function_decl_list ::= function_decl function_decl_list 
            {
                FunctionDeclList RESULT = null;
                int fdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionDecl fd = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionDecl> value();
                int fdlleft = CUP$parser$stack.peek().left;
                int fdlright = CUP$parser$stack.peek().right;
                FunctionDeclList fdl = CUP$parser$stack.peek().<FunctionDeclList> value();
                 RESULT = new FunctionDeclList(fd, fdl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl_list",20, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // function_decl_list ::= 
            {
                FunctionDeclList RESULT = null;
                 RESULT = new FunctionDeclList(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl_list",20, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // function_param ::= var_decl 
            {
                FunctionParam RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new FunctionParam(vd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // function_param ::= var_decl COMMA function_param 
            {
                FunctionParam RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-2).<VarDecl> value();
                int fpleft = CUP$parser$stack.peek().left;
                int fpright = CUP$parser$stack.peek().right;
                FunctionParam fp = CUP$parser$stack.peek().<FunctionParam> value();
                 RESULT = new FunctionParam(vd, fp); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // function_param ::= 
            {
                FunctionParam RESULT = null;
                 RESULT = new FunctionParam(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",18, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // block_stmt ::= OPEN_BRACE CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                 RESULT = new BlockStmt(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",32, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // block_stmt ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                StmtList sl = CUP$parser$stack.elementAt(CUP$parser$top-1).<StmtList> value();
                 RESULT = new BlockStmt(sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // block_stmt ::= OPEN_BRACE stmt_list return_stmt CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                StmtList sl = CUP$parser$stack.elementAt(CUP$parser$top-2).<StmtList> value();
                int rsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnStmt rs = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnStmt> value();
                 RESULT = new BlockStmt(sl, rs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",32, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // stmt_list ::= stmt 
            {
                StmtList RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new StmtList(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",33, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // stmt_list ::= stmt stmt_list 
            {
                StmtList RESULT = null;
                int sleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Stmt s = CUP$parser$stack.elementAt(CUP$parser$top-1).<Stmt> value();
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                StmtList sl = CUP$parser$stack.peek().<StmtList> value();
                 RESULT = new StmtList(s, sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",33, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // use_id ::= USE identifier 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new UseId(id, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",17, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // use_id ::= USE identifier SEMICOLON 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                 RESULT = new UseId(id, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // use_id ::= USE identifier use_id 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int uileft = CUP$parser$stack.peek().left;
                int uiright = CUP$parser$stack.peek().right;
                UseId ui = CUP$parser$stack.peek().<UseId> value();
                 RESULT = new UseId(id, ui, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // use_id ::= USE identifier SEMICOLON use_id 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int uileft = CUP$parser$stack.peek().left;
                int uiright = CUP$parser$stack.peek().right;
                UseId ui = CUP$parser$stack.peek().<UseId> value();
                 RESULT = new UseId(id, ui, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",17, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // program ::= function_decl_list 
            {
                Program RESULT = null;
                int fdlleft = CUP$parser$stack.peek().left;
                int fdlright = CUP$parser$stack.peek().right;
                FunctionDeclList fdl = CUP$parser$stack.peek().<FunctionDeclList> value();
                 RESULT = new Program(fdl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // program ::= use_id function_decl_list 
            {
                Program RESULT = null;
                int useidcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int useidcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                UseId useidc = CUP$parser$stack.elementAt(CUP$parser$top-1).<UseId> value();
                int fdlleft = CUP$parser$stack.peek().left;
                int fdlright = CUP$parser$stack.peek().right;
                FunctionDeclList fdl = CUP$parser$stack.peek().<FunctionDeclList> value();
                 RESULT = new Program(useidc, fdl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // program ::= error 
            {
                Program RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Object e = CUP$parser$stack.peek().<Object> value();
                 Main.handleError("Unexpected token "); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
