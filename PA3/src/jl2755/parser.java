
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package jl2755;

import jl2755.ast.*;
import java.io.IOException;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\003\003\000\002\003\005" +
    "\000\002\003\002\000\002\004\005\000\002\005\005\000" +
    "\002\005\006\000\002\005\006\000\002\006\004\000\002" +
    "\006\005\000\002\006\006\000\002\007\004\000\002\007" +
    "\005\000\002\010\003\000\002\010\003\000\002\011\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\005\000\002" +
    "\012\003\000\002\014\003\000\002\014\005\000\002\015" +
    "\006\000\002\015\005\000\002\015\006\000\002\015\006" +
    "\000\002\016\010\000\002\017\004\000\002\017\002\000" +
    "\002\020\005\000\002\020\007\000\002\020\002\000\002" +
    "\021\003\000\002\022\007\000\002\022\011\000\002\023" +
    "\005\000\002\023\006\000\002\024\003\000\002\025\007" +
    "\000\002\026\004\000\002\026\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\030\004\000\002\030\004\000\002\031" +
    "\005\000\002\031\006\000\002\031\006\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\013\004\000\002\013\004\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\033\003\000\002\033\003\000\002\034\003" +
    "\000\002\034\004\000\002\035\003\000\002\035\005\000" +
    "\002\036\003\000\002\036\004\000\002\036\004\000\002" +
    "\036\005\000\002\037\004\000\002\037\002\000\002\040" +
    "\004\000\002\040\003\000\002\041\003\000\002\041\004" +
    "\000\002\042\004\000\002\042\005\000\002\042\004\000" +
    "\002\042\005\000\002\043\006\000\002\043\006\000\002" +
    "\043\005\000\002\044\003\000\002\044\003\000\002\045" +
    "\003\000\002\045\005\000\002\046\004\000\002\046\005" +
    "\000\002\046\005\000\002\046\006\000\002\047\005\000" +
    "\002\047\005\000\002\050\005\000\002\050\003\000\002" +
    "\051\007\000\002\052\003\000\002\052\003\000\002\052" +
    "\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\012\002\uffdf\003\016\004\012\016\006\001" +
    "\002\000\004\044\314\001\002\000\006\002\uffdf\004\012" +
    "\001\002\000\004\004\012\001\002\000\004\002\306\001" +
    "\002\000\006\002\uffdf\004\012\001\002\000\004\002\uffae" +
    "\001\002\000\106\002\uffdb\003\uffdb\004\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb" +
    "\023\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\001\002\000\004\002\uff8c" +
    "\001\002\000\004\002\uffd6\001\002\000\004\002\uff8b\001" +
    "\002\000\004\002\uff8a\001\002\000\006\002\uffd3\004\012" +
    "\001\002\000\004\044\022\001\002\000\004\002\uffd4\001" +
    "\002\000\006\004\012\045\uffdc\001\002\000\004\050\044" +
    "\001\002\000\004\045\025\001\002\000\010\002\uffa5\004" +
    "\uffa5\050\027\001\002\000\006\002\uffd5\004\uffd5\001\002" +
    "\000\006\024\035\025\032\001\002\000\014\002\uff98\004" +
    "\uff98\045\uff98\046\uff98\051\uff98\001\002\000\010\002\uffa6" +
    "\004\uffa6\046\uffa6\001\002\000\042\002\uffaf\003\uffaf\004" +
    "\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\041\uffaf\042\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\051\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\001\002\000\016\002\uff99\004\uff99\042\040\045\uff99" +
    "\046\uff99\051\uff99\001\002\000\012\002\uff97\004\uff97\046" +
    "\uff97\051\036\001\002\000\042\002\uffb0\003\uffb0\004\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\041\uffb0\042\uffb0\045" +
    "\uffb0\046\uffb0\047\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0" +
    "\001\002\000\006\024\035\025\032\001\002\000\010\002" +
    "\uff96\004\uff96\046\uff96\001\002\000\004\043\042\001\002" +
    "\000\014\002\uffef\004\uffef\045\uffef\046\uffef\051\uffef\001" +
    "\002\000\042\002\ufff3\003\ufff3\004\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\041\ufff3\042\040\045\ufff3\046\ufff3\047" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\001\002\000\040" +
    "\002\ufff2\003\ufff2\004\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\041\ufff2\045\ufff2\046\ufff2\047\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\001\002\000\006\024\035\025\032\001" +
    "\002\000\006\045\uffde\051\046\001\002\000\006\004\012" +
    "\045\uffdc\001\002\000\004\045\uffdd\001\002\000\004\044" +
    "\052\001\002\000\004\002\uffad\001\002\000\006\004\012" +
    "\045\uffdc\001\002\000\004\045\054\001\002\000\006\046" +
    "\uffa5\050\027\001\002\000\004\046\057\001\002\000\006" +
    "\002\uffe1\004\uffe1\001\002\000\022\003\067\004\012\012" +
    "\077\014\075\046\057\047\073\053\063\054\066\001\002" +
    "\000\030\003\uffc8\004\uffc8\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\046\uffc8\047\uffc8\052\uffc8\053\uffc8\054\uffc8\001\002" +
    "\000\012\041\302\042\127\044\205\050\231\001\002\000" +
    "\030\003\uffc6\004\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6" +
    "\046\uffc6\047\uffc6\052\uffc6\053\uffc6\054\uffc6\001\002\000" +
    "\006\041\275\051\215\001\002\000\032\003\uffc5\004\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\042\127\046\uffc5\047" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\001\002\000\030\003\uffc7" +
    "\004\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\046\uffc7\047" +
    "\uffc7\052\uffc7\053\uffc7\054\uffc7\001\002\000\004\044\262" +
    "\001\002\000\030\003\uff8e\004\uff8e\012\uff8e\013\uff8e\014" +
    "\uff8e\015\uff8e\046\uff8e\047\uff8e\052\uff8e\053\uff8e\054\uff8e" +
    "\001\002\000\030\003\uffc2\004\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\046\uffc2\047\uffc2\052\uffc2\053\uffc2\054\uffc2" +
    "\001\002\000\030\003\uffc4\004\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\046\uffc4\047\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\001\002\000\030\003\uffa3\004\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\046\uffa3\047\uffa3\052\261\053\uffa3\054\uffa3" +
    "\001\002\000\032\002\ufff6\003\ufff6\004\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\046\ufff6\047\ufff6\052\ufff6\053\ufff6" +
    "\054\ufff6\001\002\000\006\015\247\047\250\001\002\000" +
    "\004\044\243\001\002\000\034\003\uffc3\004\uffc3\012\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\041\217\046\uffc3\047\uffc3\051" +
    "\215\052\uffc3\053\uffc3\054\uffc3\001\002\000\004\044\103" +
    "\001\002\000\024\003\067\004\012\012\077\014\075\015" +
    "\uffa2\046\057\047\uffa2\053\063\054\066\001\002\000\030" +
    "\003\uffc1\004\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\046" +
    "\uffc1\047\uffc1\052\uffc1\053\uffc1\054\uffc1\001\002\000\006" +
    "\015\uffa1\047\uffa1\001\002\000\032\003\113\004\012\005" +
    "\123\006\110\007\112\010\111\011\124\020\115\030\117" +
    "\044\120\046\121\054\066\001\002\000\072\003\uffeb\004" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb" +
    "\022\uffeb\023\uffeb\026\uffeb\027\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\043\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\051\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\001\002\000\076\003\uffec\004\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\017\uffec\020\uffec\022\uffec\023\uffec\026" +
    "\uffec\027\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\042\127\043\uffec\044\205\045" +
    "\uffec\046\uffec\047\uffec\051\uffec\052\uffec\053\uffec\054\uffec" +
    "\001\002\000\072\003\uffee\004\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\017\uffee\020\uffee\022\uffee\023\uffee\026\uffee" +
    "\027\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\043\uffee\045\uffee\046\uffee\047\uffee" +
    "\051\uffee\052\uffee\053\uffee\054\uffee\001\002\000\074\003" +
    "\uffea\004\uffea\012\uffea\013\uffea\014\uffea\015\uffea\017\uffea" +
    "\020\uffea\022\uffea\023\uffea\026\uffea\027\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\042\127\043\uffea\045\uffea\046\uffea\047\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\001\002\000\072\003\uffd1\004\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1\020\uffd1\022" +
    "\uffd1\023\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\043\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\001\002\000\072\003\uffcf\004\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\026\uffcf" +
    "\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\043\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\001\002\000\072\003" +
    "\uffd2\004\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2" +
    "\020\uffd2\022\uffd2\023\uffd2\026\uffd2\027\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\043\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\001\002\000\072\003\uffe8\004\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\022\uffe8\023" +
    "\uffe8\026\uffe8\027\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\043\uffe8\045\uffe8\046" +
    "\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\001\002" +
    "\000\072\003\ufff1\004\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\017\ufff1\020\ufff1\022\ufff1\023\ufff1\026\ufff1\027\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\043\ufff1\045\ufff1\046\ufff1\047\ufff1\051\ufff1" +
    "\052\ufff1\053\ufff1\054\ufff1\001\002\000\032\003\113\004" +
    "\012\005\123\006\110\007\112\010\111\011\124\020\115" +
    "\030\117\044\120\046\121\054\066\001\002\000\072\003" +
    "\uffed\004\uffed\012\uffed\013\uffed\014\uffed\015\uffed\017\uffed" +
    "\020\uffed\022\uffed\023\uffed\026\uffed\027\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\043\uffed\045\uffed\046\uffed\047\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\uffed\001\002\000\032\003\113\004\012\005\123" +
    "\006\110\007\112\010\111\011\124\020\115\030\117\044" +
    "\120\046\121\054\066\001\002\000\032\003\113\004\012" +
    "\005\123\006\110\007\112\010\111\011\124\020\115\030" +
    "\117\044\120\046\121\054\066\001\002\000\034\003\113" +
    "\004\012\005\123\006\110\007\112\010\111\011\124\020" +
    "\115\030\117\044\120\046\121\047\ufffb\054\066\001\002" +
    "\000\040\017\147\020\142\022\132\023\133\026\141\027" +
    "\136\031\135\032\146\033\140\034\143\035\144\036\131" +
    "\037\134\040\145\045\167\001\002\000\072\003\uffd0\004" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0\020\uffd0" +
    "\022\uffd0\023\uffd0\026\uffd0\027\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\043\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\001\002\000\072\003\uffce\004\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\017\uffce\020\uffce\022\uffce\023\uffce\026" +
    "\uffce\027\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\043\uffce\045\uffce\046\uffce\047" +
    "\uffce\051\uffce\052\uffce\053\uffce\054\uffce\001\002\000\074" +
    "\003\ufff0\004\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\017" +
    "\ufff0\020\ufff0\022\ufff0\023\ufff0\026\ufff0\027\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\042\127\043\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\001\002\000\072\003\ufffe\004" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\017\ufffe\020\ufffe" +
    "\022\ufffe\023\ufffe\026\ufffe\027\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\043\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\051\ufffe\052\ufffe\053\ufffe\054" +
    "\ufffe\001\002\000\032\003\113\004\012\005\123\006\110" +
    "\007\112\010\111\011\124\020\115\030\117\044\120\046" +
    "\121\054\066\001\002\000\040\017\147\020\142\022\132" +
    "\023\133\026\141\027\136\031\135\032\146\033\140\034" +
    "\143\035\144\036\131\037\134\040\145\043\137\001\002" +
    "\000\032\003\113\004\012\005\123\006\110\007\112\010" +
    "\111\011\124\020\115\030\117\044\120\046\121\054\066" +
    "\001\002\000\032\003\113\004\012\005\123\006\110\007" +
    "\112\010\111\011\124\020\115\030\117\044\120\046\121" +
    "\054\066\001\002\000\032\003\113\004\012\005\123\006" +
    "\110\007\112\010\111\011\124\020\115\030\117\044\120" +
    "\046\121\054\066\001\002\000\032\003\113\004\012\005" +
    "\123\006\110\007\112\010\111\011\124\020\115\030\117" +
    "\044\120\046\121\054\066\001\002\000\032\003\113\004" +
    "\012\005\123\006\110\007\112\010\111\011\124\020\115" +
    "\030\117\044\120\046\121\054\066\001\002\000\032\003" +
    "\113\004\012\005\123\006\110\007\112\010\111\011\124" +
    "\020\115\030\117\044\120\046\121\054\066\001\002\000" +
    "\076\003\uffd8\004\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\017\uffd8\020\uffd8\022\uffd8\023\uffd8\026\uffd8\027\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\127\043\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\001\002\000\032" +
    "\003\113\004\012\005\123\006\110\007\112\010\111\011" +
    "\124\020\115\030\117\044\120\046\121\054\066\001\002" +
    "\000\032\003\113\004\012\005\123\006\110\007\112\010" +
    "\111\011\124\020\115\030\117\044\120\046\121\054\066" +
    "\001\002\000\032\003\113\004\012\005\123\006\110\007" +
    "\112\010\111\011\124\020\115\030\117\044\120\046\121" +
    "\054\066\001\002\000\032\003\113\004\012\005\123\006" +
    "\110\007\112\010\111\011\124\020\115\030\117\044\120" +
    "\046\121\054\066\001\002\000\032\003\113\004\012\005" +
    "\123\006\110\007\112\010\111\011\124\020\115\030\117" +
    "\044\120\046\121\054\066\001\002\000\032\003\113\004" +
    "\012\005\123\006\110\007\112\010\111\011\124\020\115" +
    "\030\117\044\120\046\121\054\066\001\002\000\032\003" +
    "\113\004\012\005\123\006\110\007\112\010\111\011\124" +
    "\020\115\030\117\044\120\046\121\054\066\001\002\000" +
    "\032\003\113\004\012\005\123\006\110\007\112\010\111" +
    "\011\124\020\115\030\117\044\120\046\121\054\066\001" +
    "\002\000\072\003\uffbe\004\uffbe\012\uffbe\013\uffbe\014\uffbe" +
    "\015\uffbe\017\uffbe\020\uffbe\022\132\023\133\026\141\027" +
    "\136\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\043\uffbe\045\uffbe\046\uffbe\047\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\001\002\000\072\003\uffb5" +
    "\004\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\017\147\020" +
    "\142\022\132\023\133\026\141\027\136\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\043" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\001\002\000\072\003\uffb8\004\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\017\147\020\142\022\132\023\133" +
    "\026\141\027\136\031\135\032\146\033\140\034\143\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\043\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\001\002\000" +
    "\072\003\uffb2\004\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\017\147\020\142\022\132\023\133\026\141\027\136\031" +
    "\135\032\146\033\140\034\143\035\uffb2\036\uffb2\037\134" +
    "\040\145\043\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\001\002\000\072\003\uffb3\004\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\017\147\020\142\022" +
    "\132\023\133\026\141\027\136\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\043\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\001\002\000\072\003\uffbd\004\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\017\uffbd\020\uffbd\022\132\023\133\026\141" +
    "\027\136\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\043\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\001\002\000\072\003" +
    "\uffba\004\uffba\012\uffba\013\uffba\014\uffba\015\uffba\017\uffba" +
    "\020\uffba\022\uffba\023\uffba\026\uffba\027\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\043\uffba\045\uffba\046\uffba\047\uffba\051\uffba\052\uffba\053" +
    "\uffba\054\uffba\001\002\000\072\003\uffb4\004\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\017\147\020\142\022\132\023" +
    "\133\026\141\027\136\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\043\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\001\002" +
    "\000\074\003\uffd7\004\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\017\uffd7\020\uffd7\022\uffd7\023\uffd7\026\uffd7\027\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\043\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\054\uffd7\001\002\000\072\003" +
    "\uffb9\004\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\017\uffb9" +
    "\020\uffb9\022\uffb9\023\uffb9\026\uffb9\027\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\043\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\001\002\000\072\003\uffb6\004\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\015\uffb6\017\147\020\142\022\132\023" +
    "\133\026\141\027\136\031\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\043\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\001\002" +
    "\000\072\003\uffb7\004\uffb7\012\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\017\147\020\142\022\132\023\133\026\141\027\136" +
    "\031\135\032\146\033\140\034\143\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\043\uffb7\045\uffb7\046\uffb7\047\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\001\002\000\072\003\uffbb\004" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\017\uffbb\020\uffbb" +
    "\022\uffbb\023\uffbb\026\uffbb\027\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\043\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\001\002\000\072\003\uffbc\004\uffbc\012\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\017\uffbc\020\uffbc\022\uffbc\023\uffbc\026" +
    "\uffbc\027\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\043\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\001\002\000\072" +
    "\003\uffb1\004\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\017" +
    "\147\020\142\022\132\023\133\026\141\027\136\031\135" +
    "\032\146\033\140\034\143\035\144\036\uffb1\037\134\040" +
    "\145\043\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\001\002\000\020\003\067\004\012\012" +
    "\077\014\075\046\057\053\063\054\066\001\002\000\030" +
    "\003\uffda\004\uffda\012\uffda\013\171\014\uffda\015\uffda\046" +
    "\uffda\047\uffda\052\uffda\053\uffda\054\uffda\001\002\000\020" +
    "\003\067\004\012\012\077\014\075\046\057\053\063\054" +
    "\066\001\002\000\030\003\uffd9\004\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\046\uffd9\047\uffd9\052\uffd9\053\uffd9\054" +
    "\uffd9\001\002\000\004\047\177\001\002\000\042\017\147" +
    "\020\142\022\132\023\133\026\141\027\136\031\135\032" +
    "\146\033\140\034\143\035\144\036\131\037\134\040\145" +
    "\047\ufffd\051\175\001\002\000\034\003\113\004\012\005" +
    "\123\006\110\007\112\010\111\011\124\020\115\030\117" +
    "\044\120\046\121\047\ufffb\054\066\001\002\000\004\047" +
    "\ufffc\001\002\000\074\003\ufffa\004\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa\026" +
    "\ufffa\027\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\037\ufffa\040\ufffa\042\ufffa\043\ufffa\045\ufffa\046" +
    "\ufffa\047\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\001\002" +
    "\000\040\017\147\020\142\022\132\023\133\026\141\027" +
    "\136\031\135\032\146\033\140\034\143\035\144\036\131" +
    "\037\134\040\145\045\201\001\002\000\072\003\uffe9\004" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9" +
    "\022\uffe9\023\uffe9\026\uffe9\027\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\043\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\051\uffe9\052\uffe9\053\uffe9\054" +
    "\uffe9\001\002\000\072\003\uffbf\004\uffbf\012\uffbf\013\uffbf" +
    "\014\uffbf\015\uffbf\017\uffbf\020\uffbf\022\uffbf\023\uffbf\026" +
    "\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\043\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\001\002\000\072" +
    "\003\uffc0\004\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\017" +
    "\uffc0\020\uffc0\022\uffc0\023\uffc0\026\uffc0\027\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\043\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\054\uffc0\001\002\000\072\003\uffff\004\uffff\012" +
    "\uffff\013\uffff\014\uffff\015\uffff\017\uffff\020\uffff\022\uffff" +
    "\023\uffff\026\uffff\027\uffff\031\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\037\uffff\040\uffff\043\uffff\045\uffff" +
    "\046\uffff\047\uffff\051\uffff\052\uffff\053\uffff\054\uffff\001" +
    "\002\000\034\003\113\004\012\005\123\006\110\007\112" +
    "\010\111\011\124\020\115\030\117\044\120\045\211\046" +
    "\121\054\066\001\002\000\072\003\000\004\000\012\000" +
    "\013\000\014\000\015\000\017\000\020\000\022\000\023" +
    "\000\026\000\027\000\031\000\032\000\033\000\034\000" +
    "\035\000\036\000\037\000\040\000\043\000\045\000\046" +
    "\000\047\000\051\000\052\000\053\000\054\000\001\002" +
    "\000\004\045\214\001\002\000\042\017\147\020\142\022" +
    "\132\023\133\026\141\027\136\031\135\032\146\033\140" +
    "\034\143\035\144\036\131\037\134\040\145\045\uffe7\051" +
    "\212\001\002\000\074\003\uffe4\004\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\017\uffe4\020\uffe4\022\uffe4\023\uffe4\026" +
    "\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\001\002" +
    "\000\032\003\113\004\012\005\123\006\110\007\112\010" +
    "\111\011\124\020\115\030\117\044\120\046\121\054\066" +
    "\001\002\000\004\045\uffe6\001\002\000\074\003\uffe5\004" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020\uffe5" +
    "\022\uffe5\023\uffe5\026\uffe5\027\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5" +
    "\043\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\054\uffe5\001\002\000\006\004\012\053\225\001\002" +
    "\000\004\041\221\001\002\000\032\003\113\004\012\005" +
    "\123\006\110\007\112\010\111\011\124\020\115\030\117" +
    "\044\120\046\121\054\066\001\002\000\064\003\uff8f\004" +
    "\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\017\147\020\142" +
    "\022\132\023\133\026\141\027\136\031\135\032\146\033" +
    "\140\034\143\035\144\036\131\037\134\040\145\046\uff8f" +
    "\047\uff8f\052\uff8f\053\uff8f\054\uff8f\001\002\000\006\004" +
    "\012\054\066\001\002\000\004\044\205\001\002\000\030" +
    "\003\uff9b\004\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\046" +
    "\uff9b\047\uff9b\052\uff9b\053\uff9b\054\uff9b\001\002\000\004" +
    "\050\231\001\002\000\006\041\uff9e\051\215\001\002\000" +
    "\006\041\uffa0\051\215\001\002\000\004\041\uff9f\001\002" +
    "\000\004\041\uff9d\001\002\000\006\024\035\025\032\001" +
    "\002\000\034\003\uff91\004\uff91\012\uff91\013\uff91\014\uff91" +
    "\015\uff91\041\uff91\046\uff91\047\uff91\051\uff91\052\uff91\053" +
    "\uff91\054\uff91\001\002\000\036\003\uff90\004\uff90\012\uff90" +
    "\013\uff90\014\uff90\015\uff90\041\uff90\042\234\046\uff90\047" +
    "\uff90\051\uff90\052\uff90\053\uff90\054\uff90\001\002\000\034" +
    "\003\113\004\012\005\123\006\110\007\112\010\111\011" +
    "\124\020\115\030\117\043\042\044\120\046\121\054\066" +
    "\001\002\000\034\003\uffcc\004\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\041\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\001\002\000\034\003\uffcd\004\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\041\uffcd\046\uffcd\047\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\001\002\000\040\017" +
    "\147\020\142\022\132\023\133\026\141\027\136\031\135" +
    "\032\146\033\140\034\143\035\144\036\131\037\134\040" +
    "\145\043\240\001\002\000\036\003\uffcb\004\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\041\uffcb\042\234\046\uffcb\047" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\001\002\000\034" +
    "\003\uffca\004\uffca\012\uffca\013\uffca\014\uffca\015\uffca\041" +
    "\uffca\046\uffca\047\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\001\002\000\034\003\uffc9\004\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\041\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\001\002\000\032\003\113\004\012\005" +
    "\123\006\110\007\112\010\111\011\124\020\115\030\117" +
    "\044\120\046\121\054\066\001\002\000\040\017\147\020" +
    "\142\022\132\023\133\026\141\027\136\031\135\032\146" +
    "\033\140\034\143\035\144\036\131\037\134\040\145\045" +
    "\245\001\002\000\020\003\067\004\012\012\077\014\075" +
    "\046\057\053\063\054\066\001\002\000\030\003\uff8d\004" +
    "\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\046\uff8d\047\uff8d" +
    "\052\uff8d\053\uff8d\054\uff8d\001\002\000\036\003\113\004" +
    "\012\005\123\006\110\007\112\010\111\011\124\020\115" +
    "\030\117\044\120\046\121\047\uffaa\052\254\054\066\001" +
    "\002\000\032\002\ufff5\003\ufff5\004\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\046\ufff5\047\ufff5\052\ufff5\053\ufff5\054" +
    "\ufff5\001\002\000\004\047\252\001\002\000\032\002\ufff4" +
    "\003\ufff4\004\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\046" +
    "\ufff4\047\ufff4\052\ufff4\053\ufff4\054\ufff4\001\002\000\006" +
    "\047\uffa9\052\260\001\002\000\004\047\uffa8\001\002\000" +
    "\044\017\147\020\142\022\132\023\133\026\141\027\136" +
    "\031\135\032\146\033\140\034\143\035\144\036\131\037" +
    "\134\040\145\047\uffac\051\256\052\uffac\001\002\000\032" +
    "\003\113\004\012\005\123\006\110\007\112\010\111\011" +
    "\124\020\115\030\117\044\120\046\121\054\066\001\002" +
    "\000\006\047\uffab\052\uffab\001\002\000\004\047\uffa7\001" +
    "\002\000\030\003\uffa4\004\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\015\uffa4\046\uffa4\047\uffa4\052\uffa4\053\uffa4\054\uffa4\001" +
    "\002\000\010\004\012\046\121\054\066\001\002\000\010" +
    "\042\127\044\205\045\270\001\002\000\004\045\267\001" +
    "\002\000\004\042\127\001\002\000\004\042\127\001\002" +
    "\000\074\003\uffe2\004\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\026\uffe2\027\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\054\uffe2\001\002\000\074\003" +
    "\uffe3\004\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3" +
    "\020\uffe3\022\uffe3\023\uffe3\026\uffe3\027\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\042\uffe3\043\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\001\002\000\004\041\272\001\002" +
    "\000\032\003\113\004\012\005\123\006\110\007\112\010" +
    "\111\011\124\020\115\030\117\044\120\046\121\054\066" +
    "\001\002\000\064\003\ufff7\004\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\017\147\020\142\022\132\023\133\026\141" +
    "\027\136\031\135\032\146\033\140\034\143\035\144\036" +
    "\131\037\134\040\145\046\ufff7\047\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\001\002\000\004\041\277\001\002\000\006\004" +
    "\012\054\066\001\002\000\030\003\uff9a\004\uff9a\012\uff9a" +
    "\013\uff9a\014\uff9a\015\uff9a\046\uff9a\047\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\001\002\000\006\004\012\054\066\001\002" +
    "\000\030\003\uff9c\004\uff9c\012\uff9c\013\uff9c\014\uff9c\015" +
    "\uff9c\046\uff9c\047\uff9c\052\uff9c\053\uff9c\054\uff9c\001\002" +
    "\000\004\041\304\001\002\000\032\003\113\004\012\005" +
    "\123\006\110\007\112\010\111\011\124\020\115\030\117" +
    "\044\120\046\121\054\066\001\002\000\064\003\ufff9\004" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\017\147\020\142" +
    "\022\132\023\133\026\141\027\136\031\135\032\146\033" +
    "\140\034\143\035\144\036\131\037\134\040\145\046\ufff9" +
    "\047\ufff9\052\ufff9\053\ufff9\054\ufff9\001\002\000\032\003" +
    "\113\004\012\005\123\006\110\007\112\010\111\011\124" +
    "\020\115\030\117\044\120\046\121\054\066\001\002\000" +
    "\064\003\ufff8\004\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\017\147\020\142\022\132\023\133\026\141\027\136\031" +
    "\135\032\146\033\140\034\143\035\144\036\131\037\134" +
    "\040\145\046\ufff8\047\ufff8\052\ufff8\053\ufff8\054\ufff8\001" +
    "\002\000\004\002\001\001\002\000\012\002\uff95\004\uff95" +
    "\016\006\052\310\001\002\000\010\002\uff94\004\uff94\016" +
    "\006\001\002\000\006\002\uff93\004\uff93\001\002\000\006" +
    "\002\uff92\004\uff92\001\002\000\004\002\uffe0\001\002\000" +
    "\006\004\012\045\uffdc\001\002\000\004\045\316\001\002" +
    "\000\012\002\uffa5\004\uffa5\046\uffa5\050\027\001\002\000" +
    "\010\002\uffd5\004\uffd5\046\057\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\024\016\004\017\010\021\003\024\014\025" +
    "\016\026\013\034\012\046\007\052\006\001\001\000\002" +
    "\001\001\000\010\016\004\017\312\021\047\001\001\000" +
    "\004\021\306\001\001\000\002\001\001\000\010\016\004" +
    "\017\050\021\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\017\025\016\026\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\023" +
    "\021\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\025\001\001\000\002\001\001\000\012\011\027" +
    "\033\032\044\033\045\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\027\033" +
    "\032\044\033\045\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\042\001\001\000" +
    "\002\001\001\000\010\011\027\033\032\044\044\001\001" +
    "\000\002\001\001\000\006\020\046\021\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\052\021\022\001\001\000\002\001\001\000\004\037" +
    "\054\001\001\000\004\006\055\001\001\000\002\001\001" +
    "\000\032\005\057\006\070\015\063\021\060\022\064\032" +
    "\071\040\077\041\073\043\100\047\075\050\067\051\061" +
    "\001\001\000\002\001\001\000\004\023\300\001\001\000" +
    "\002\001\001\000\004\042\273\001\001\000\004\023\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\250\001\001\000\002\001" +
    "\001\000\004\042\215\001\001\000\002\001\001\000\032" +
    "\005\057\006\070\015\063\021\060\022\064\032\071\040" +
    "\077\041\101\043\100\047\075\050\067\051\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\103\004" +
    "\124\010\105\012\121\013\115\015\106\021\104\027\113" +
    "\001\001\000\002\001\001\000\004\023\205\001\001\000" +
    "\002\001\001\000\004\023\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\103\004\124\010\105\012\202" +
    "\013\115\015\106\021\104\027\113\001\001\000\002\001" +
    "\001\000\022\002\103\004\124\010\105\012\201\013\115" +
    "\015\106\021\104\027\113\001\001\000\022\002\103\004" +
    "\124\010\105\012\177\013\115\015\106\021\104\027\113" +
    "\001\001\000\024\002\103\003\172\004\124\010\105\012" +
    "\173\013\115\015\106\021\104\027\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\125\001\001\000\002\001\001\000\022\002\103\004\124" +
    "\010\105\012\127\013\115\015\106\021\104\027\113\001" +
    "\001\000\002\001\001\000\022\002\103\004\124\010\105" +
    "\012\165\013\115\015\106\021\104\027\113\001\001\000" +
    "\022\002\103\004\124\010\105\012\164\013\115\015\106" +
    "\021\104\027\113\001\001\000\022\002\103\004\124\010" +
    "\105\012\163\013\115\015\106\021\104\027\113\001\001" +
    "\000\022\002\103\004\124\010\105\012\162\013\115\015" +
    "\106\021\104\027\113\001\001\000\022\002\103\004\124" +
    "\010\105\012\161\013\115\015\106\021\104\027\113\001" +
    "\001\000\022\002\103\004\124\010\105\012\160\013\115" +
    "\015\106\021\104\027\113\001\001\000\004\023\157\001" +
    "\001\000\022\002\103\004\124\010\105\012\156\013\115" +
    "\015\106\021\104\027\113\001\001\000\022\002\103\004" +
    "\124\010\105\012\155\013\115\015\106\021\104\027\113" +
    "\001\001\000\022\002\103\004\124\010\105\012\154\013" +
    "\115\015\106\021\104\027\113\001\001\000\022\002\103" +
    "\004\124\010\105\012\153\013\115\015\106\021\104\027" +
    "\113\001\001\000\022\002\103\004\124\010\105\012\152" +
    "\013\115\015\106\021\104\027\113\001\001\000\022\002" +
    "\103\004\124\010\105\012\151\013\115\015\106\021\104" +
    "\027\113\001\001\000\022\002\103\004\124\010\105\012" +
    "\150\013\115\015\106\021\104\027\113\001\001\000\022" +
    "\002\103\004\124\010\105\012\147\013\115\015\106\021" +
    "\104\027\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\057\006\070\015\063\021\060\022\064\032" +
    "\071\040\167\043\100\047\075\050\067\051\061\001\001" +
    "\000\002\001\001\000\030\005\057\006\070\015\063\021" +
    "\060\022\064\032\071\040\171\043\100\047\075\050\067" +
    "\051\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\103\003\175\004\124\010\105" +
    "\012\173\013\115\015\106\021\104\027\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\103\004\124\010\105\012\207\013\115" +
    "\014\206\015\106\021\104\027\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\103\004\124\010\105\012\207\013\115\014" +
    "\212\015\106\021\104\027\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\223\047\225\001\001\000" +
    "\002\001\001\000\022\002\103\004\124\010\105\012\217" +
    "\013\115\015\106\021\104\027\113\001\001\000\002\001" +
    "\001\000\006\015\222\021\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\227\001" +
    "\001\000\004\042\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\231\033\232\001\001\000\002\001" +
    "\001\000\006\007\235\031\234\001\001\000\022\002\103" +
    "\004\124\010\105\012\236\013\115\015\106\021\104\027" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\241\031\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\103\004\124\010\105" +
    "\012\243\013\115\015\106\021\104\027\113\001\001\000" +
    "\002\001\001\000\030\005\057\006\070\015\063\021\060" +
    "\022\064\032\071\040\245\043\100\047\075\050\067\051" +
    "\061\001\001\000\002\001\001\000\024\002\103\004\124" +
    "\010\105\012\254\013\115\015\106\021\104\027\113\035" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\103\004\124\010\105\012\254\013\115" +
    "\015\106\021\104\027\113\035\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\263" +
    "\004\265\015\264\021\262\001\001\000\004\023\205\001" +
    "\001\000\002\001\001\000\004\023\203\001\001\000\004" +
    "\023\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\103\004\124\010\105\012\272" +
    "\013\115\015\106\021\104\027\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\275\021\221\001\001" +
    "\000\002\001\001\000\006\015\277\021\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\103\004\124" +
    "\010\105\012\302\013\115\015\106\021\104\027\113\001" +
    "\001\000\002\001\001\000\022\002\103\004\124\010\105" +
    "\012\304\013\115\015\106\021\104\027\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\310\001\001" +
    "\000\004\046\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\314\021\022\001\001" +
    "\000\002\001\001\000\004\037\316\001\001\000\004\006" +
    "\055\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


 
  public void report_fatal_error(String msg, Object info) {
    report_error(msg, info);
  }

  public void report_error(String msg, Object info) {
    Main.setToken((java_cup.runtime.Symbol)info);
  }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 119. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= xi_file EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                XiFile start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<XiFile> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // array_element ::= identifier indexed_brackets 
            {
                ArrayElement RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new ArrayElement(id, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // array_element ::= function_call indexed_brackets 
            {
                ArrayElement RESULT = null;
                int fcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionCall fc = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionCall> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new ArrayElement(fc, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // array_element ::= array_literal indexed_brackets 
            {
                ArrayElement RESULT = null;
                int alleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int alright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayLiteral al = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayLiteral> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new ArrayElement(al, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // array_element_list ::= expr 
            {
                ArrayElementList RESULT = null;
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ArrayElementList(expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // array_element_list ::= expr COMMA array_element_list 
            {
                ArrayElementList RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int aelleft = CUP$parser$stack.peek().left;
                int aelright = CUP$parser$stack.peek().right;
                ArrayElementList ael = CUP$parser$stack.peek().<ArrayElementList> value();
                 RESULT = new ArrayElementList(expression,ael); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // array_element_list ::= 
            {
                ArrayElementList RESULT = null;
                 RESULT = new ArrayElementList(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // array_literal ::= OPEN_BRACE array_element_list CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int aelleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aelright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayElementList ael = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayElementList> value();
                 RESULT = new ArrayLiteral(ael); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literal",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // assignment_stmt ::= identifier GETS expr 
            {
                AssignmentStmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(id, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // assignment_stmt ::= identifier indexed_brackets GETS expr 
            {
                AssignmentStmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int ibleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ibright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                IndexedBrackets ib = CUP$parser$stack.elementAt(CUP$parser$top-2).<IndexedBrackets> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(id, ib, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",3, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // assignment_stmt ::= function_call indexed_brackets GETS expr 
            {
                AssignmentStmt RESULT = null;
                int fcleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int fcright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                FunctionCall fc = CUP$parser$stack.elementAt(CUP$parser$top-3).<FunctionCall> value();
                int ibleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ibright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                IndexedBrackets ib = CUP$parser$stack.elementAt(CUP$parser$top-2).<IndexedBrackets> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(fc, ib, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",3, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // block_stmt ::= OPEN_BRACE CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                 RESULT = new BlockStmt(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // block_stmt ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                StmtList sl = CUP$parser$stack.elementAt(CUP$parser$top-1).<StmtList> value();
                 RESULT = new BlockStmt(sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // block_stmt ::= OPEN_BRACE stmt_list return_stmt CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                StmtList sl = CUP$parser$stack.elementAt(CUP$parser$top-2).<StmtList> value();
                int rsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnStmt rs = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnStmt> value();
                 RESULT = new BlockStmt(sl, rs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // brackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
                Brackets RESULT = null;
                 RESULT = new Brackets(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // brackets ::= OPEN_BRACKET CLOSE_BRACKET brackets 
            {
                Brackets RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new Brackets(b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",5, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // constant ::= literal 
            {
                Constant RESULT = null;
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Literal l = CUP$parser$stack.peek().<Literal> value();
                 RESULT = l; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // constant ::= array_literal 
            {
                Constant RESULT = null;
                int alleft = CUP$parser$stack.peek().left;
                int alright = CUP$parser$stack.peek().right;
                ArrayLiteral al = CUP$parser$stack.peek().<ArrayLiteral> value();
                 RESULT = al; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // empty_array_type ::= primitive_type brackets 
            {
                EmptyArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new EmptyArrayType(pt, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("empty_array_type",7, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // expr ::= constant 
            {
                Expr RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Constant c = CUP$parser$stack.peek().<Constant> value();
                 RESULT = c; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // expr ::= op_expr 
            {
                Expr RESULT = null;
                int oeleft = CUP$parser$stack.peek().left;
                int oeright = CUP$parser$stack.peek().right;
                Expr oe = CUP$parser$stack.peek().<Expr> value();
                 RESULT = oe; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // expr ::= identifier 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = id; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // expr ::= array_element 
            {
                Expr RESULT = null;
                int aeleft = CUP$parser$stack.peek().left;
                int aeright = CUP$parser$stack.peek().right;
                ArrayElement ae = CUP$parser$stack.peek().<ArrayElement> value();
                 RESULT = ae; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // expr ::= function_call 
            {
                Expr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = expression; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // expr ::= error 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Object e = CUP$parser$stack.peek().<Object> value();
                 Main.handleError("Invalid expression."); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // function_arg ::= expr 
            {
                FunctionArg RESULT = null;
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new FunctionArg(expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // function_arg ::= expr COMMA function_arg 
            {
                FunctionArg RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int faleft = CUP$parser$stack.peek().left;
                int faright = CUP$parser$stack.peek().right;
                FunctionArg fa = CUP$parser$stack.peek().<FunctionArg> value();
                 RESULT = new FunctionArg(expression, fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // function_call ::= identifier OPEN_PAREN function_arg CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int faleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int faright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionArg fa = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionArg> value();
                 RESULT = new FunctionCall(id, fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",11, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // function_call ::= identifier OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                 RESULT = new FunctionCall(id, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // function_call ::= LENGTH OPEN_PAREN identifier CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                 RESULT = new FunctionCall(id, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",11, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // function_call ::= LENGTH OPEN_PAREN array_element CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int aeleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aeright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayElement ae = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayElement> value();
                 RESULT = new FunctionCall(ae); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",11, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // function_decl ::= identifier OPEN_PAREN function_param CLOSE_PAREN return_type block_stmt 
            {
                FunctionDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-5).<Identifier> value();
                int fpleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int fpright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                FunctionParam fp = CUP$parser$stack.elementAt(CUP$parser$top-3).<FunctionParam> value();
                int rtleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rtright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnType rt = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnType> value();
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = new FunctionDecl(id, fp, rt, bs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",12, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // function_decl_list ::= function_decl function_decl_list 
            {
                FunctionDeclList RESULT = null;
                int fdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionDecl fd = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionDecl> value();
                int fdlleft = CUP$parser$stack.peek().left;
                int fdlright = CUP$parser$stack.peek().right;
                FunctionDeclList fdl = CUP$parser$stack.peek().<FunctionDeclList> value();
                 RESULT = new FunctionDeclList(fd, fdl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl_list",13, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // function_decl_list ::= 
            {
                FunctionDeclList RESULT = null;
                 RESULT = new FunctionDeclList(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl_list",13, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // function_param ::= identifier COLON type 
            {
                FunctionParam RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new FunctionParam(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // function_param ::= identifier COLON type COMMA function_param 
            {
                FunctionParam RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int fpleft = CUP$parser$stack.peek().left;
                int fpright = CUP$parser$stack.peek().right;
                FunctionParam fp = CUP$parser$stack.peek().<FunctionParam> value();
                 RESULT = new FunctionParam(id, t, fp); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",14, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // function_param ::= 
            {
                FunctionParam RESULT = null;
                 RESULT = new FunctionParam(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",14, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // identifier ::= IDENTIFIER 
            {
                Identifier RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Identifier(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                IfStmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new IfStmt(e, s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt ELSE stmt 
            {
                IfStmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-4).<Expr> value();
                int s1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int s1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Stmt s1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Stmt> value();
                int s2left = CUP$parser$stack.peek().left;
                int s2right = CUP$parser$stack.peek().right;
                Stmt s2 = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new IfStmt(e, s1, s2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // indexed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                IndexedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new IndexedBrackets(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexed_brackets",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // indexed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET indexed_brackets 
            {
                IndexedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new IndexedBrackets(e, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexed_brackets",17, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // interface ::= interface_list 
            {
                Interface RESULT = null;
                int illeft = CUP$parser$stack.peek().left;
                int ilright = CUP$parser$stack.peek().right;
                InterfaceList il = CUP$parser$stack.peek().<InterfaceList> value();
                 RESULT = new Interface(il); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // interface_func ::= identifier OPEN_PAREN function_param CLOSE_PAREN return_type 
            {
                InterfaceFunc RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int fpleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int fpright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                FunctionParam fp = CUP$parser$stack.elementAt(CUP$parser$top-2).<FunctionParam> value();
                int rtleft = CUP$parser$stack.peek().left;
                int rtright = CUP$parser$stack.peek().right;
                ReturnType rt = CUP$parser$stack.peek().<ReturnType> value();
                 RESULT = new InterfaceFunc(id, fp, rt); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface_func",19, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // interface_list ::= interface_func interface_list 
            {
                InterfaceList RESULT = null;
                int ifdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ifdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                InterfaceFunc ifd = CUP$parser$stack.elementAt(CUP$parser$top-1).<InterfaceFunc> value();
                int illeft = CUP$parser$stack.peek().left;
                int ilright = CUP$parser$stack.peek().right;
                InterfaceList il = CUP$parser$stack.peek().<InterfaceList> value();
                 RESULT = new InterfaceList(ifd, il); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface_list",20, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // interface_list ::= interface_func 
            {
                InterfaceList RESULT = null;
                int ifdleft = CUP$parser$stack.peek().left;
                int ifdright = CUP$parser$stack.peek().right;
                InterfaceFunc ifd = CUP$parser$stack.peek().<InterfaceFunc> value();
                 RESULT = new InterfaceList(ifd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface_list",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // literal ::= INTEGER_LITERAL 
            {
                Literal RESULT = null;
                int illeft = CUP$parser$stack.peek().left;
                int ilright = CUP$parser$stack.peek().right;
                Long il = CUP$parser$stack.peek().<Long> value();
                 RESULT = new Literal(il); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // literal ::= CHARACTER_LITERAL 
            {
                Literal RESULT = null;
                int clleft = CUP$parser$stack.peek().left;
                int clright = CUP$parser$stack.peek().right;
                Character cl = CUP$parser$stack.peek().<Character> value();
                 RESULT = new Literal(cl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // literal ::= STRING_LITERAL 
            {
                Literal RESULT = null;
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                String sl = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // literal ::= TRUE 
            {
                Literal RESULT = null;
                 RESULT = new Literal(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // literal ::= FALSE 
            {
                Literal RESULT = null;
                 RESULT = new Literal(false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // mixed_array_type ::= primitive_type brackets 
            {
                MixedArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new MixedArrayType(pt, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_array_type",22, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // mixed_array_type ::= primitive_type mixed_brackets 
            {
                MixedArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int mbleft = CUP$parser$stack.peek().left;
                int mbright = CUP$parser$stack.peek().right;
                MixedBrackets mb = CUP$parser$stack.peek().<MixedBrackets> value();
                 RESULT = new MixedArrayType(pt, mb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_array_type",22, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new MixedBrackets(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",23, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET mixed_brackets 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int mbleft = CUP$parser$stack.peek().left;
                int mbright = CUP$parser$stack.peek().right;
                MixedBrackets mb = CUP$parser$stack.peek().<MixedBrackets> value();
                 RESULT = new MixedBrackets(e, mb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",23, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET brackets 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new MixedBrackets(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",23, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // naked_stmt ::= assignment_stmt 
            {
                NakedStmt RESULT = null;
                int assleft = CUP$parser$stack.peek().left;
                int assright = CUP$parser$stack.peek().right;
                AssignmentStmt ass = CUP$parser$stack.peek().<AssignmentStmt> value();
                 RESULT = ass; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // naked_stmt ::= if_stmt 
            {
                NakedStmt RESULT = null;
                int isleft = CUP$parser$stack.peek().left;
                int isright = CUP$parser$stack.peek().right;
                IfStmt is = CUP$parser$stack.peek().<IfStmt> value();
                 RESULT = is; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // naked_stmt ::= while_stmt 
            {
                NakedStmt RESULT = null;
                int wsleft = CUP$parser$stack.peek().left;
                int wsright = CUP$parser$stack.peek().right;
                WhileStmt ws = CUP$parser$stack.peek().<WhileStmt> value();
                 RESULT = ws; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // naked_stmt ::= function_call 
            {
                NakedStmt RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // naked_stmt ::= block_stmt 
            {
                NakedStmt RESULT = null;
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = bs; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // naked_stmt ::= var_decl 
            {
                NakedStmt RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = vd; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // naked_stmt ::= var_init 
            {
                NakedStmt RESULT = null;
                int vileft = CUP$parser$stack.peek().left;
                int viright = CUP$parser$stack.peek().right;
                VarInit vi = CUP$parser$stack.peek().<VarInit> value();
                 RESULT = vi; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // naked_stmt ::= tuple_init 
            {
                NakedStmt RESULT = null;
                int tileft = CUP$parser$stack.peek().left;
                int tiright = CUP$parser$stack.peek().right;
                TupleInit ti = CUP$parser$stack.peek().<TupleInit> value();
                 RESULT = ti; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // op_expr ::= MINUS expr 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(e, UnaryOp.INT_NEG); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // op_expr ::= NOT expr 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(e, UnaryOp.LOG_NEG); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // op_expr ::= expr PLUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.PLUS); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // op_expr ::= expr MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.MINUS); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // op_expr ::= expr TIMES expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.TIMES); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // op_expr ::= expr HIGH_MULT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.HIGH_MULT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // op_expr ::= expr DIVIDE expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.DIVIDE); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // op_expr ::= expr MODULO expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.MODULO); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // op_expr ::= expr NOT_EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.NOT_EQUAL); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // op_expr ::= expr EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.EQUAL); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // op_expr ::= expr LT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.LT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // op_expr ::= expr LEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.LEQ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // op_expr ::= expr GT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.GT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // op_expr ::= expr GEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.GEQ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // op_expr ::= expr AND expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.AND); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // op_expr ::= expr OR expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.OR); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // primitive_type ::= INT 
            {
                PrimitiveType RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Object i = CUP$parser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(0); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // primitive_type ::= BOOL 
            {
                PrimitiveType RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // program ::= function_decl_list 
            {
                Program RESULT = null;
                int fdlleft = CUP$parser$stack.peek().left;
                int fdlright = CUP$parser$stack.peek().right;
                FunctionDeclList fdl = CUP$parser$stack.peek().<FunctionDeclList> value();
                 RESULT = new Program(fdl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // program ::= use_id function_decl_list 
            {
                Program RESULT = null;
                int useidcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int useidcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                UseId useidc = CUP$parser$stack.elementAt(CUP$parser$top-1).<UseId> value();
                int fdlleft = CUP$parser$stack.peek().left;
                int fdlright = CUP$parser$stack.peek().right;
                FunctionDeclList fdl = CUP$parser$stack.peek().<FunctionDeclList> value();
                 RESULT = new Program(useidc, fdl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",26, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // return_list ::= expr 
            {
                ReturnList RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ReturnList(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // return_list ::= expr COMMA return_list 
            {
                ReturnList RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int rlleft = CUP$parser$stack.peek().left;
                int rlright = CUP$parser$stack.peek().right;
                ReturnList rl = CUP$parser$stack.peek().<ReturnList> value();
                 RESULT = new ReturnList(e, rl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // return_stmt ::= RETURN 
            {
                ReturnStmt RESULT = null;
                 RESULT = new ReturnStmt(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // return_stmt ::= RETURN return_list 
            {
                ReturnStmt RESULT = null;
                int rlleft = CUP$parser$stack.peek().left;
                int rlright = CUP$parser$stack.peek().right;
                ReturnList rl = CUP$parser$stack.peek().<ReturnList> value();
                 RESULT = new ReturnStmt(rl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",28, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // return_stmt ::= RETURN SEMICOLON 
            {
                ReturnStmt RESULT = null;
                 RESULT = new ReturnStmt(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",28, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // return_stmt ::= RETURN return_list SEMICOLON 
            {
                ReturnStmt RESULT = null;
                int rlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnList rl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnList> value();
                 RESULT = new ReturnStmt(rl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // return_type ::= COLON type_list 
            {
                ReturnType RESULT = null;
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                TypeList tl = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new ReturnType(tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",29, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // return_type ::= 
            {
                ReturnType RESULT = null;
                 RESULT = new ReturnType(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",29, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // stmt ::= naked_stmt SEMICOLON 
            {
                Stmt RESULT = null;
                int nsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int nsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                NakedStmt ns = CUP$parser$stack.elementAt(CUP$parser$top-1).<NakedStmt> value();
                 RESULT = new Stmt(ns, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",30, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // stmt ::= naked_stmt 
            {
                Stmt RESULT = null;
                int nsleft = CUP$parser$stack.peek().left;
                int nsright = CUP$parser$stack.peek().right;
                NakedStmt ns = CUP$parser$stack.peek().<NakedStmt> value();
                 RESULT = new Stmt(ns, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // stmt_list ::= stmt 
            {
                StmtList RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new StmtList(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // stmt_list ::= stmt stmt_list 
            {
                StmtList RESULT = null;
                int sleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Stmt s = CUP$parser$stack.elementAt(CUP$parser$top-1).<Stmt> value();
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                StmtList sl = CUP$parser$stack.peek().<StmtList> value();
                 RESULT = new StmtList(s, sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",31, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // tuple_decl_list ::= COMMA var_decl 
            {
                TupleDeclList RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new TupleDeclList(vd, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",32, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // tuple_decl_list ::= COMMA var_decl tuple_decl_list 
            {
                TupleDeclList RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl> value();
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                TupleDeclList tdl = CUP$parser$stack.peek().<TupleDeclList> value();
                 RESULT = new TupleDeclList(vd, tdl, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // tuple_decl_list ::= COMMA UNDERSCORE 
            {
                TupleDeclList RESULT = null;
                 RESULT = new TupleDeclList(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",32, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // tuple_decl_list ::= COMMA UNDERSCORE tuple_decl_list 
            {
                TupleDeclList RESULT = null;
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                TupleDeclList tdl = CUP$parser$stack.peek().<TupleDeclList> value();
                 RESULT = new TupleDeclList(tdl, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // tuple_init ::= UNDERSCORE tuple_decl_list GETS function_call 
            {
                TupleInit RESULT = null;
                int tdlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TupleDeclList tdl = CUP$parser$stack.elementAt(CUP$parser$top-2).<TupleDeclList> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(tdl, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",33, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // tuple_init ::= var_decl tuple_decl_list GETS function_call 
            {
                TupleInit RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-3).<VarDecl> value();
                int tdlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TupleDeclList tdl = CUP$parser$stack.elementAt(CUP$parser$top-2).<TupleDeclList> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(vd, tdl, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",33, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // tuple_init ::= UNDERSCORE GETS function_call 
            {
                TupleInit RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",33, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // type ::= primitive_type 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                PrimitiveType pt = CUP$parser$stack.peek().<PrimitiveType> value();
                 RESULT = pt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // type ::= empty_array_type 
            {
                Type RESULT = null;
                int atleft = CUP$parser$stack.peek().left;
                int atright = CUP$parser$stack.peek().right;
                EmptyArrayType at = CUP$parser$stack.peek().<EmptyArrayType> value();
                 RESULT = at; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // type_list ::= type 
            {
                TypeList RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new TypeList(t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",35, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // type_list ::= type COMMA type_list 
            {
                TypeList RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                TypeList tl = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new TypeList(t, tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",35, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // use_id ::= USE identifier 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new UseId(id, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",36, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // use_id ::= USE identifier SEMICOLON 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                 RESULT = new UseId(id, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // use_id ::= USE identifier use_id 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int uileft = CUP$parser$stack.peek().left;
                int uiright = CUP$parser$stack.peek().right;
                UseId ui = CUP$parser$stack.peek().<UseId> value();
                 RESULT = new UseId(id, ui, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 111: // use_id ::= USE identifier SEMICOLON use_id 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int uileft = CUP$parser$stack.peek().left;
                int uiright = CUP$parser$stack.peek().right;
                UseId ui = CUP$parser$stack.peek().<UseId> value();
                 RESULT = new UseId(id, ui, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",36, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 112: // var_decl ::= identifier COLON mixed_array_type 
            {
                VarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int matleft = CUP$parser$stack.peek().left;
                int matright = CUP$parser$stack.peek().right;
                MixedArrayType mat = CUP$parser$stack.peek().<MixedArrayType> value();
                 RESULT = new VarDecl(id, mat); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",37, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 113: // var_decl ::= identifier COLON primitive_type 
            {
                VarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                PrimitiveType pt = CUP$parser$stack.peek().<PrimitiveType> value();
                 RESULT = new VarDecl(id, pt); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",37, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 114: // var_init ::= var_decl GETS expr 
            {
                VarInit RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-2).<VarDecl> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new VarInit(vd, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_init",38, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 115: // var_init ::= error 
            {
                VarInit RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Object e = CUP$parser$stack.peek().<Object> value();
                 Main.handleError("Invalid assignment operator."); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_init",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 116: // while_stmt ::= WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                WhileStmt RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new WhileStmt(expression, s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",39, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 117: // xi_file ::= program 
            {
                XiFile RESULT = null;
                int pleft = CUP$parser$stack.peek().left;
                int pright = CUP$parser$stack.peek().right;
                Program p = CUP$parser$stack.peek().<Program> value();
                 RESULT = p; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("xi_file",40, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 118: // xi_file ::= interface 
            {
                XiFile RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Interface i = CUP$parser$stack.peek().<Interface> value();
                 RESULT = i; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("xi_file",40, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 119: // xi_file ::= error 
            {
                XiFile RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Object e = CUP$parser$stack.peek().<Object> value();
                 Main.handleError("Unexpected token "); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("xi_file",40, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
