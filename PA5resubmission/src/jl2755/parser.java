
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package jl2755;

import jl2755.ast.*;
import java.io.IOException;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\003\003\000\002\003\005" +
    "\000\002\003\002\000\002\004\005\000\002\005\005\000" +
    "\002\005\006\000\002\005\006\000\002\006\004\000\002" +
    "\006\005\000\002\006\006\000\002\006\005\000\002\007" +
    "\004\000\002\007\005\000\002\010\003\000\002\010\003" +
    "\000\002\011\004\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\005\000\002\014\003\000\002\014\005\000\002\015" +
    "\006\000\002\015\005\000\002\015\006\000\002\016\007" +
    "\000\002\016\010\000\002\017\004\000\002\017\003\000" +
    "\002\020\005\000\002\020\007\000\002\021\003\000\002" +
    "\022\007\000\002\022\011\000\002\023\005\000\002\023" +
    "\006\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\025\004\000" +
    "\002\025\004\000\002\026\005\000\002\026\006\000\002" +
    "\026\006\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\013\004\000" +
    "\002\013\004\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\030\003\000\002" +
    "\030\003\000\002\031\003\000\002\031\004\000\002\032" +
    "\003\000\002\032\005\000\002\033\003\000\002\033\004" +
    "\000\002\033\004\000\002\033\005\000\002\034\004\000" +
    "\002\034\002\000\002\035\004\000\002\035\003\000\002" +
    "\036\003\000\002\036\004\000\002\037\004\000\002\037" +
    "\005\000\002\037\004\000\002\037\005\000\002\040\006" +
    "\000\002\040\006\000\002\040\005\000\002\041\003\000" +
    "\002\041\003\000\002\042\003\000\002\042\005\000\002" +
    "\043\004\000\002\043\005\000\002\043\005\000\002\043" +
    "\006\000\002\044\005\000\002\044\005\000\002\045\007" +
    "\000\002\046\007" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\006\004\011\016\006\001\002\000\004\044" +
    "\022\001\002\000\006\002\uffdf\004\011\001\002\000\004" +
    "\004\011\001\002\000\004\004\011\001\002\000\004\002" +
    "\013\001\002\000\102\004\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\023\uffdc\026" +
    "\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\001\002\000\004\002\uffb3\001\002\000" +
    "\004\002\001\001\002\000\004\002\uffb2\001\002\000\010" +
    "\004\uff9a\016\006\052\016\001\002\000\006\004\uff99\016" +
    "\006\001\002\000\004\004\uff98\001\002\000\004\004\uff97" +
    "\001\002\000\004\002\uffe0\001\002\000\006\004\011\045" +
    "\025\001\002\000\004\050\277\001\002\000\004\045\274" +
    "\001\002\000\006\046\uffaa\050\027\001\002\000\004\046" +
    "\045\001\002\000\006\024\035\025\032\001\002\000\012" +
    "\041\uff9d\045\uff9d\046\uff9d\051\uff9d\001\002\000\004\046" +
    "\uffab\001\002\000\036\004\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\041\uffb4\042\uffb4\045\uffb4\046\uffb4\047\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\054\uffb4\001\002\000\012\042\040" +
    "\045\uff9e\046\uff9e\051\uff9e\001\002\000\006\046\uff9c\051" +
    "\036\001\002\000\036\004\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\041\uffb5\042\uffb5\045\uffb5\046\uffb5\047\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\001\002\000\006\024\035" +
    "\025\032\001\002\000\004\046\uff9b\001\002\000\004\043" +
    "\042\001\002\000\010\045\uffee\046\uffee\051\uffee\001\002" +
    "\000\036\004\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\041" +
    "\ufff2\042\040\045\ufff2\046\ufff2\047\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\001\002\000\034\004\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\041\ufff1\045\ufff1\046\ufff1\047\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\001\002\000\006\002" +
    "\uffe2\004\uffe2\001\002\000\022\004\011\012\065\014\063" +
    "\015\055\046\045\047\061\053\051\054\053\001\002\000" +
    "\026\004\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\046\uffcd" +
    "\047\uffcd\052\uffcd\053\uffcd\054\uffcd\001\002\000\012\041" +
    "\263\042\116\044\174\050\262\001\002\000\026\004\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\046\uffcb\047\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\001\002\000\006\041\255\051\204" +
    "\001\002\000\030\004\uffca\012\uffca\013\uffca\014\uffca\015" +
    "\uffca\042\116\046\uffca\047\uffca\052\uffca\053\uffca\054\uffca" +
    "\001\002\000\004\044\246\001\002\000\026\004\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\046\uffcc\047\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\001\002\000\034\004\011\005\112\006" +
    "\100\007\102\010\101\011\113\020\103\030\106\044\107" +
    "\046\110\047\uffaf\052\241\054\053\001\002\000\026\004" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\046\uffc7\047\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\001\002\000\026\004\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\046\uffc9\047\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\001\002\000\026\004\uffa8\012\uffa8\013" +
    "\uffa8\014\uffa8\015\uffa8\046\uffa8\047\uffa8\052\237\053\uffa8" +
    "\054\uffa8\001\002\000\030\002\ufff6\004\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\046\ufff6\047\ufff6\052\ufff6\053\ufff6" +
    "\054\ufff6\001\002\000\006\015\055\047\234\001\002\000" +
    "\004\044\230\001\002\000\030\004\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\046\uffc8\047\uffc8\051\204\052\uffc8\053" +
    "\uffc8\054\uffc8\001\002\000\004\044\073\001\002\000\022" +
    "\004\011\012\065\014\063\015\uffa7\046\045\047\uffa7\053" +
    "\051\054\053\001\002\000\004\047\071\001\002\000\026" +
    "\004\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\046\uffc6\047" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\001\002\000\030\002\ufff3" +
    "\004\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\046\ufff3\047" +
    "\ufff3\052\ufff3\053\ufff3\054\ufff3\001\002\000\006\015\uffa6" +
    "\047\uffa6\001\002\000\030\004\011\005\112\006\100\007" +
    "\102\010\101\011\113\020\103\030\106\044\107\046\110" +
    "\054\053\001\002\000\074\004\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\017\uffeb\020\uffeb\022\uffeb\023\uffeb\026\uffeb" +
    "\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\042\116\043\uffeb\044\174\045\uffeb" +
    "\046\uffeb\047\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\001" +
    "\002\000\070\004\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\017\uffea\020\uffea\022\uffea\023\uffea\026\uffea\027\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\043\uffea\045\uffea\046\uffea\047\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\001\002\000\070\004\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\017\uffed\020\uffed\022\uffed\023" +
    "\uffed\026\uffed\027\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\043\uffed\045\uffed\046" +
    "\uffed\047\uffed\051\uffed\052\uffed\053\uffed\054\uffed\001\002" +
    "\000\072\004\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\017" +
    "\uffe9\020\uffe9\022\uffe9\023\uffe9\026\uffe9\027\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\042\116\043\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\001\002\000\070\004\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6\022\uffd6" +
    "\023\uffd6\026\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\043\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\001" +
    "\002\000\070\004\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\017\uffd4\020\uffd4\022\uffd4\023\uffd4\026\uffd4\027\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\043\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\001\002\000\070\004\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffd7\022\uffd7\023" +
    "\uffd7\026\uffd7\027\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\043\uffd7\045\uffd7\046" +
    "\uffd7\047\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\001\002" +
    "\000\030\004\011\005\112\006\100\007\102\010\101\011" +
    "\113\020\103\030\106\044\107\046\110\054\053\001\002" +
    "\000\070\004\uffec\012\uffec\013\uffec\014\uffec\015\uffec\017" +
    "\uffec\020\uffec\022\uffec\023\uffec\026\uffec\027\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\043\uffec\045\uffec\046\uffec\047\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\001\002\000\070\004\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0\022\ufff0\023\ufff0" +
    "\026\ufff0\027\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\043\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\001\002\000" +
    "\030\004\011\005\112\006\100\007\102\010\101\011\113" +
    "\020\103\030\106\044\107\046\110\054\053\001\002\000" +
    "\030\004\011\005\112\006\100\007\102\010\101\011\113" +
    "\020\103\030\106\044\107\046\110\054\053\001\002\000" +
    "\032\004\011\005\112\006\100\007\102\010\101\011\113" +
    "\020\103\030\106\044\107\046\110\047\ufffb\054\053\001" +
    "\002\000\040\017\136\020\131\022\121\023\122\026\130" +
    "\027\125\031\124\032\135\033\127\034\132\035\133\036" +
    "\120\037\123\040\134\045\156\001\002\000\070\004\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\022" +
    "\uffd5\023\uffd5\026\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\043\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5" +
    "\001\002\000\070\004\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\017\uffd3\020\uffd3\022\uffd3\023\uffd3\026\uffd3\027\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\043\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\001\002\000\072\004\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\017\uffef\020\uffef\022\uffef" +
    "\023\uffef\026\uffef\027\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\042\116\043\uffef" +
    "\045\uffef\046\uffef\047\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\001\002\000\070\004\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\017\ufffe\020\ufffe\022\ufffe\023\ufffe\026\ufffe\027" +
    "\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe" +
    "\037\ufffe\040\ufffe\043\ufffe\045\ufffe\046\ufffe\047\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\001\002\000\030\004\011" +
    "\005\112\006\100\007\102\010\101\011\113\020\103\030" +
    "\106\044\107\046\110\054\053\001\002\000\040\017\136" +
    "\020\131\022\121\023\122\026\130\027\125\031\124\032" +
    "\135\033\127\034\132\035\133\036\120\037\123\040\134" +
    "\043\126\001\002\000\030\004\011\005\112\006\100\007" +
    "\102\010\101\011\113\020\103\030\106\044\107\046\110" +
    "\054\053\001\002\000\030\004\011\005\112\006\100\007" +
    "\102\010\101\011\113\020\103\030\106\044\107\046\110" +
    "\054\053\001\002\000\030\004\011\005\112\006\100\007" +
    "\102\010\101\011\113\020\103\030\106\044\107\046\110" +
    "\054\053\001\002\000\030\004\011\005\112\006\100\007" +
    "\102\010\101\011\113\020\103\030\106\044\107\046\110" +
    "\054\053\001\002\000\030\004\011\005\112\006\100\007" +
    "\102\010\101\011\113\020\103\030\106\044\107\046\110" +
    "\054\053\001\002\000\030\004\011\005\112\006\100\007" +
    "\102\010\101\011\113\020\103\030\106\044\107\046\110" +
    "\054\053\001\002\000\074\004\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9\026\uffd9" +
    "\027\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\116\043\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\001" +
    "\002\000\030\004\011\005\112\006\100\007\102\010\101" +
    "\011\113\020\103\030\106\044\107\046\110\054\053\001" +
    "\002\000\030\004\011\005\112\006\100\007\102\010\101" +
    "\011\113\020\103\030\106\044\107\046\110\054\053\001" +
    "\002\000\030\004\011\005\112\006\100\007\102\010\101" +
    "\011\113\020\103\030\106\044\107\046\110\054\053\001" +
    "\002\000\030\004\011\005\112\006\100\007\102\010\101" +
    "\011\113\020\103\030\106\044\107\046\110\054\053\001" +
    "\002\000\030\004\011\005\112\006\100\007\102\010\101" +
    "\011\113\020\103\030\106\044\107\046\110\054\053\001" +
    "\002\000\030\004\011\005\112\006\100\007\102\010\101" +
    "\011\113\020\103\030\106\044\107\046\110\054\053\001" +
    "\002\000\030\004\011\005\112\006\100\007\102\010\101" +
    "\011\113\020\103\030\106\044\107\046\110\054\053\001" +
    "\002\000\030\004\011\005\112\006\100\007\102\010\101" +
    "\011\113\020\103\030\106\044\107\046\110\054\053\001" +
    "\002\000\070\004\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\017\uffc3\020\uffc3\022\121\023\122\026\130\027\125\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\043\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\001\002\000\070\004\uffba\012\uffba" +
    "\013\uffba\014\uffba\015\uffba\017\136\020\131\022\121\023" +
    "\122\026\130\027\125\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\043\uffba\045\uffba\046" +
    "\uffba\047\uffba\051\uffba\052\uffba\053\uffba\054\uffba\001\002" +
    "\000\070\004\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\017" +
    "\136\020\131\022\121\023\122\026\130\027\125\031\124" +
    "\032\135\033\127\034\132\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\043\uffbd\045\uffbd\046\uffbd\047\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\001\002\000\070\004\uffb7\012\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\017\136\020\131\022\121\023\122" +
    "\026\130\027\125\031\124\032\135\033\127\034\132\035" +
    "\uffb7\036\uffb7\037\123\040\134\043\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\001\002\000" +
    "\070\004\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\017\136" +
    "\020\131\022\121\023\122\026\130\027\125\031\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\043\uffb8\045\uffb8\046\uffb8\047\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\001\002\000\070\004\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\015\uffc2\017\uffc2\020\uffc2\022\121\023\122\026" +
    "\130\027\125\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\043\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\001\002\000\070" +
    "\004\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\020" +
    "\uffbf\022\uffbf\023\uffbf\026\uffbf\027\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\043" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\001\002\000\070\004\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\017\136\020\131\022\121\023\122\026\130" +
    "\027\125\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\043\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\001\002\000\072\004" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8" +
    "\022\uffd8\023\uffd8\026\uffd8\027\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\043\uffd8\045\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\054\uffd8\001\002\000\070\004\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\017\uffbe\020\uffbe\022\uffbe\023\uffbe\026" +
    "\uffbe\027\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\043\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\001\002\000\070" +
    "\004\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\017\136\020" +
    "\131\022\121\023\122\026\130\027\125\031\uffbb\032\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\043" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\001\002\000\070\004\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\017\136\020\131\022\121\023\122\026\130" +
    "\027\125\031\124\032\135\033\127\034\132\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\043\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\001\002\000\070\004" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0\020\uffc0" +
    "\022\uffc0\023\uffc0\026\uffc0\027\uffc0\031\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\043\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\001\002\000\070\004\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\017\uffc1\020\uffc1\022\uffc1\023\uffc1\026\uffc1\027" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\043\uffc1\045\uffc1\046\uffc1\047\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\001\002\000\070\004\uffb6" +
    "\012\uffb6\013\uffb6\014\uffb6\015\uffb6\017\136\020\131\022" +
    "\121\023\122\026\130\027\125\031\124\032\135\033\127" +
    "\034\132\035\133\036\uffb6\037\123\040\134\043\uffb6\045" +
    "\uffb6\046\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6" +
    "\001\002\000\016\004\011\012\065\014\063\046\045\053" +
    "\051\054\053\001\002\000\026\004\uffdb\012\uffdb\013\160" +
    "\014\uffdb\015\uffdb\046\uffdb\047\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\001\002\000\016\004\011\012\065\014\063\046\045" +
    "\053\051\054\053\001\002\000\026\004\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\046\uffda\047\uffda\052\uffda\053\uffda" +
    "\054\uffda\001\002\000\004\047\166\001\002\000\042\017" +
    "\136\020\131\022\121\023\122\026\130\027\125\031\124" +
    "\032\135\033\127\034\132\035\133\036\120\037\123\040" +
    "\134\047\ufffd\051\164\001\002\000\032\004\011\005\112" +
    "\006\100\007\102\010\101\011\113\020\103\030\106\044" +
    "\107\046\110\047\ufffb\054\053\001\002\000\004\047\ufffc" +
    "\001\002\000\072\004\ufffa\012\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa\026\ufffa\027\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\042\ufffa\043\ufffa\045\ufffa\046\ufffa\047\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\054\ufffa\001\002\000\040\017" +
    "\136\020\131\022\121\023\122\026\130\027\125\031\124" +
    "\032\135\033\127\034\132\035\133\036\120\037\123\040" +
    "\134\045\170\001\002\000\070\004\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\026" +
    "\uffe8\027\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\043\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\001\002\000\070" +
    "\004\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4\020" +
    "\uffc4\022\uffc4\023\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\043" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\001\002\000\070\004\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\017\uffc5\020\uffc5\022\uffc5\023\uffc5\026\uffc5" +
    "\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\043\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\054\uffc5\001\002\000\070\004" +
    "\uffff\012\uffff\013\uffff\014\uffff\015\uffff\017\uffff\020\uffff" +
    "\022\uffff\023\uffff\026\uffff\027\uffff\031\uffff\032\uffff\033" +
    "\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\043\uffff" +
    "\045\uffff\046\uffff\047\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\001\002\000\032\004\011\005\112\006\100\007\102" +
    "\010\101\011\113\020\103\030\106\044\107\045\200\046" +
    "\110\054\053\001\002\000\070\004\000\012\000\013\000" +
    "\014\000\015\000\017\000\020\000\022\000\023\000\026" +
    "\000\027\000\031\000\032\000\033\000\034\000\035\000" +
    "\036\000\037\000\040\000\043\000\045\000\046\000\047" +
    "\000\051\000\052\000\053\000\054\000\001\002\000\004" +
    "\045\203\001\002\000\042\017\136\020\131\022\121\023" +
    "\122\026\130\027\125\031\124\032\135\033\127\034\132" +
    "\035\133\036\120\037\123\040\134\045\uffe7\051\201\001" +
    "\002\000\072\004\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\017\uffe4\020\uffe4\022\uffe4\023\uffe4\026\uffe4\027\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\042\uffe4\043\uffe4\045\uffe4\046\uffe4\047\uffe4\051" +
    "\uffe4\052\uffe4\053\uffe4\054\uffe4\001\002\000\030\004\011" +
    "\005\112\006\100\007\102\010\101\011\113\020\103\030" +
    "\106\044\107\046\110\054\053\001\002\000\004\045\uffe6" +
    "\001\002\000\072\004\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\017\uffe5\020\uffe5\022\uffe5\023\uffe5\026\uffe5\027\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\042\uffe5\043\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\001\002\000\006\004" +
    "\011\053\212\001\002\000\004\041\206\001\002\000\006" +
    "\004\011\054\053\001\002\000\004\044\174\001\002\000" +
    "\026\004\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\046\uffa0" +
    "\047\uffa0\052\uffa0\053\uffa0\054\uffa0\001\002\000\004\050" +
    "\216\001\002\000\006\041\uffa3\051\204\001\002\000\006" +
    "\041\uffa5\051\204\001\002\000\004\041\uffa4\001\002\000" +
    "\004\041\uffa2\001\002\000\006\024\035\025\032\001\002" +
    "\000\032\004\uff96\012\uff96\013\uff96\014\uff96\015\uff96\041" +
    "\uff96\046\uff96\047\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\001\002\000\010\041\uff95\042\221\051\uff95\001\002\000" +
    "\032\004\011\005\112\006\100\007\102\010\101\011\113" +
    "\020\103\030\106\043\042\044\107\046\110\054\053\001" +
    "\002\000\032\004\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\041\uffd1\046\uffd1\047\uffd1\051\uffd1\052\uffd1\053\uffd1\054" +
    "\uffd1\001\002\000\006\041\uffd2\051\uffd2\001\002\000\040" +
    "\017\136\020\131\022\121\023\122\026\130\027\125\031" +
    "\124\032\135\033\127\034\132\035\133\036\120\037\123" +
    "\040\134\043\225\001\002\000\034\004\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\041\uffd0\042\221\046\uffd0\047\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\054\uffd0\001\002\000\032\004" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\041\uffcf\046\uffcf" +
    "\047\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\001\002\000" +
    "\032\004\uffce\012\uffce\013\uffce\014\uffce\015\uffce\041\uffce" +
    "\046\uffce\047\uffce\051\uffce\052\uffce\053\uffce\054\uffce\001" +
    "\002\000\030\004\011\005\112\006\100\007\102\010\101" +
    "\011\113\020\103\030\106\044\107\046\110\054\053\001" +
    "\002\000\040\017\136\020\131\022\121\023\122\026\130" +
    "\027\125\031\124\032\135\033\127\034\132\035\133\036" +
    "\120\037\123\040\134\045\232\001\002\000\016\004\011" +
    "\012\065\014\063\046\045\053\051\054\053\001\002\000" +
    "\026\004\uff93\012\uff93\013\uff93\014\uff93\015\uff93\046\uff93" +
    "\047\uff93\052\uff93\053\uff93\054\uff93\001\002\000\030\002" +
    "\ufff5\004\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\046\ufff5" +
    "\047\ufff5\052\ufff5\053\ufff5\054\ufff5\001\002\000\004\047" +
    "\236\001\002\000\030\002\ufff4\004\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\046\ufff4\047\ufff4\052\ufff4\053\ufff4\054" +
    "\ufff4\001\002\000\026\004\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\046\uffa9\047\uffa9\052\uffa9\053\uffa9\054\uffa9\001" +
    "\002\000\006\047\uffae\052\245\001\002\000\004\047\uffad" +
    "\001\002\000\044\017\136\020\131\022\121\023\122\026" +
    "\130\027\125\031\124\032\135\033\127\034\132\035\133" +
    "\036\120\037\123\040\134\047\uffb1\051\243\052\uffb1\001" +
    "\002\000\030\004\011\005\112\006\100\007\102\010\101" +
    "\011\113\020\103\030\106\044\107\046\110\054\053\001" +
    "\002\000\006\047\uffb0\052\uffb0\001\002\000\004\047\uffac" +
    "\001\002\000\030\004\011\005\112\006\100\007\102\010" +
    "\101\011\113\020\103\030\106\044\107\046\110\054\053" +
    "\001\002\000\040\017\136\020\131\022\121\023\122\026" +
    "\130\027\125\031\124\032\135\033\127\034\132\035\133" +
    "\036\120\037\123\040\134\045\250\001\002\000\072\004" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\020\uffe3" +
    "\022\uffe3\023\uffe3\026\uffe3\027\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3" +
    "\043\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\054\uffe3\001\002\000\004\041\252\001\002\000\030" +
    "\004\011\005\112\006\100\007\102\010\101\011\113\020" +
    "\103\030\106\044\107\046\110\054\053\001\002\000\062" +
    "\004\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\017\136\020" +
    "\131\022\121\023\122\026\130\027\125\031\124\032\135" +
    "\033\127\034\132\035\133\036\120\037\123\040\134\046" +
    "\ufff7\047\ufff7\052\ufff7\053\ufff7\054\ufff7\001\002\000\004" +
    "\041\257\001\002\000\006\004\011\054\053\001\002\000" +
    "\026\004\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\046\uff9f" +
    "\047\uff9f\052\uff9f\053\uff9f\054\uff9f\001\002\000\006\004" +
    "\011\054\053\001\002\000\026\004\uffa1\012\uffa1\013\uffa1" +
    "\014\uffa1\015\uffa1\046\uffa1\047\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\001\002\000\004\041\272\001\002\000\006\024\035" +
    "\025\032\001\002\000\030\004\011\005\112\006\100\007" +
    "\102\010\101\011\113\020\103\030\106\044\107\046\110" +
    "\054\053\001\002\000\062\004\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\017\136\020\131\022\121\023\122\026\130" +
    "\027\125\031\124\032\135\033\127\034\132\035\133\036" +
    "\120\037\123\040\134\046\ufff9\047\ufff9\052\ufff9\053\ufff9" +
    "\054\ufff9\001\002\000\034\004\uff95\012\uff95\013\uff95\014" +
    "\uff95\015\uff95\041\uff9e\042\221\046\uff95\047\uff95\051\uff95" +
    "\052\uff95\053\uff95\054\uff95\001\002\000\004\041\267\001" +
    "\002\000\030\004\011\005\112\006\100\007\102\010\101" +
    "\011\113\020\103\030\106\044\107\046\110\054\053\001" +
    "\002\000\062\004\uff94\012\uff94\013\uff94\014\uff94\015\uff94" +
    "\017\136\020\131\022\121\023\122\026\130\027\125\031" +
    "\124\032\135\033\127\034\132\035\133\036\120\037\123" +
    "\040\134\046\uff94\047\uff94\052\uff94\053\uff94\054\uff94\001" +
    "\002\000\032\004\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\041\uffee\046\uffd2\047\uffd2\051\uffd2\052\uffd2\053\uffd2\054" +
    "\uffd2\001\002\000\030\004\011\005\112\006\100\007\102" +
    "\010\101\011\113\020\103\030\106\044\107\046\110\054" +
    "\053\001\002\000\062\004\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\017\136\020\131\022\121\023\122\026\130\027" +
    "\125\031\124\032\135\033\127\034\132\035\133\036\120" +
    "\037\123\040\134\046\ufff8\047\ufff8\052\ufff8\053\ufff8\054" +
    "\ufff8\001\002\000\006\046\uffaa\050\027\001\002\000\004" +
    "\046\045\001\002\000\006\002\uffe1\004\uffe1\001\002\000" +
    "\006\024\035\025\032\001\002\000\006\045\uffde\051\301" +
    "\001\002\000\004\004\011\001\002\000\004\045\uffdd\001" +
    "\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\014\016\004\017\011\021\003\031\007\043" +
    "\006\001\001\000\002\001\001\000\010\016\004\017\020" +
    "\021\003\001\001\000\004\021\014\001\001\000\010\016" +
    "\004\017\013\021\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\016\001\001\000\004\043\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\023\021\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\025\001\001\000\004\006\043\001" +
    "\001\000\012\011\027\030\032\041\033\042\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\027\030\032\041\033\042\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\005\045\006\056\015\051\021\046\022\053\027\057" +
    "\033\066\035\065\036\061\040\067\044\063\045\055\046" +
    "\047\001\001\000\002\001\001\000\004\023\260\001\001" +
    "\000\002\001\001\000\004\037\253\001\001\000\004\023" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\074\004\113\010\075\012\241\013\103\015\076\021" +
    "\073\024\104\032\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\234\001\001\000\002\001\001\000\004\037\204\001\001" +
    "\000\002\001\001\000\032\005\045\006\056\015\051\021" +
    "\046\022\053\027\057\035\065\036\071\040\067\044\063" +
    "\045\055\046\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\074" +
    "\004\113\010\075\012\110\013\103\015\076\021\073\024" +
    "\104\001\001\000\004\023\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\074" +
    "\004\113\010\075\012\171\013\103\015\076\021\073\024" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\002\074\004\113\010\075\012\170\013\103\015\076\021" +
    "\073\024\104\001\001\000\022\002\074\004\113\010\075" +
    "\012\166\013\103\015\076\021\073\024\104\001\001\000" +
    "\024\002\074\003\161\004\113\010\075\012\162\013\103" +
    "\015\076\021\073\024\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\114\001\001" +
    "\000\002\001\001\000\022\002\074\004\113\010\075\012" +
    "\116\013\103\015\076\021\073\024\104\001\001\000\002" +
    "\001\001\000\022\002\074\004\113\010\075\012\154\013" +
    "\103\015\076\021\073\024\104\001\001\000\022\002\074" +
    "\004\113\010\075\012\153\013\103\015\076\021\073\024" +
    "\104\001\001\000\022\002\074\004\113\010\075\012\152" +
    "\013\103\015\076\021\073\024\104\001\001\000\022\002" +
    "\074\004\113\010\075\012\151\013\103\015\076\021\073" +
    "\024\104\001\001\000\022\002\074\004\113\010\075\012" +
    "\150\013\103\015\076\021\073\024\104\001\001\000\022" +
    "\002\074\004\113\010\075\012\147\013\103\015\076\021" +
    "\073\024\104\001\001\000\004\023\146\001\001\000\022" +
    "\002\074\004\113\010\075\012\145\013\103\015\076\021" +
    "\073\024\104\001\001\000\022\002\074\004\113\010\075" +
    "\012\144\013\103\015\076\021\073\024\104\001\001\000" +
    "\022\002\074\004\113\010\075\012\143\013\103\015\076" +
    "\021\073\024\104\001\001\000\022\002\074\004\113\010" +
    "\075\012\142\013\103\015\076\021\073\024\104\001\001" +
    "\000\022\002\074\004\113\010\075\012\141\013\103\015" +
    "\076\021\073\024\104\001\001\000\022\002\074\004\113" +
    "\010\075\012\140\013\103\015\076\021\073\024\104\001" +
    "\001\000\022\002\074\004\113\010\075\012\137\013\103" +
    "\015\076\021\073\024\104\001\001\000\022\002\074\004" +
    "\113\010\075\012\136\013\103\015\076\021\073\024\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\045\006\056\015\051\021\046\022\053\027\057\035\156" +
    "\040\067\044\063\045\055\046\047\001\001\000\002\001" +
    "\001\000\030\005\045\006\056\015\051\021\046\022\053" +
    "\027\057\035\160\040\067\044\063\045\055\046\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\074\003\164\004\113\010\075\012\162\013" +
    "\103\015\076\021\073\024\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\074\004\113\010\075\012\176\013\103\014\175\015" +
    "\076\021\073\024\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\074\004\113\010\075\012\176\013\103\014\201\015\076" +
    "\021\073\024\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\210\044\212\001\001\000\002\001\001" +
    "\000\006\015\207\021\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\214\001\001" +
    "\000\004\037\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\216\030\217\001\001\000\002\001\001" +
    "\000\006\007\222\026\221\001\001\000\022\002\074\004" +
    "\113\010\075\012\223\013\103\015\076\021\073\024\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\226\026\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\074\004\113\010\075\012" +
    "\230\013\103\015\076\021\073\024\104\001\001\000\002" +
    "\001\001\000\030\005\045\006\056\015\051\021\046\022" +
    "\053\027\057\035\232\040\067\044\063\045\055\046\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\002\074\004" +
    "\113\010\075\012\241\013\103\015\076\021\073\024\104" +
    "\032\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\002\074\004\113\010\075\012\246\013\103\015\076" +
    "\021\073\024\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\074\004\113\010\075" +
    "\012\252\013\103\015\076\021\073\024\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\255\021\206" +
    "\001\001\000\002\001\001\000\006\015\257\021\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\027" +
    "\025\216\030\264\041\265\001\001\000\022\002\074\004" +
    "\113\010\075\012\263\013\103\015\076\021\073\024\104" +
    "\001\001\000\002\001\001\000\006\007\270\026\221\001" +
    "\001\000\002\001\001\000\022\002\074\004\113\010\075" +
    "\012\267\013\103\015\076\021\073\024\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\074\004\113" +
    "\010\075\012\272\013\103\015\076\021\073\024\104\001" +
    "\001\000\002\001\001\000\004\034\274\001\001\000\004" +
    "\006\275\001\001\000\002\001\001\000\010\011\027\030" +
    "\032\041\277\001\001\000\002\001\001\000\006\020\301" +
    "\021\022\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


 
  public void report_fatal_error(String msg, Object info) {
    report_error(msg, info);
  }

  public void report_error(String msg, Object info) {
    Main.setToken((java_cup.runtime.Symbol)info);
    Main.handleSyntaxError("Syntax error: unexpected ");
  }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 110. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Program start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // array_element ::= identifier indexed_brackets 
            {
                ArrayElement RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new ArrayElement(id, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // array_element ::= function_call indexed_brackets 
            {
                ArrayElement RESULT = null;
                int fcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionCall fc = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionCall> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new ArrayElement(fc, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // array_element ::= array_literal indexed_brackets 
            {
                ArrayElement RESULT = null;
                int alleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int alright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayLiteral al = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayLiteral> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new ArrayElement(al, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // array_element_list ::= expr 
            {
                ArrayElementList RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ArrayElementList(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // array_element_list ::= expr COMMA array_element_list 
            {
                ArrayElementList RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int aelleft = CUP$parser$stack.peek().left;
                int aelright = CUP$parser$stack.peek().right;
                ArrayElementList ael = CUP$parser$stack.peek().<ArrayElementList> value();
                 RESULT = new ArrayElementList(e,ael); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // array_element_list ::= 
            {
                ArrayElementList RESULT = null;
                 RESULT = new ArrayElementList(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // array_literal ::= OPEN_BRACE array_element_list CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int obleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int obright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object ob = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int aelleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aelright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayElementList ael = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayElementList> value();
                 RESULT = new ArrayLiteral(ael, obleft, obright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literal",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // assignment_stmt ::= identifier GETS expr 
            {
                AssignmentStmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(id, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // assignment_stmt ::= identifier indexed_brackets GETS expr 
            {
                AssignmentStmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int ibleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ibright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                IndexedBrackets ib = CUP$parser$stack.elementAt(CUP$parser$top-2).<IndexedBrackets> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(id, ib, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",3, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // assignment_stmt ::= function_call indexed_brackets GETS expr 
            {
                AssignmentStmt RESULT = null;
                int fcleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int fcright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                FunctionCall fc = CUP$parser$stack.elementAt(CUP$parser$top-3).<FunctionCall> value();
                int ibleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ibright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                IndexedBrackets ib = CUP$parser$stack.elementAt(CUP$parser$top-2).<IndexedBrackets> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(fc, ib, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",3, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // block_stmt ::= OPEN_BRACE CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                 RESULT = new BlockStmt(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // block_stmt ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                StmtList sl = CUP$parser$stack.elementAt(CUP$parser$top-1).<StmtList> value();
                 RESULT = new BlockStmt(sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // block_stmt ::= OPEN_BRACE stmt_list return_stmt CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                StmtList sl = CUP$parser$stack.elementAt(CUP$parser$top-2).<StmtList> value();
                int rsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnStmt rs = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnStmt> value();
                 RESULT = new BlockStmt(sl, rs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // block_stmt ::= OPEN_BRACE return_stmt CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int rsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnStmt rs = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnStmt> value();
                 RESULT = new BlockStmt(rs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // brackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
                Brackets RESULT = null;
                 RESULT = new Brackets(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // brackets ::= OPEN_BRACKET CLOSE_BRACKET brackets 
            {
                Brackets RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new Brackets(b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",5, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // constant ::= literal 
            {
                Constant RESULT = null;
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Literal l = CUP$parser$stack.peek().<Literal> value();
                 RESULT = l; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // constant ::= array_literal 
            {
                Constant RESULT = null;
                int alleft = CUP$parser$stack.peek().left;
                int alright = CUP$parser$stack.peek().right;
                ArrayLiteral al = CUP$parser$stack.peek().<ArrayLiteral> value();
                 RESULT = al; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // empty_array_type ::= primitive_type brackets 
            {
                EmptyArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new EmptyArrayType(pt, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("empty_array_type",7, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // expr ::= constant 
            {
                Expr RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Constant c = CUP$parser$stack.peek().<Constant> value();
                 RESULT = c; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // expr ::= op_expr 
            {
                Expr RESULT = null;
                int oeleft = CUP$parser$stack.peek().left;
                int oeright = CUP$parser$stack.peek().right;
                Expr oe = CUP$parser$stack.peek().<Expr> value();
                 RESULT = oe; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // expr ::= identifier 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = id; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // expr ::= array_element 
            {
                Expr RESULT = null;
                int aeleft = CUP$parser$stack.peek().left;
                int aeright = CUP$parser$stack.peek().right;
                ArrayElement ae = CUP$parser$stack.peek().<ArrayElement> value();
                 RESULT = ae; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // expr ::= function_call 
            {
                Expr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 expression.setSurroundedParentheses(); RESULT = expression; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // function_arg ::= expr 
            {
                FunctionArg RESULT = null;
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new FunctionArg(expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // function_arg ::= expr COMMA function_arg 
            {
                FunctionArg RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int faleft = CUP$parser$stack.peek().left;
                int faright = CUP$parser$stack.peek().right;
                FunctionArg fa = CUP$parser$stack.peek().<FunctionArg> value();
                 RESULT = new FunctionArg(expression, fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // function_call ::= identifier OPEN_PAREN function_arg CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int faleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int faright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionArg fa = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionArg> value();
                 RESULT = new FunctionCall(id, fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",11, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // function_call ::= identifier OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                 RESULT = new FunctionCall(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // function_call ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int lleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int lright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Object l = CUP$parser$stack.elementAt(CUP$parser$top-3).<Object> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new FunctionCall(e, lleft, lright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",11, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // function_decl ::= identifier OPEN_PAREN CLOSE_PAREN return_type block_stmt 
            {
                FunctionDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int rtleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rtright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnType rt = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnType> value();
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = new FunctionDecl(id, rt, bs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",12, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // function_decl ::= identifier OPEN_PAREN function_param CLOSE_PAREN return_type block_stmt 
            {
                FunctionDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-5).<Identifier> value();
                int fpleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int fpright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                FunctionParam fp = CUP$parser$stack.elementAt(CUP$parser$top-3).<FunctionParam> value();
                int rtleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rtright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnType rt = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnType> value();
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = new FunctionDecl(id, fp, rt, bs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",12, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // function_decl_list ::= function_decl function_decl_list 
            {
                FunctionDeclList RESULT = null;
                int fdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionDecl fd = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionDecl> value();
                int fdlleft = CUP$parser$stack.peek().left;
                int fdlright = CUP$parser$stack.peek().right;
                FunctionDeclList fdl = CUP$parser$stack.peek().<FunctionDeclList> value();
                 RESULT = new FunctionDeclList(fd, fdl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl_list",13, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // function_decl_list ::= function_decl 
            {
                FunctionDeclList RESULT = null;
                int fdleft = CUP$parser$stack.peek().left;
                int fdright = CUP$parser$stack.peek().right;
                FunctionDecl fd = CUP$parser$stack.peek().<FunctionDecl> value();
                 RESULT = new FunctionDeclList(fd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl_list",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // function_param ::= identifier COLON type 
            {
                FunctionParam RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new FunctionParam(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // function_param ::= identifier COLON type COMMA function_param 
            {
                FunctionParam RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int fpleft = CUP$parser$stack.peek().left;
                int fpright = CUP$parser$stack.peek().right;
                FunctionParam fp = CUP$parser$stack.peek().<FunctionParam> value();
                 RESULT = new FunctionParam(id, t, fp); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",14, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // identifier ::= IDENTIFIER 
            {
                Identifier RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Identifier(id, idleft, idright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                IfStmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new IfStmt(e, s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt ELSE stmt 
            {
                IfStmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-4).<Expr> value();
                int s1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int s1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Stmt s1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Stmt> value();
                int s2left = CUP$parser$stack.peek().left;
                int s2right = CUP$parser$stack.peek().right;
                Stmt s2 = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new IfStmt(e, s1, s2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // indexed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                IndexedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new IndexedBrackets(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexed_brackets",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // indexed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET indexed_brackets 
            {
                IndexedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new IndexedBrackets(e, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexed_brackets",17, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // literal ::= INTEGER_LITERAL 
            {
                Literal RESULT = null;
                int illeft = CUP$parser$stack.peek().left;
                int ilright = CUP$parser$stack.peek().right;
                String il = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(il, 0, illeft, ilright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // literal ::= CHARACTER_LITERAL 
            {
                Literal RESULT = null;
                int clleft = CUP$parser$stack.peek().left;
                int clright = CUP$parser$stack.peek().right;
                String cl = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(cl, 2, clleft, clright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // literal ::= STRING_LITERAL 
            {
                Literal RESULT = null;
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                String sl = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(sl, 1, slleft, slright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // literal ::= TRUE 
            {
                Literal RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Boolean t = CUP$parser$stack.peek().<Boolean> value();
                 RESULT = new Literal(true, tleft, tright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // literal ::= FALSE 
            {
                Literal RESULT = null;
                int fleft = CUP$parser$stack.peek().left;
                int fright = CUP$parser$stack.peek().right;
                Boolean f = CUP$parser$stack.peek().<Boolean> value();
                 RESULT = new Literal(false, fleft, fright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // mixed_array_type ::= primitive_type brackets 
            {
                MixedArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new MixedArrayType(pt, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_array_type",19, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // mixed_array_type ::= primitive_type mixed_brackets 
            {
                MixedArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int mbleft = CUP$parser$stack.peek().left;
                int mbright = CUP$parser$stack.peek().right;
                MixedBrackets mb = CUP$parser$stack.peek().<MixedBrackets> value();
                 RESULT = new MixedArrayType(pt, mb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_array_type",19, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new MixedBrackets(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET mixed_brackets 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int mbleft = CUP$parser$stack.peek().left;
                int mbright = CUP$parser$stack.peek().right;
                MixedBrackets mb = CUP$parser$stack.peek().<MixedBrackets> value();
                 RESULT = new MixedBrackets(e, mb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",20, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET brackets 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new MixedBrackets(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",20, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // naked_stmt ::= assignment_stmt 
            {
                NakedStmt RESULT = null;
                int assleft = CUP$parser$stack.peek().left;
                int assright = CUP$parser$stack.peek().right;
                AssignmentStmt ass = CUP$parser$stack.peek().<AssignmentStmt> value();
                 RESULT = ass; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // naked_stmt ::= if_stmt 
            {
                NakedStmt RESULT = null;
                int isleft = CUP$parser$stack.peek().left;
                int isright = CUP$parser$stack.peek().right;
                IfStmt is = CUP$parser$stack.peek().<IfStmt> value();
                 RESULT = is; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // naked_stmt ::= while_stmt 
            {
                NakedStmt RESULT = null;
                int wsleft = CUP$parser$stack.peek().left;
                int wsright = CUP$parser$stack.peek().right;
                WhileStmt ws = CUP$parser$stack.peek().<WhileStmt> value();
                 RESULT = ws; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // naked_stmt ::= function_call 
            {
                NakedStmt RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // naked_stmt ::= block_stmt 
            {
                NakedStmt RESULT = null;
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = bs; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // naked_stmt ::= var_decl 
            {
                NakedStmt RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = vd; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // naked_stmt ::= var_init 
            {
                NakedStmt RESULT = null;
                int vileft = CUP$parser$stack.peek().left;
                int viright = CUP$parser$stack.peek().right;
                VarInit vi = CUP$parser$stack.peek().<VarInit> value();
                 RESULT = vi; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // naked_stmt ::= tuple_init 
            {
                NakedStmt RESULT = null;
                int tileft = CUP$parser$stack.peek().left;
                int tiright = CUP$parser$stack.peek().right;
                TupleInit ti = CUP$parser$stack.peek().<TupleInit> value();
                 RESULT = ti; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // op_expr ::= MINUS expr 
            {
                Expr RESULT = null;
                int mleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int mright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object m = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(e, UnaryOp.INT_NEG, mleft, mright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // op_expr ::= NOT expr 
            {
                Expr RESULT = null;
                int nleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int nright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object n = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(e, UnaryOp.LOG_NEG, nleft, nright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // op_expr ::= expr PLUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.PLUS); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // op_expr ::= expr MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.MINUS); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // op_expr ::= expr TIMES expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.TIMES); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // op_expr ::= expr HIGH_MULT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.HIGH_MULT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // op_expr ::= expr DIVIDE expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.DIVIDE); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // op_expr ::= expr MODULO expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.MODULO); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // op_expr ::= expr NOT_EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.NOT_EQUAL); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // op_expr ::= expr EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.EQUAL); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // op_expr ::= expr LT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.LT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // op_expr ::= expr LEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.LEQ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // op_expr ::= expr GT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.GT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // op_expr ::= expr GEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.GEQ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // op_expr ::= expr AND expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.AND); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // op_expr ::= expr OR expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.OR); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // primitive_type ::= INT 
            {
                PrimitiveType RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Object i = CUP$parser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(0); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // primitive_type ::= BOOL 
            {
                PrimitiveType RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // program ::= function_decl_list 
            {
                Program RESULT = null;
                int fdlleft = CUP$parser$stack.peek().left;
                int fdlright = CUP$parser$stack.peek().right;
                FunctionDeclList fdl = CUP$parser$stack.peek().<FunctionDeclList> value();
                 RESULT = new Program(fdl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",23, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // program ::= use_id function_decl_list 
            {
                Program RESULT = null;
                int useidcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int useidcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                UseId useidc = CUP$parser$stack.elementAt(CUP$parser$top-1).<UseId> value();
                int fdlleft = CUP$parser$stack.peek().left;
                int fdlright = CUP$parser$stack.peek().right;
                FunctionDeclList fdl = CUP$parser$stack.peek().<FunctionDeclList> value();
                 RESULT = new Program(useidc, fdl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",23, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // return_list ::= expr 
            {
                ReturnList RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ReturnList(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // return_list ::= expr COMMA return_list 
            {
                ReturnList RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int rlleft = CUP$parser$stack.peek().left;
                int rlright = CUP$parser$stack.peek().right;
                ReturnList rl = CUP$parser$stack.peek().<ReturnList> value();
                 RESULT = new ReturnList(e, rl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // return_stmt ::= RETURN 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.peek().left;
                int rright = CUP$parser$stack.peek().right;
                Object r = CUP$parser$stack.peek().<Object> value();
                 RESULT = new ReturnStmt(rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // return_stmt ::= RETURN return_list 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int rlleft = CUP$parser$stack.peek().left;
                int rlright = CUP$parser$stack.peek().right;
                ReturnList rl = CUP$parser$stack.peek().<ReturnList> value();
                 RESULT = new ReturnStmt(rl, rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // return_stmt ::= RETURN SEMICOLON 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = new ReturnStmt(rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // return_stmt ::= RETURN return_list SEMICOLON 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int rlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnList rl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnList> value();
                 RESULT = new ReturnStmt(rl, rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",25, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // return_type ::= COLON type_list 
            {
                ReturnType RESULT = null;
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                TypeList tl = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new ReturnType(tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",26, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // return_type ::= 
            {
                ReturnType RESULT = null;
                 RESULT = new ReturnType(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",26, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // stmt ::= naked_stmt SEMICOLON 
            {
                Stmt RESULT = null;
                int nsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int nsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                NakedStmt ns = CUP$parser$stack.elementAt(CUP$parser$top-1).<NakedStmt> value();
                 RESULT = new Stmt(ns, true, nsleft, nsright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",27, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // stmt ::= naked_stmt 
            {
                Stmt RESULT = null;
                int nsleft = CUP$parser$stack.peek().left;
                int nsright = CUP$parser$stack.peek().right;
                NakedStmt ns = CUP$parser$stack.peek().<NakedStmt> value();
                 RESULT = new Stmt(ns, false, nsleft, nsright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // stmt_list ::= stmt 
            {
                StmtList RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new StmtList(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // stmt_list ::= stmt stmt_list 
            {
                StmtList RESULT = null;
                int sleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Stmt s = CUP$parser$stack.elementAt(CUP$parser$top-1).<Stmt> value();
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                StmtList sl = CUP$parser$stack.peek().<StmtList> value();
                 RESULT = new StmtList(s, sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",28, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // tuple_decl_list ::= COMMA var_decl 
            {
                TupleDeclList RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new TupleDeclList(vd, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",29, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // tuple_decl_list ::= COMMA var_decl tuple_decl_list 
            {
                TupleDeclList RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl> value();
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                TupleDeclList tdl = CUP$parser$stack.peek().<TupleDeclList> value();
                 RESULT = new TupleDeclList(vd, tdl, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",29, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // tuple_decl_list ::= COMMA UNDERSCORE 
            {
                TupleDeclList RESULT = null;
                 RESULT = new TupleDeclList(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",29, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // tuple_decl_list ::= COMMA UNDERSCORE tuple_decl_list 
            {
                TupleDeclList RESULT = null;
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                TupleDeclList tdl = CUP$parser$stack.peek().<TupleDeclList> value();
                 RESULT = new TupleDeclList(tdl, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",29, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // tuple_init ::= UNDERSCORE tuple_decl_list GETS function_call 
            {
                TupleInit RESULT = null;
                int tdlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TupleDeclList tdl = CUP$parser$stack.elementAt(CUP$parser$top-2).<TupleDeclList> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(tdl, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",30, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // tuple_init ::= var_decl tuple_decl_list GETS function_call 
            {
                TupleInit RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-3).<VarDecl> value();
                int tdlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TupleDeclList tdl = CUP$parser$stack.elementAt(CUP$parser$top-2).<TupleDeclList> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(vd, tdl, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",30, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // tuple_init ::= UNDERSCORE GETS function_call 
            {
                TupleInit RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",30, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // type ::= primitive_type 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                PrimitiveType pt = CUP$parser$stack.peek().<PrimitiveType> value();
                 RESULT = pt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // type ::= empty_array_type 
            {
                Type RESULT = null;
                int atleft = CUP$parser$stack.peek().left;
                int atright = CUP$parser$stack.peek().right;
                EmptyArrayType at = CUP$parser$stack.peek().<EmptyArrayType> value();
                 RESULT = at; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // type_list ::= type 
            {
                TypeList RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new TypeList(t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",32, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // type_list ::= type COMMA type_list 
            {
                TypeList RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                TypeList tl = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new TypeList(t, tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // use_id ::= USE identifier 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new UseId(id, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",33, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // use_id ::= USE identifier SEMICOLON 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                 RESULT = new UseId(id, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",33, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // use_id ::= USE identifier use_id 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int uileft = CUP$parser$stack.peek().left;
                int uiright = CUP$parser$stack.peek().right;
                UseId ui = CUP$parser$stack.peek().<UseId> value();
                 RESULT = new UseId(id, ui, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",33, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // use_id ::= USE identifier SEMICOLON use_id 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int uileft = CUP$parser$stack.peek().left;
                int uiright = CUP$parser$stack.peek().right;
                UseId ui = CUP$parser$stack.peek().<UseId> value();
                 RESULT = new UseId(id, ui, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",33, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // var_decl ::= identifier COLON mixed_array_type 
            {
                VarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int matleft = CUP$parser$stack.peek().left;
                int matright = CUP$parser$stack.peek().right;
                MixedArrayType mat = CUP$parser$stack.peek().<MixedArrayType> value();
                 RESULT = new VarDecl(id, mat); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",34, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // var_decl ::= identifier COLON primitive_type 
            {
                VarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                PrimitiveType pt = CUP$parser$stack.peek().<PrimitiveType> value();
                 RESULT = new VarDecl(id, pt); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",34, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // var_init ::= identifier COLON type GETS expr 
            {
                VarInit RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new VarInit(id, t, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_init",35, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // while_stmt ::= WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                WhileStmt RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new WhileStmt(expression, s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",36, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
