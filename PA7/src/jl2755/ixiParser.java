
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package jl2755;

import jl2755.ast.*;
import java.io.IOException;

/** CUP v0.11b 20150326 generated parser.
  */
public class ixiParser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public ixiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ixiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public ixiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\004\004\000\002\004\002\000\002\003\007" +
    "\000\002\003\011\000\002\005\004\000\002\006\005\000" +
    "\002\006\007\000\002\007\003\000\002\010\003\000\002" +
    "\011\006\000\002\011\007\000\002\012\004\000\002\012" +
    "\003\000\002\012\004\000\002\012\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\004\000\002\014\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\003\000\002\016\005" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\006\004\007\055\006\001\002\000\004\044" +
    "\031\001\002\000\010\002\ufff0\004\007\055\006\001\002" +
    "\000\004\004\007\001\002\000\026\002\ufff7\004\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\055\ufff7" +
    "\056\ufff7\001\002\000\004\002\014\001\002\000\004\002" +
    "\ufff6\001\002\000\010\002\ufff2\004\007\055\006\001\002" +
    "\000\004\002\ufff3\001\002\000\004\002\001\001\002\000" +
    "\006\046\017\056\016\001\002\000\004\004\007\001\002" +
    "\000\006\004\007\047\ufffd\001\002\000\004\047\023\001" +
    "\002\000\006\004\007\047\ufffd\001\002\000\004\047\ufffe" +
    "\001\002\000\010\002\ufffc\004\ufffc\055\ufffc\001\002\000" +
    "\004\046\025\001\002\000\006\004\007\047\ufffd\001\002" +
    "\000\004\047\027\001\002\000\010\002\ufffb\004\ufffb\055" +
    "\ufffb\001\002\000\004\002\ufff1\001\002\000\006\004\007" +
    "\045\034\001\002\000\004\050\056\001\002\000\004\045" +
    "\054\001\002\000\014\002\uffec\004\uffec\047\uffec\050\036" +
    "\055\uffec\001\002\000\012\002\ufff5\004\ufff5\047\ufff5\055" +
    "\ufff5\001\002\000\010\004\007\024\045\025\042\001\002" +
    "\000\016\002\uffe9\004\uffe9\045\uffe9\047\uffe9\051\uffe9\055" +
    "\uffe9\001\002\000\012\002\uffed\004\uffed\047\uffed\055\uffed" +
    "\001\002\000\016\002\uffea\004\uffea\045\uffea\047\uffea\051" +
    "\uffea\055\uffea\001\002\000\020\002\uffee\004\uffee\042\uffee" +
    "\045\uffee\047\uffee\051\uffee\055\uffee\001\002\000\020\002" +
    "\uffeb\004\uffeb\042\050\045\uffeb\047\uffeb\051\uffeb\055\uffeb" +
    "\001\002\000\014\002\uffe8\004\uffe8\047\uffe8\051\046\055" +
    "\uffe8\001\002\000\020\002\uffef\004\uffef\042\uffef\045\uffef" +
    "\047\uffef\051\uffef\055\uffef\001\002\000\010\004\007\024" +
    "\045\025\042\001\002\000\012\002\uffe7\004\uffe7\047\uffe7" +
    "\055\uffe7\001\002\000\004\043\052\001\002\000\016\002" +
    "\ufffa\004\ufffa\045\ufffa\047\ufffa\051\ufffa\055\ufffa\001\002" +
    "\000\020\002\000\004\000\042\050\045\000\047\000\051" +
    "\000\055\000\001\002\000\016\002\uffff\004\uffff\045\uffff" +
    "\047\uffff\051\uffff\055\uffff\001\002\000\014\002\uffec\004" +
    "\uffec\047\uffec\050\036\055\uffec\001\002\000\012\002\ufff4" +
    "\004\ufff4\047\ufff4\055\ufff4\001\002\000\010\004\007\024" +
    "\045\025\042\001\002\000\006\045\ufff9\051\060\001\002" +
    "\000\004\004\007\001\002\000\004\045\ufff8\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\014\003\004\007\003\010\007\011\011\012" +
    "\010\001\001\000\002\001\001\000\012\003\004\007\003" +
    "\011\011\012\027\001\001\000\004\007\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\004\007\003\011\011\012\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\023" +
    "\001\001\000\010\004\017\007\003\011\020\001\001\000" +
    "\002\001\001\000\010\004\021\007\003\011\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\025\007\003\011\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\032\007" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\034\001\001\000\002\001\001\000\014\005\040\007" +
    "\036\013\042\015\043\016\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\040\007\036\013\042\015\043\016\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\052\001\001\000\002\001\001\000\004\014" +
    "\054\001\001\000\002\001\001\000\012\005\040\007\036" +
    "\013\042\015\056\001\001\000\002\001\001\000\006\006" +
    "\060\007\031\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ixiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$ixiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ixiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


 
  public void report_fatal_error(String msg, Object info) {
    report_error(msg, info);
  }

  public void report_error(String msg, Object info) {
    Main.setToken((java_cup.runtime.Symbol)info);
    Main.handleSyntaxError("Syntax error: unexpected ");
  }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ixiParser$actions {
    private final ixiParser parser;

    /** Constructor */
    CUP$ixiParser$actions(ixiParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 26. */
    public final java_cup.runtime.Symbol CUP$ixiParser$do_action_part00000000(
            int                        CUP$ixiParser$act_num,
            java_cup.runtime.lr_parser CUP$ixiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$ixiParser$stack,
            int                        CUP$ixiParser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$ixiParser$result;

        /* select the action based on the action number */
        switch (CUP$ixiParser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= interface EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).left;
                int start_valright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).right;
                Interface start_val = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).<Interface> value();
                RESULT = start_val;
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1), CUP$ixiParser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$ixiParser$parser.done_parsing();
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // brackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
                Brackets RESULT = null;
                 RESULT = new Brackets(); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("brackets",0, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // brackets ::= OPEN_BRACKET CLOSE_BRACKET brackets 
            {
                Brackets RESULT = null;
                int bleft = CUP$ixiParser$stack.peek().left;
                int bright = CUP$ixiParser$stack.peek().right;
                Brackets b = CUP$ixiParser$stack.peek().<Brackets> value();
                 RESULT = new Brackets(b); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("brackets",0, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // class_body ::= interface_func class_body 
            {
                InterfaceClassBody RESULT = null;
                int ifdleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).left;
                int ifdright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).right;
                InterfaceFunc ifd = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).<InterfaceFunc> value();
                int cbleft = CUP$ixiParser$stack.peek().left;
                int cbright = CUP$ixiParser$stack.peek().right;
                InterfaceClassBody cb = CUP$ixiParser$stack.peek().<InterfaceClassBody> value();
                 RESULT = new InterfaceClassBody(ifd, cb); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("class_body",2, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // class_body ::= 
            {
                InterfaceClassBody RESULT = null;
                 RESULT = new InterfaceClassBody(); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("class_body",2, CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // class_decl ::= CLASS identifier OPEN_BRACE class_body CLOSE_BRACE 
            {
                InterfaceClassDecl RESULT = null;
                int idleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-3).left;
                int idright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-3).right;
                Identifier id = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-3).<Identifier> value();
                int cbleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).left;
                int cbright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).right;
                InterfaceClassBody cb = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).<InterfaceClassBody> value();
                 RESULT = new InterfaceClassDecl(id,cb); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("class_decl",1, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-4), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // class_decl ::= CLASS identifier EXTENDS identifier OPEN_BRACE class_body CLOSE_BRACE 
            {
                InterfaceClassDecl RESULT = null;
                int id1left = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-5).left;
                int id1right = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-5).right;
                Identifier id1 = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-5).<Identifier> value();
                int id2left = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-3).left;
                int id2right = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-3).right;
                Identifier id2 = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-3).<Identifier> value();
                int cbleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).left;
                int cbright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).right;
                InterfaceClassBody cb = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).<InterfaceClassBody> value();
                 RESULT = new InterfaceClassDecl(id1,id2,cb); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("class_decl",1, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-6), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // empty_array_type ::= primitive_type brackets 
            {
                EmptyArrayType RESULT = null;
                int ptleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).left;
                int ptright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).right;
                PrimitiveType pt = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).<PrimitiveType> value();
                int bleft = CUP$ixiParser$stack.peek().left;
                int bright = CUP$ixiParser$stack.peek().right;
                Brackets b = CUP$ixiParser$stack.peek().<Brackets> value();
                 RESULT = new EmptyArrayType(pt, b); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("empty_array_type",3, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // function_param ::= identifier COLON type 
            {
                FunctionParam RESULT = null;
                int idleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2).left;
                int idright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2).right;
                Identifier id = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2).<Identifier> value();
                int tleft = CUP$ixiParser$stack.peek().left;
                int tright = CUP$ixiParser$stack.peek().right;
                Type t = CUP$ixiParser$stack.peek().<Type> value();
                 RESULT = new FunctionParam(id, t); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("function_param",4, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // function_param ::= identifier COLON type COMMA function_param 
            {
                FunctionParam RESULT = null;
                int idleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-4).left;
                int idright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-4).right;
                Identifier id = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-4).<Identifier> value();
                int tleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2).left;
                int tright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2).right;
                Type t = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2).<Type> value();
                int fpleft = CUP$ixiParser$stack.peek().left;
                int fpright = CUP$ixiParser$stack.peek().right;
                FunctionParam fp = CUP$ixiParser$stack.peek().<FunctionParam> value();
                 RESULT = new FunctionParam(id, t, fp); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("function_param",4, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-4), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // identifier ::= IDENTIFIER 
            {
                Identifier RESULT = null;
                int idleft = CUP$ixiParser$stack.peek().left;
                int idright = CUP$ixiParser$stack.peek().right;
                String id = CUP$ixiParser$stack.peek().<String> value();
                 RESULT = new Identifier(id, idleft, idright); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("identifier",5, CUP$ixiParser$stack.peek(), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // interface ::= interface_list 
            {
                Interface RESULT = null;
                int illeft = CUP$ixiParser$stack.peek().left;
                int ilright = CUP$ixiParser$stack.peek().right;
                InterfaceList il = CUP$ixiParser$stack.peek().<InterfaceList> value();
                 RESULT = new Interface(il); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("interface",6, CUP$ixiParser$stack.peek(), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // interface_func ::= identifier OPEN_PAREN CLOSE_PAREN return_type 
            {
                InterfaceFunc RESULT = null;
                int idleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-3).left;
                int idright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-3).right;
                Identifier id = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-3).<Identifier> value();
                int rtleft = CUP$ixiParser$stack.peek().left;
                int rtright = CUP$ixiParser$stack.peek().right;
                ReturnType rt = CUP$ixiParser$stack.peek().<ReturnType> value();
                 RESULT = new InterfaceFunc(id, rt); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("interface_func",7, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-3), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // interface_func ::= identifier OPEN_PAREN function_param CLOSE_PAREN return_type 
            {
                InterfaceFunc RESULT = null;
                int idleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-4).left;
                int idright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-4).right;
                Identifier id = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-4).<Identifier> value();
                int fpleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2).left;
                int fpright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2).right;
                FunctionParam fp = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2).<FunctionParam> value();
                int rtleft = CUP$ixiParser$stack.peek().left;
                int rtright = CUP$ixiParser$stack.peek().right;
                ReturnType rt = CUP$ixiParser$stack.peek().<ReturnType> value();
                 RESULT = new InterfaceFunc(id, fp, rt); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("interface_func",7, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-4), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // interface_list ::= interface_func interface_list 
            {
                InterfaceList RESULT = null;
                int ifdleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).left;
                int ifdright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).right;
                InterfaceFunc ifd = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).<InterfaceFunc> value();
                int illeft = CUP$ixiParser$stack.peek().left;
                int ilright = CUP$ixiParser$stack.peek().right;
                InterfaceList il = CUP$ixiParser$stack.peek().<InterfaceList> value();
                 RESULT = new InterfaceList(ifd, il); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("interface_list",8, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // interface_list ::= interface_func 
            {
                InterfaceList RESULT = null;
                int ifdleft = CUP$ixiParser$stack.peek().left;
                int ifdright = CUP$ixiParser$stack.peek().right;
                InterfaceFunc ifd = CUP$ixiParser$stack.peek().<InterfaceFunc> value();
                 RESULT = new InterfaceList(ifd); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("interface_list",8, CUP$ixiParser$stack.peek(), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // interface_list ::= class_decl interface_list 
            {
                InterfaceList RESULT = null;
                int cdleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).left;
                int cdright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).right;
                InterfaceClassDecl cd = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1).<InterfaceClassDecl> value();
                int illeft = CUP$ixiParser$stack.peek().left;
                int ilright = CUP$ixiParser$stack.peek().right;
                InterfaceList il = CUP$ixiParser$stack.peek().<InterfaceList> value();
                 RESULT = new InterfaceList(cd,il); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("interface_list",8, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // interface_list ::= class_decl 
            {
                InterfaceList RESULT = null;
                int cdleft = CUP$ixiParser$stack.peek().left;
                int cdright = CUP$ixiParser$stack.peek().right;
                InterfaceClassDecl cd = CUP$ixiParser$stack.peek().<InterfaceClassDecl> value();
                 RESULT = new InterfaceList(cd); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("interface_list",8, CUP$ixiParser$stack.peek(), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // primitive_type ::= INT 
            {
                PrimitiveType RESULT = null;
                int ileft = CUP$ixiParser$stack.peek().left;
                int iright = CUP$ixiParser$stack.peek().right;
                Object i = CUP$ixiParser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(0); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("primitive_type",9, CUP$ixiParser$stack.peek(), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // primitive_type ::= BOOL 
            {
                PrimitiveType RESULT = null;
                int bleft = CUP$ixiParser$stack.peek().left;
                int bright = CUP$ixiParser$stack.peek().right;
                Object b = CUP$ixiParser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(1); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("primitive_type",9, CUP$ixiParser$stack.peek(), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // return_type ::= COLON type_list 
            {
                ReturnType RESULT = null;
                int tlleft = CUP$ixiParser$stack.peek().left;
                int tlright = CUP$ixiParser$stack.peek().right;
                TypeList tl = CUP$ixiParser$stack.peek().<TypeList> value();
                 RESULT = new ReturnType(tl); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("return_type",10, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-1), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // return_type ::= 
            {
                ReturnType RESULT = null;
                 RESULT = new ReturnType(); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("return_type",10, CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // type ::= primitive_type 
            {
                Type RESULT = null;
                int ptleft = CUP$ixiParser$stack.peek().left;
                int ptright = CUP$ixiParser$stack.peek().right;
                PrimitiveType pt = CUP$ixiParser$stack.peek().<PrimitiveType> value();
                 RESULT = pt; 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("type",11, CUP$ixiParser$stack.peek(), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // type ::= empty_array_type 
            {
                Type RESULT = null;
                int atleft = CUP$ixiParser$stack.peek().left;
                int atright = CUP$ixiParser$stack.peek().right;
                EmptyArrayType at = CUP$ixiParser$stack.peek().<EmptyArrayType> value();
                 RESULT = at; 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("type",11, CUP$ixiParser$stack.peek(), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // type ::= identifier 
            {
                Type RESULT = null;
                int idleft = CUP$ixiParser$stack.peek().left;
                int idright = CUP$ixiParser$stack.peek().right;
                Identifier id = CUP$ixiParser$stack.peek().<Identifier> value();
                 id.setIsClassName(); RESULT = id; 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("type",11, CUP$ixiParser$stack.peek(), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // type_list ::= type 
            {
                TypeList RESULT = null;
                int tleft = CUP$ixiParser$stack.peek().left;
                int tright = CUP$ixiParser$stack.peek().right;
                Type t = CUP$ixiParser$stack.peek().<Type> value();
                 RESULT = new TypeList(t); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("type_list",12, CUP$ixiParser$stack.peek(), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // type_list ::= type COMMA type_list 
            {
                TypeList RESULT = null;
                int tleft = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2).left;
                int tright = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2).right;
                Type t = CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2).<Type> value();
                int tlleft = CUP$ixiParser$stack.peek().left;
                int tlright = CUP$ixiParser$stack.peek().right;
                TypeList tl = CUP$ixiParser$stack.peek().<TypeList> value();
                 RESULT = new TypeList(t, tl); 
                CUP$ixiParser$result = parser.getSymbolFactory().newSymbol("type_list",12, CUP$ixiParser$stack.elementAt(CUP$ixiParser$top-2), CUP$ixiParser$stack.peek(), RESULT);
            }
            return CUP$ixiParser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$ixiParser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$ixiParser$do_action(
            int                        CUP$ixiParser$act_num,
            java_cup.runtime.lr_parser CUP$ixiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$ixiParser$stack,
            int                        CUP$ixiParser$top)
            throws java.lang.Exception {
            return CUP$ixiParser$do_action_part00000000(
                           CUP$ixiParser$act_num,
                           CUP$ixiParser$parser,
                           CUP$ixiParser$stack,
                           CUP$ixiParser$top);
    }
}

}
