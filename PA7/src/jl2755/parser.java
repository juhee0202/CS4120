
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package jl2755;

import jl2755.ast.*;
import java.io.IOException;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\003\003\000\002\003\005" +
    "\000\002\003\002\000\002\004\005\000\002\005\005\000" +
    "\002\005\006\000\002\005\006\000\002\006\004\000\002" +
    "\006\005\000\002\006\006\000\002\006\005\000\002\007" +
    "\004\000\002\007\005\000\002\010\004\000\002\010\004" +
    "\000\002\010\002\000\002\011\007\000\002\011\011\000" +
    "\002\012\003\000\002\012\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\005\000\002\013\004\000\002\013" +
    "\003\000\002\013\005\000\002\014\004\000\002\014\004" +
    "\000\002\015\003\000\002\015\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\003\000\002\020\005\000\002" +
    "\021\006\000\002\021\005\000\002\021\007\000\002\021" +
    "\010\000\002\021\006\000\002\022\007\000\002\022\010" +
    "\000\002\023\005\000\002\023\007\000\002\024\004\000" +
    "\002\024\003\000\002\024\004\000\002\024\003\000\002" +
    "\024\004\000\002\024\003\000\002\025\003\000\002\026" +
    "\005\000\002\026\003\000\002\027\007\000\002\027\011" +
    "\000\002\030\005\000\002\030\006\000\002\031\004\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\004\000\002\033" +
    "\004\000\002\033\004\000\002\033\004\000\002\034\005" +
    "\000\002\034\006\000\002\034\006\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\005\000\002" +
    "\036\003\000\002\036\005\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\005" +
    "\000\002\016\004\000\002\016\004\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\040\003\000\002\040\003\000\002\041\003\000\002" +
    "\041\004\000\002\042\003\000\002\042\005\000\002\043" +
    "\003\000\002\043\004\000\002\043\004\000\002\043\005" +
    "\000\002\044\004\000\002\044\002\000\002\045\007\000" +
    "\002\046\007\000\002\047\004\000\002\047\003\000\002" +
    "\050\003\000\002\050\004\000\002\051\004\000\002\051" +
    "\005\000\002\051\004\000\002\051\005\000\002\052\006" +
    "\000\002\052\006\000\002\052\005\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\054\003\000\002" +
    "\054\005\000\002\055\004\000\002\055\005\000\002\055" +
    "\005\000\002\055\006\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\057\007\000\002\060\007\000" +
    "\002\060\010" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\010\004\020\016\006\055\010\001\002\000" +
    "\010\044\043\050\u010c\051\042\001\002\000\012\002\uffcf" +
    "\004\uffcf\052\u010b\055\uffcf\001\002\000\004\004\020\001" +
    "\002\000\004\002\u0106\001\002\000\004\004\020\001\002" +
    "\000\010\002\uffb4\004\020\055\010\001\002\000\012\002" +
    "\uffcd\004\uffcd\052\025\055\uffcd\001\002\000\004\002\uff8e" +
    "\001\002\000\010\002\uffb3\004\020\055\010\001\002\000" +
    "\006\004\020\055\010\001\002\000\010\002\uffb5\004\020" +
    "\055\010\001\002\000\012\002\uffd1\004\uffd1\052\021\055" +
    "\uffd1\001\002\000\122\002\uffcc\004\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\022\uffcc\023" +
    "\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\064\uffcc\001\002\000\010\002\uffd2" +
    "\004\uffd2\055\uffd2\001\002\000\004\002\uffb8\001\002\000" +
    "\004\002\uff8d\001\002\000\004\002\uffb6\001\002\000\010" +
    "\002\uffce\004\uffce\055\uffce\001\002\000\004\002\uffb7\001" +
    "\002\000\006\046\031\056\030\001\002\000\004\004\020" +
    "\001\002\000\006\004\020\047\uffee\001\002\000\006\004" +
    "\020\047\uffee\001\002\000\010\044\043\050\044\051\042" +
    "\001\002\000\004\047\041\001\002\000\006\004\uffde\047" +
    "\uffde\001\002\000\006\004\020\047\uffee\001\002\000\006" +
    "\004\uffdf\047\uffdf\001\002\000\004\047\ufff0\001\002\000" +
    "\010\002\uffed\004\uffed\055\uffed\001\002\000\004\004\020" +
    "\001\002\000\006\004\020\045\216\001\002\000\010\004" +
    "\020\024\051\025\047\001\002\000\014\004\uff6c\041\uff6c" +
    "\042\052\047\uff6c\051\uff6c\001\002\000\050\002\uff6e\004" +
    "\uff6e\012\uff6e\013\uff6e\014\uff6e\015\uff6e\041\uff6e\044\uff6e" +
    "\046\uff6e\047\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\055" +
    "\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\001\002\000\054" +
    "\002\uff8f\004\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\041" +
    "\uff8f\042\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\054\uff8f\055\uff8f\057\uff8f\060\uff8f\061" +
    "\uff8f\062\uff8f\001\002\000\014\004\uff6d\041\uff6d\042\052" +
    "\047\uff6d\051\uff6d\001\002\000\054\002\uff90\004\uff90\012" +
    "\uff90\013\uff90\014\uff90\015\uff90\041\uff90\042\uff90\044\uff90" +
    "\045\uff90\046\uff90\047\uff90\051\uff90\052\uff90\053\uff90\054" +
    "\uff90\055\uff90\057\uff90\060\uff90\061\uff90\062\uff90\001\002" +
    "\000\040\004\020\005\102\006\075\007\063\010\076\011" +
    "\103\020\065\030\077\043\061\044\100\046\067\054\060" +
    "\057\055\060\101\063\073\001\002\000\050\002\uffbe\004" +
    "\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\041\uffbe\044\uffbe" +
    "\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\001\002\000\012" +
    "\004\uffbf\041\uffbf\047\uffbf\051\uffbf\001\002\000\004\004" +
    "\020\001\002\000\102\004\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\015\uffa5\017\uffa5\020\uffa5\022\uffa5\023\uffa5\026\uffa5\027" +
    "\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\062\uffa5\001\002\000\106\004\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8" +
    "\026\uffe8\027\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\042\106\043\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8\054" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\064\uffe8\001\002" +
    "\000\004\044\205\001\002\000\054\002\ufff2\004\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\041\ufff2\042\203\044\ufff2" +
    "\045\ufff2\046\ufff2\047\ufff2\051\ufff2\052\ufff2\053\ufff2\054" +
    "\ufff2\055\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\001\002" +
    "\000\104\004\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\017" +
    "\uffe1\020\uffe1\022\uffe1\023\uffe1\026\uffe1\027\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\064\151\001\002\000\106\002\uffc4\004\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4\022\uffc4\023" +
    "\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\001\002\000" +
    "\106\002\uffeb\004\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\017\uffeb\020\uffeb\022\uffeb\023\uffeb\026\uffeb\027\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\062\uffeb\001\002\000\036\004\020\005\102\006" +
    "\075\007\063\010\076\011\103\020\065\030\077\044\100" +
    "\046\067\054\060\057\055\060\101\063\073\001\002\000" +
    "\102\004\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\017\uffa4" +
    "\020\uffa4\022\uffa4\023\uffa4\026\uffa4\027\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\054\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4" +
    "\001\002\000\040\004\020\005\102\006\075\007\063\010" +
    "\076\011\103\020\065\030\077\044\100\046\067\047\ufffb" +
    "\054\060\057\055\060\101\063\073\001\002\000\040\017" +
    "\126\020\121\022\111\023\112\026\120\027\115\031\114" +
    "\032\125\033\117\034\122\035\123\036\110\037\113\040" +
    "\124\043\172\001\002\000\102\004\uffa3\012\uffa3\013\uffa3" +
    "\014\uffa3\015\uffa3\017\uffa3\020\uffa3\022\uffa3\023\uffa3\026" +
    "\uffa3\027\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\043\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\057\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\001\002\000\106\004\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9\022\uffe9" +
    "\023\uffe9\026\uffe9\027\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\106\043\uffe9" +
    "\044\165\045\uffe9\046\uffe9\047\uffe9\051\uffe9\052\uffe9\053" +
    "\uffe9\054\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\064\uffe9" +
    "\001\002\000\102\004\uffa2\012\uffa2\013\uffa2\014\uffa2\015" +
    "\uffa2\017\uffa2\020\uffa2\022\uffa2\023\uffa2\026\uffa2\027\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\054\uffa2\057\uffa2\060\uffa2\061" +
    "\uffa2\062\uffa2\001\002\000\102\004\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\026" +
    "\uffe0\027\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\057\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\001\002\000\106\002\uffc3\004" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3\020\uffc3" +
    "\022\uffc3\023\uffc3\026\uffc3\027\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\001\002\000\106\002\uffc1\004\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\017\uffc1\020\uffc1\022\uffc1\023\uffc1\026\uffc1" +
    "\027\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\001\002\000\036\004\020" +
    "\005\102\006\075\007\063\010\076\011\103\020\065\030" +
    "\077\044\100\046\067\054\060\057\055\060\101\063\073" +
    "\001\002\000\036\004\020\005\102\006\075\007\063\010" +
    "\076\011\103\020\065\030\077\044\100\046\067\054\060" +
    "\057\055\060\101\063\073\001\002\000\104\004\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020\uffe5\022\uffe5" +
    "\023\uffe5\026\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\043\uffe5\044\uffe5" +
    "\045\uffe5\046\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\064\uffe5\001\002" +
    "\000\106\002\uffc2\004\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\017\uffc2\020\uffc2\022\uffc2\023\uffc2\026\uffc2\027\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\001\002\000\106\002\uffc0\004\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0\020\uffc0\022" +
    "\uffc0\023\uffc0\026\uffc0\027\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0" +
    "\054\uffc0\055\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\001" +
    "\002\000\104\004\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\017\uffea\020\uffea\022\uffea\023\uffea\026\uffea\027\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\042\106\043\uffea\044\uffea\045\uffea\046\uffea\047" +
    "\uffea\051\uffea\052\uffea\053\uffea\054\uffea\057\uffea\060\uffea" +
    "\061\uffea\062\uffea\001\002\000\102\004\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\017\ufffe\020\ufffe\022\ufffe\023\ufffe" +
    "\026\ufffe\027\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035" +
    "\ufffe\036\ufffe\037\ufffe\040\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\046\ufffe\047\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\057" +
    "\ufffe\060\ufffe\061\ufffe\062\ufffe\001\002\000\036\004\020" +
    "\005\102\006\075\007\063\010\076\011\103\020\065\030" +
    "\077\044\100\046\067\054\060\057\055\060\101\063\073" +
    "\001\002\000\040\017\126\020\121\022\111\023\112\026" +
    "\120\027\115\031\114\032\125\033\117\034\122\035\123" +
    "\036\110\037\113\040\124\043\116\001\002\000\036\004" +
    "\020\005\102\006\075\007\063\010\076\011\103\020\065" +
    "\030\077\044\100\046\067\054\060\057\055\060\101\063" +
    "\073\001\002\000\036\004\020\005\102\006\075\007\063" +
    "\010\076\011\103\020\065\030\077\044\100\046\067\054" +
    "\060\057\055\060\101\063\073\001\002\000\036\004\020" +
    "\005\102\006\075\007\063\010\076\011\103\020\065\030" +
    "\077\044\100\046\067\054\060\057\055\060\101\063\073" +
    "\001\002\000\036\004\020\005\102\006\075\007\063\010" +
    "\076\011\103\020\065\030\077\044\100\046\067\054\060" +
    "\057\055\060\101\063\073\001\002\000\036\004\020\005" +
    "\102\006\075\007\063\010\076\011\103\020\065\030\077" +
    "\044\100\046\067\054\060\057\055\060\101\063\073\001" +
    "\002\000\036\004\020\005\102\006\075\007\063\010\076" +
    "\011\103\020\065\030\077\044\100\046\067\054\060\057" +
    "\055\060\101\063\073\001\002\000\106\004\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\017\uffc7\020\uffc7\022\uffc7\023" +
    "\uffc7\026\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\106\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\001" +
    "\002\000\036\004\020\005\102\006\075\007\063\010\076" +
    "\011\103\020\065\030\077\044\100\046\067\054\060\057" +
    "\055\060\101\063\073\001\002\000\036\004\020\005\102" +
    "\006\075\007\063\010\076\011\103\020\065\030\077\044" +
    "\100\046\067\054\060\057\055\060\101\063\073\001\002" +
    "\000\036\004\020\005\102\006\075\007\063\010\076\011" +
    "\103\020\065\030\077\044\100\046\067\054\060\057\055" +
    "\060\101\063\073\001\002\000\036\004\020\005\102\006" +
    "\075\007\063\010\076\011\103\020\065\030\077\044\100" +
    "\046\067\054\060\057\055\060\101\063\073\001\002\000" +
    "\036\004\020\005\102\006\075\007\063\010\076\011\103" +
    "\020\065\030\077\044\100\046\067\054\060\057\055\060" +
    "\101\063\073\001\002\000\036\004\020\005\102\006\075" +
    "\007\063\010\076\011\103\020\065\030\077\044\100\046" +
    "\067\054\060\057\055\060\101\063\073\001\002\000\036" +
    "\004\020\005\102\006\075\007\063\010\076\011\103\020" +
    "\065\030\077\044\100\046\067\054\060\057\055\060\101" +
    "\063\073\001\002\000\036\004\020\005\102\006\075\007" +
    "\063\010\076\011\103\020\065\030\077\044\100\046\067" +
    "\054\060\057\055\060\101\063\073\001\002\000\102\004" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\017\uff9e\020\uff9e" +
    "\022\111\023\112\026\120\027\115\031\uff9e\032\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\047\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\054\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\001\002" +
    "\000\102\004\uff95\012\uff95\013\uff95\014\uff95\015\uff95\017" +
    "\126\020\121\022\111\023\112\026\120\027\115\031\uff95" +
    "\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040" +
    "\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\051\uff95" +
    "\052\uff95\053\uff95\054\uff95\057\uff95\060\uff95\061\uff95\062" +
    "\uff95\001\002\000\102\004\uff98\012\uff98\013\uff98\014\uff98" +
    "\015\uff98\017\126\020\121\022\111\023\112\026\120\027" +
    "\115\031\114\032\125\033\117\034\122\035\uff98\036\uff98" +
    "\037\uff98\040\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047" +
    "\uff98\051\uff98\052\uff98\053\uff98\054\uff98\057\uff98\060\uff98" +
    "\061\uff98\062\uff98\001\002\000\102\004\uff92\012\uff92\013" +
    "\uff92\014\uff92\015\uff92\017\126\020\121\022\111\023\112" +
    "\026\120\027\115\031\114\032\125\033\117\034\122\035" +
    "\uff92\036\uff92\037\113\040\124\043\uff92\044\uff92\045\uff92" +
    "\046\uff92\047\uff92\051\uff92\052\uff92\053\uff92\054\uff92\057" +
    "\uff92\060\uff92\061\uff92\062\uff92\001\002\000\102\004\uff93" +
    "\012\uff93\013\uff93\014\uff93\015\uff93\017\126\020\121\022" +
    "\111\023\112\026\120\027\115\031\uff93\032\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\043\uff93\044" +
    "\uff93\045\uff93\046\uff93\047\uff93\051\uff93\052\uff93\053\uff93" +
    "\054\uff93\057\uff93\060\uff93\061\uff93\062\uff93\001\002\000" +
    "\102\004\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\017\uff9d" +
    "\020\uff9d\022\111\023\112\026\120\027\115\031\uff9d\032" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\051\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d" +
    "\001\002\000\102\004\uff9a\012\uff9a\013\uff9a\014\uff9a\015" +
    "\uff9a\017\uff9a\020\uff9a\022\uff9a\023\uff9a\026\uff9a\027\uff9a" +
    "\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037" +
    "\uff9a\040\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\057\uff9a\060\uff9a\061" +
    "\uff9a\062\uff9a\001\002\000\102\004\uff94\012\uff94\013\uff94" +
    "\014\uff94\015\uff94\017\126\020\121\022\111\023\112\026" +
    "\120\027\115\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94" +
    "\036\uff94\037\uff94\040\uff94\043\uff94\044\uff94\045\uff94\046" +
    "\uff94\047\uff94\051\uff94\052\uff94\053\uff94\054\uff94\057\uff94" +
    "\060\uff94\061\uff94\062\uff94\001\002\000\104\004\uffc6\012" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6\020\uffc6\022\uffc6" +
    "\023\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\001\002" +
    "\000\102\004\uff99\012\uff99\013\uff99\014\uff99\015\uff99\017" +
    "\uff99\020\uff99\022\uff99\023\uff99\026\uff99\027\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\051\uff99" +
    "\052\uff99\053\uff99\054\uff99\057\uff99\060\uff99\061\uff99\062" +
    "\uff99\001\002\000\102\004\uff96\012\uff96\013\uff96\014\uff96" +
    "\015\uff96\017\126\020\121\022\111\023\112\026\120\027" +
    "\115\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96" +
    "\037\uff96\040\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047" +
    "\uff96\051\uff96\052\uff96\053\uff96\054\uff96\057\uff96\060\uff96" +
    "\061\uff96\062\uff96\001\002\000\102\004\uff97\012\uff97\013" +
    "\uff97\014\uff97\015\uff97\017\126\020\121\022\111\023\112" +
    "\026\120\027\115\031\114\032\125\033\117\034\122\035" +
    "\uff97\036\uff97\037\uff97\040\uff97\043\uff97\044\uff97\045\uff97" +
    "\046\uff97\047\uff97\051\uff97\052\uff97\053\uff97\054\uff97\057" +
    "\uff97\060\uff97\061\uff97\062\uff97\001\002\000\102\004\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\015\uff9b\017\uff9b\020\uff9b\022" +
    "\uff9b\023\uff9b\026\uff9b\027\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\046\uff9b\047\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\001\002\000" +
    "\102\004\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\017\uff9c" +
    "\020\uff9c\022\uff9c\023\uff9c\026\uff9c\027\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\051\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c" +
    "\001\002\000\102\004\uff91\012\uff91\013\uff91\014\uff91\015" +
    "\uff91\017\126\020\121\022\111\023\112\026\120\027\115" +
    "\031\114\032\125\033\117\034\122\035\123\036\uff91\037" +
    "\113\040\124\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91" +
    "\051\uff91\052\uff91\053\uff91\054\uff91\057\uff91\060\uff91\061" +
    "\uff91\062\uff91\001\002\000\040\017\uffe0\020\uffe0\022\uffe0" +
    "\023\uffe0\026\uffe0\027\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\045\163\001\002" +
    "\000\042\017\uffe1\020\uffe1\022\uffe1\023\uffe1\026\uffe1\027" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\045\152\064\151\001\002\000\036\017" +
    "\126\020\121\022\111\023\112\026\120\027\115\031\114" +
    "\032\125\033\117\034\122\035\123\036\110\037\113\040" +
    "\124\001\002\000\004\004\020\001\002\000\104\004\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4\020\uffe4\022" +
    "\uffe4\023\uffe4\026\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\054\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\064\uffe4\001" +
    "\002\000\104\004\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\017\uffe7\020\uffe7\022\uffe7\023\uffe7\026\uffe7\027\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\043\uffe7\044\154\045\uffe7\046\uffe7\047\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\057\uffe7\060\uffe7\061\uffe7" +
    "\062\uffe7\064\uffe7\001\002\000\040\004\020\005\102\006" +
    "\075\007\063\010\076\011\103\020\065\030\077\044\100" +
    "\045\157\046\067\054\060\057\055\060\101\063\073\001" +
    "\002\000\004\045\162\001\002\000\042\017\126\020\121" +
    "\022\111\023\112\026\120\027\115\031\114\032\125\033" +
    "\117\034\122\035\123\036\110\037\113\040\124\045\uffdd" +
    "\051\160\001\002\000\106\004\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9\026\uffd9" +
    "\027\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\057" +
    "\uffd9\060\uffd9\061\uffd9\062\uffd9\064\uffd9\001\002\000\036" +
    "\004\020\005\102\006\075\007\063\010\076\011\103\020" +
    "\065\030\077\044\100\046\067\054\060\057\055\060\101" +
    "\063\073\001\002\000\004\045\uffdc\001\002\000\106\004" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8" +
    "\022\uffd8\023\uffd8\026\uffd8\027\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\051\uffd8\052" +
    "\uffd8\053\uffd8\054\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8" +
    "\064\uffd8\001\002\000\102\004\uffa1\012\uffa1\013\uffa1\014" +
    "\uffa1\015\uffa1\017\uffa1\020\uffa1\022\uffa1\023\uffa1\026\uffa1" +
    "\027\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\057\uffa1\060" +
    "\uffa1\061\uffa1\062\uffa1\001\002\000\102\004\uff9f\012\uff9f" +
    "\013\uff9f\014\uff9f\015\uff9f\017\uff9f\020\uff9f\022\uff9f\023" +
    "\uff9f\026\uff9f\027\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\057\uff9f\060\uff9f\061\uff9f\062\uff9f\001\002\000\040\004" +
    "\020\005\102\006\075\007\063\010\076\011\103\020\065" +
    "\030\077\044\100\045\170\046\067\054\060\057\055\060" +
    "\101\063\073\001\002\000\102\004\000\012\000\013\000" +
    "\014\000\015\000\017\000\020\000\022\000\023\000\026" +
    "\000\027\000\031\000\032\000\033\000\034\000\035\000" +
    "\036\000\037\000\040\000\043\000\044\000\045\000\046" +
    "\000\047\000\051\000\052\000\053\000\054\000\057\000" +
    "\060\000\061\000\062\000\001\002\000\004\045\171\001" +
    "\002\000\106\004\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\017\uffda\020\uffda\022\uffda\023\uffda\026\uffda\027\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\051\uffda\052\uffda\053\uffda\054\uffda\057\uffda\060\uffda" +
    "\061\uffda\062\uffda\064\uffda\001\002\000\106\004\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb\022\uffdb" +
    "\023\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb\053" +
    "\uffdb\054\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\064\uffdb" +
    "\001\002\000\052\002\uffbb\004\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\041\uffbb\042\052\044\uffbb\046\uffbb\047\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\001\002\000\050\002\uffba\004\uffba" +
    "\012\uffba\013\uffba\014\uffba\015\uffba\041\uffba\044\uffba\046" +
    "\uffba\047\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\001\002\000\050\002" +
    "\uffb9\004\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\041\uffb9" +
    "\044\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\001\002" +
    "\000\042\017\126\020\121\022\111\023\112\026\120\027" +
    "\115\031\114\032\125\033\117\034\122\035\123\036\110" +
    "\037\113\040\124\047\ufffd\051\200\001\002\000\004\047" +
    "\177\001\002\000\110\002\ufffa\004\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa\026" +
    "\ufffa\027\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\037\ufffa\040\ufffa\042\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa" +
    "\055\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\001\002\000" +
    "\040\004\020\005\102\006\075\007\063\010\076\011\103" +
    "\020\065\030\077\044\100\046\067\047\ufffb\054\060\057" +
    "\055\060\101\063\073\001\002\000\004\047\ufffc\001\002" +
    "\000\102\004\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\017" +
    "\uffa0\020\uffa0\022\uffa0\023\uffa0\026\uffa0\027\uffa0\031\uffa0" +
    "\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\057\uffa0\060\uffa0\061\uffa0\062" +
    "\uffa0\001\002\000\004\043\061\001\002\000\052\002\ufff1" +
    "\004\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\041\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\047\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\054\ufff1\055\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\001" +
    "\002\000\036\004\020\005\102\006\075\007\063\010\076" +
    "\011\103\020\065\030\077\044\100\046\067\054\060\057" +
    "\055\060\101\063\073\001\002\000\040\017\126\020\121" +
    "\022\111\023\112\026\120\027\115\031\114\032\125\033" +
    "\117\034\122\035\123\036\110\037\113\040\124\045\207" +
    "\001\002\000\106\004\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\017\uffd7\020\uffd7\022\uffd7\023\uffd7\026\uffd7\027\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\064\uffd7\001\002\000\102\004\uffff" +
    "\012\uffff\013\uffff\014\uffff\015\uffff\017\uffff\020\uffff\022" +
    "\uffff\023\uffff\026\uffff\027\uffff\031\uffff\032\uffff\033\uffff" +
    "\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\043\uffff\044" +
    "\uffff\045\uffff\046\uffff\047\uffff\051\uffff\052\uffff\053\uffff" +
    "\054\uffff\057\uffff\060\uffff\061\uffff\062\uffff\001\002\000" +
    "\104\004\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6" +
    "\020\uffe6\022\uffe6\023\uffe6\026\uffe6\027\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6" +
    "\064\uffe6\001\002\000\050\002\uffbc\004\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\041\uffbc\044\uffbc\046\uffbc\047\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\001\002\000\012\004\uffbd\041\uffbd" +
    "\047\uffbd\051\uffbd\001\002\000\004\050\367\001\002\000" +
    "\004\045\364\001\002\000\006\046\uff85\050\220\001\002" +
    "\000\004\046\233\001\002\000\010\004\020\024\051\025" +
    "\047\001\002\000\052\002\uff75\004\uff75\012\uff75\013\uff75" +
    "\014\uff75\015\uff75\042\203\044\uff75\045\uff75\046\uff75\047" +
    "\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055\uff75\057\uff75" +
    "\060\uff75\061\uff75\062\uff75\001\002\000\052\002\uff76\004" +
    "\uff76\012\uff76\013\uff76\014\uff76\015\uff76\041\uff76\044\uff76" +
    "\045\uff76\046\uff76\047\uff76\051\uff76\052\uff76\053\uff76\054" +
    "\uff76\055\uff76\057\uff76\060\uff76\061\uff76\062\uff76\001\002" +
    "\000\004\046\uff86\001\002\000\052\002\uff77\004\uff77\012" +
    "\uff77\013\uff77\014\uff77\015\uff77\042\203\044\uff77\045\uff77" +
    "\046\uff77\047\uff77\051\uff77\052\uff77\053\uff77\054\uff77\055" +
    "\uff77\057\uff77\060\uff77\061\uff77\062\uff77\001\002\000\006" +
    "\046\uff74\051\226\001\002\000\010\004\020\024\051\025" +
    "\047\001\002\000\004\046\uff73\001\002\000\050\002\uffe3" +
    "\004\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3" +
    "\055\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\001\002\000" +
    "\050\002\uffe2\004\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\047\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2" +
    "\001\002\000\012\002\uffd6\004\uffd6\047\uffd6\055\uffd6\001" +
    "\002\000\034\004\020\012\247\014\261\015\240\044\260" +
    "\046\233\047\244\053\234\054\060\057\055\060\101\061" +
    "\245\062\257\001\002\000\006\041\360\051\265\001\002" +
    "\000\044\004\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\042" +
    "\106\044\uffaf\046\uffaf\047\uffaf\052\uffaf\053\uffaf\054\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\062\uffaf\064\uffe8\001\002\000" +
    "\040\004\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\044\uffb1" +
    "\046\uffb1\047\uffb1\052\uffb1\053\uffb1\054\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\001\002\000\004\064\151\001\002" +
    "\000\042\004\020\005\102\006\075\007\063\010\076\011" +
    "\103\020\065\030\077\044\100\046\067\047\uff8a\052\346" +
    "\054\060\057\055\060\101\063\073\001\002\000\040\004" +
    "\uffab\012\uffab\013\uffab\014\uffab\015\uffab\044\uffab\046\uffab" +
    "\047\uffab\052\uffab\053\uffab\054\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\001\002\000\040\004\uffae\012\uffae\013\uffae" +
    "\014\uffae\015\uffae\044\uffae\046\uffae\047\uffae\052\uffae\053" +
    "\uffae\054\uffae\057\uffae\060\uffae\061\uffae\062\uffae\001\002" +
    "\000\040\004\uff81\012\uff81\013\uff81\014\uff81\015\uff81\044" +
    "\uff81\046\uff81\047\uff81\052\345\053\uff81\054\uff81\057\uff81" +
    "\060\uff81\061\uff81\062\uff81\001\002\000\044\002\ufff6\004" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\044\ufff6\046\ufff6" +
    "\047\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\001\002\000\042\004\uffa9\012\uffa9" +
    "\013\uffa9\014\uffa9\015\uffa9\044\uffa9\046\uffa9\047\uffa9\052" +
    "\uffa9\053\uffa9\054\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9" +
    "\065\343\001\002\000\006\015\240\047\340\001\002\000" +
    "\004\044\332\001\002\000\004\047\331\001\002\000\040" +
    "\004\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\044\uffaa\046" +
    "\uffaa\047\uffaa\052\uffaa\053\uffaa\054\uffaa\057\uffaa\060\uffaa" +
    "\061\uffaa\062\uffaa\001\002\000\040\004\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\044\uffb2\046\uffb2\047\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\001" +
    "\002\000\016\041\316\042\106\044\165\050\315\051\042" +
    "\064\uffe9\001\002\000\040\004\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\044\uffb0\046\uffb0\047\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\001\002\000" +
    "\040\004\uffad\012\uffad\013\uffad\014\uffad\015\uffad\044\uffad" +
    "\046\uffad\047\uffad\052\uffad\053\uffad\054\uffad\057\uffad\060" +
    "\uffad\061\uffad\062\uffad\001\002\000\004\014\307\001\002" +
    "\000\042\004\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\044" +
    "\uffa7\046\uffa7\047\uffa7\052\uffa7\053\uffa7\054\uffa7\057\uffa7" +
    "\060\uffa7\061\uffa7\062\uffa7\065\305\001\002\000\014\004" +
    "\020\044\260\054\060\057\055\060\101\001\002\000\004" +
    "\044\277\001\002\000\042\004\uffac\012\uffac\013\uffac\014" +
    "\uffac\015\uffac\044\uffac\046\uffac\047\uffac\051\265\052\uffac" +
    "\053\uffac\054\uffac\057\uffac\060\uffac\061\uffac\062\uffac\001" +
    "\002\000\034\004\020\012\247\014\261\015\uff80\044\260" +
    "\046\233\047\uff80\053\234\054\060\057\055\060\101\061" +
    "\245\062\257\001\002\000\006\015\uff7f\047\uff7f\001\002" +
    "\000\006\004\020\053\273\001\002\000\004\041\267\001" +
    "\002\000\014\004\020\044\260\054\060\057\055\060\101" +
    "\001\002\000\010\044\165\045\uffe9\064\uffe9\001\002\000" +
    "\042\004\uff79\012\uff79\013\uff79\014\uff79\015\uff79\044\uff79" +
    "\046\uff79\047\uff79\052\uff79\053\uff79\054\uff79\057\uff79\060" +
    "\uff79\061\uff79\062\uff79\064\uffe8\001\002\000\004\050\044" +
    "\001\002\000\006\041\uff7c\051\265\001\002\000\006\041" +
    "\uff7e\051\265\001\002\000\004\041\uff7d\001\002\000\004" +
    "\041\uff7b\001\002\000\036\004\020\005\102\006\075\007" +
    "\063\010\076\011\103\020\065\030\077\044\100\046\067" +
    "\054\060\057\055\060\101\063\073\001\002\000\040\017" +
    "\126\020\121\022\111\023\112\026\120\027\115\031\114" +
    "\032\125\033\117\034\122\035\123\036\110\037\113\040" +
    "\124\045\301\001\002\000\030\004\020\012\247\014\261" +
    "\044\260\046\233\053\234\054\060\057\055\060\101\061" +
    "\245\062\257\001\002\000\040\004\uff6a\012\uff6a\013\uff6a" +
    "\014\uff6a\015\uff6a\044\uff6a\046\uff6a\047\uff6a\052\uff6a\053" +
    "\uff6a\054\uff6a\057\uff6a\060\uff6a\061\uff6a\062\uff6a\001\002" +
    "\000\006\045\uffe8\064\uffe8\001\002\000\006\045\152\064" +
    "\151\001\002\000\004\004\306\001\002\000\040\004\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\044\uffa6\046\uffa6\047" +
    "\uffa6\052\uffa6\053\uffa6\054\uffa6\057\uffa6\060\uffa6\061\uffa6" +
    "\062\uffa6\001\002\000\004\044\310\001\002\000\036\004" +
    "\020\005\102\006\075\007\063\010\076\011\103\020\065" +
    "\030\077\044\100\046\067\054\060\057\055\060\101\063" +
    "\073\001\002\000\040\017\126\020\121\022\111\023\112" +
    "\026\120\027\115\031\114\032\125\033\117\034\122\035" +
    "\123\036\110\037\113\040\124\045\312\001\002\000\030" +
    "\004\020\012\247\014\261\044\260\046\233\053\234\054" +
    "\060\057\055\060\101\061\245\062\257\001\002\000\040" +
    "\004\uff69\012\uff69\013\uff69\014\uff69\015\uff69\044\uff69\046" +
    "\uff69\047\uff69\052\uff69\053\uff69\054\uff69\057\uff69\060\uff69" +
    "\061\uff69\062\uff69\001\002\000\004\041\327\001\002\000" +
    "\012\004\020\014\uffc5\024\051\025\047\001\002\000\036" +
    "\004\020\005\102\006\075\007\063\010\076\011\103\020" +
    "\065\030\077\044\100\046\067\054\060\057\055\060\101" +
    "\063\073\001\002\000\074\004\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\017\126\020\121\022\111\023\112\026\120" +
    "\027\115\031\114\032\125\033\117\034\122\035\123\036" +
    "\110\037\113\040\124\044\ufff9\046\ufff9\047\ufff9\052\ufff9" +
    "\053\ufff9\054\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\001" +
    "\002\000\052\002\uff6c\004\uff6c\012\uff6c\013\uff6c\014\uff6c" +
    "\015\uff6c\041\uff75\042\052\044\uff6c\046\uff6c\047\uff6c\051" +
    "\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\057\uff6c\060\uff6c" +
    "\061\uff6c\062\uff6c\001\002\000\052\002\uff6d\004\uff6d\012" +
    "\uff6d\013\uff6d\014\uff6d\015\uff6d\041\uff77\042\052\044\uff6d" +
    "\046\uff6d\047\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d\055" +
    "\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\001\002\000\004" +
    "\041\323\001\002\000\036\004\020\005\102\006\075\007" +
    "\063\010\076\011\103\020\065\030\077\044\100\046\067" +
    "\054\060\057\055\060\101\063\073\001\002\000\074\004" +
    "\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b\017\126\020\121" +
    "\022\111\023\112\026\120\027\115\031\114\032\125\033" +
    "\117\034\122\035\123\036\110\037\113\040\124\044\uff6b" +
    "\046\uff6b\047\uff6b\052\uff6b\053\uff6b\054\uff6b\057\uff6b\060" +
    "\uff6b\061\uff6b\062\uff6b\001\002\000\050\002\uffbf\004\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\041\uffe3\044\uffbf\046" +
    "\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\057\uffbf\060\uffbf\061\uffbf\062\uffbf\001\002\000\050\002" +
    "\uffbd\004\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\041\uffe2" +
    "\044\uffbd\046\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd\054" +
    "\uffbd\055\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\001\002" +
    "\000\036\004\020\005\102\006\075\007\063\010\076\011" +
    "\103\020\065\030\077\044\100\046\067\054\060\057\055" +
    "\060\101\063\073\001\002\000\074\004\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\015\ufff8\017\126\020\121\022\111\023\112" +
    "\026\120\027\115\031\114\032\125\033\117\034\122\035" +
    "\123\036\110\037\113\040\124\044\ufff8\046\ufff8\047\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\057\ufff8\060\ufff8\061\ufff8\062" +
    "\ufff8\001\002\000\044\002\ufff3\004\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\044\ufff3\046\ufff3\047\ufff3\052\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3" +
    "\001\002\000\036\004\020\005\102\006\075\007\063\010" +
    "\076\011\103\020\065\030\077\044\100\046\067\054\060" +
    "\057\055\060\101\063\073\001\002\000\040\017\126\020" +
    "\121\022\111\023\112\026\120\027\115\031\114\032\125" +
    "\033\117\034\122\035\123\036\110\037\113\040\124\045" +
    "\334\001\002\000\030\004\020\012\247\014\261\044\260" +
    "\046\233\053\234\054\060\057\055\060\101\061\245\062" +
    "\257\001\002\000\040\004\uffc9\012\uffc9\013\336\014\uffc9" +
    "\015\uffc9\044\uffc9\046\uffc9\047\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\001\002\000\030" +
    "\004\020\012\247\014\261\044\260\046\233\053\234\054" +
    "\060\057\055\060\101\061\245\062\257\001\002\000\040" +
    "\004\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\044\uffc8\046" +
    "\uffc8\047\uffc8\052\uffc8\053\uffc8\054\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\062\uffc8\001\002\000\044\002\ufff5\004\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\044\ufff5\046\ufff5\047\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\001\002\000\004\047\342\001\002\000\044" +
    "\002\ufff4\004\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\044" +
    "\ufff4\046\ufff4\047\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\062\ufff4\001\002\000\004\004" +
    "\344\001\002\000\040\004\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\044\uffa8\046\uffa8\047\uffa8\052\uffa8\053\uffa8\054" +
    "\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\001\002\000\040" +
    "\004\uff82\012\uff82\013\uff82\014\uff82\015\uff82\044\uff82\046" +
    "\uff82\047\uff82\052\uff82\053\uff82\054\uff82\057\uff82\060\uff82" +
    "\061\uff82\062\uff82\001\002\000\004\047\uff88\001\002\000" +
    "\044\017\126\020\121\022\111\023\112\026\120\027\115" +
    "\031\114\032\125\033\117\034\122\035\123\036\110\037" +
    "\113\040\124\047\uff8c\051\352\052\uff8c\001\002\000\006" +
    "\047\uff89\052\351\001\002\000\004\047\uff87\001\002\000" +
    "\036\004\020\005\102\006\075\007\063\010\076\011\103" +
    "\020\065\030\077\044\100\046\067\054\060\057\055\060" +
    "\101\063\073\001\002\000\006\047\uff8b\052\uff8b\001\002" +
    "\000\004\041\355\001\002\000\036\004\020\005\102\006" +
    "\075\007\063\010\076\011\103\020\065\030\077\044\100" +
    "\046\067\054\060\057\055\060\101\063\073\001\002\000" +
    "\074\004\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\017\126" +
    "\020\121\022\111\023\112\026\120\027\115\031\114\032" +
    "\125\033\117\034\122\035\123\036\110\037\113\040\124" +
    "\044\ufff7\046\ufff7\047\ufff7\052\ufff7\053\ufff7\054\ufff7\057" +
    "\ufff7\060\ufff7\061\ufff7\062\ufff7\001\002\000\004\041\362" +
    "\001\002\000\014\004\020\044\260\054\060\057\055\060" +
    "\101\001\002\000\042\004\uff78\012\uff78\013\uff78\014\uff78" +
    "\015\uff78\044\uff78\046\uff78\047\uff78\052\uff78\053\uff78\054" +
    "\uff78\057\uff78\060\uff78\061\uff78\062\uff78\064\uffe8\001\002" +
    "\000\014\004\020\044\260\054\060\057\055\060\101\001" +
    "\002\000\042\004\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a" +
    "\044\uff7a\046\uff7a\047\uff7a\052\uff7a\053\uff7a\054\uff7a\057" +
    "\uff7a\060\uff7a\061\uff7a\062\uff7a\064\uffe8\001\002\000\006" +
    "\046\uff85\050\220\001\002\000\004\046\233\001\002\000" +
    "\012\002\uffd5\004\uffd5\047\uffd5\055\uffd5\001\002\000\010" +
    "\004\020\024\051\025\047\001\002\000\006\045\uffd4\051" +
    "\371\001\002\000\004\004\020\001\002\000\004\045\uffd3" +
    "\001\002\000\006\050\uffca\051\377\001\002\000\004\050" +
    "\375\001\002\000\010\004\020\024\051\025\047\001\002" +
    "\000\044\002\uff84\004\uff84\012\uff84\013\uff84\014\uff84\015" +
    "\uff84\044\uff84\046\uff84\047\uff84\052\uff84\053\uff84\054\uff84" +
    "\055\uff84\057\uff84\060\uff84\061\uff84\062\uff84\001\002\000" +
    "\004\004\020\001\002\000\004\050\uffcb\001\002\000\004" +
    "\047\uffef\001\002\000\004\046\u0103\001\002\000\006\004" +
    "\020\047\uffee\001\002\000\004\047\u0105\001\002\000\010" +
    "\002\uffec\004\uffec\055\uffec\001\002\000\004\002\001\001" +
    "\002\000\012\004\uff72\016\006\052\u0108\055\uff72\001\002" +
    "\000\010\004\uff71\016\006\055\uff71\001\002\000\006\004" +
    "\uff70\055\uff70\001\002\000\006\004\uff6f\055\uff6f\001\002" +
    "\000\010\002\uffd0\004\uffd0\055\uffd0\001\002\000\010\004" +
    "\020\024\051\025\047\001\002\000\004\041\u010e\001\002" +
    "\000\016\005\102\006\075\007\063\010\076\011\103\046" +
    "\067\001\002\000\012\002\uff83\004\uff83\052\uff83\055\uff83" +
    "\001\002\000\012\002\uffea\004\uffea\052\uffea\055\uffea\001" +
    "\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\026\011\015\022\010\024\013\025\003\035" +
    "\012\041\006\045\004\046\011\055\014\056\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\u0106\001" +
    "\001\000\002\001\001\000\004\025\026\001\001\000\022" +
    "\011\015\022\010\024\013\025\003\035\025\045\004\046" +
    "\011\056\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\011\015\022\010\024\013\025\003\035\023\045" +
    "\004\046\011\056\016\001\001\000\022\011\015\022\010" +
    "\024\013\025\003\035\022\045\004\046\011\056\016\001" +
    "\001\000\022\011\015\022\010\024\013\025\003\035\021" +
    "\045\004\046\011\056\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\u0101\001\001\000\016" +
    "\010\033\017\035\022\031\025\032\045\034\056\036\001" +
    "\001\000\016\010\u0100\017\035\022\031\025\032\045\034" +
    "\056\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\037\017\035\022\031\025\032" +
    "\045\034\056\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\372\026\373\001\001" +
    "\000\006\023\214\025\213\001\001\000\010\025\044\033" +
    "\045\040\047\001\001\000\006\007\212\034\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\053\034" +
    "\052\001\001\000\002\001\001\000\026\002\070\004\103" +
    "\012\055\013\061\015\067\016\065\021\056\025\071\032" +
    "\063\037\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\210\001\001\000\002\001\001\000\004\030" +
    "\207\001\001\000\002\001\001\000\004\007\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\002\070\004\103\012\055\013\061\015\201\016\065" +
    "\021\056\025\071\032\063\037\073\001\001\000\002\001" +
    "\001\000\030\002\070\003\175\004\103\012\055\013\061" +
    "\015\174\016\065\021\056\025\071\032\063\037\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\070\004\103\012\055" +
    "\013\061\015\163\016\065\021\056\025\071\032\063\037" +
    "\073\001\001\000\026\002\070\004\103\012\055\013\146" +
    "\015\147\016\065\021\056\025\071\032\063\037\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\104\001\001\000\002\001\001\000\026\002" +
    "\070\004\103\012\055\013\061\015\106\016\065\021\056" +
    "\025\071\032\063\037\073\001\001\000\002\001\001\000" +
    "\026\002\070\004\103\012\055\013\061\015\144\016\065" +
    "\021\056\025\071\032\063\037\073\001\001\000\026\002" +
    "\070\004\103\012\055\013\061\015\143\016\065\021\056" +
    "\025\071\032\063\037\073\001\001\000\026\002\070\004" +
    "\103\012\055\013\061\015\142\016\065\021\056\025\071" +
    "\032\063\037\073\001\001\000\026\002\070\004\103\012" +
    "\055\013\061\015\141\016\065\021\056\025\071\032\063" +
    "\037\073\001\001\000\026\002\070\004\103\012\055\013" +
    "\061\015\140\016\065\021\056\025\071\032\063\037\073" +
    "\001\001\000\026\002\070\004\103\012\055\013\061\015" +
    "\137\016\065\021\056\025\071\032\063\037\073\001\001" +
    "\000\004\030\136\001\001\000\026\002\070\004\103\012" +
    "\055\013\061\015\135\016\065\021\056\025\071\032\063" +
    "\037\073\001\001\000\026\002\070\004\103\012\055\013" +
    "\061\015\134\016\065\021\056\025\071\032\063\037\073" +
    "\001\001\000\026\002\070\004\103\012\055\013\061\015" +
    "\133\016\065\021\056\025\071\032\063\037\073\001\001" +
    "\000\026\002\070\004\103\012\055\013\061\015\132\016" +
    "\065\021\056\025\071\032\063\037\073\001\001\000\026" +
    "\002\070\004\103\012\055\013\061\015\131\016\065\021" +
    "\056\025\071\032\063\037\073\001\001\000\026\002\070" +
    "\004\103\012\055\013\061\015\130\016\065\021\056\025" +
    "\071\032\063\037\073\001\001\000\026\002\070\004\103" +
    "\012\055\013\061\015\127\016\065\021\056\025\071\032" +
    "\063\037\073\001\001\000\026\002\070\004\103\012\055" +
    "\013\061\015\126\016\065\021\056\025\071\032\063\037" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\070\004\103\012\055\013\061\015\155\016\065\020" +
    "\154\021\056\025\071\032\063\037\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\070\004\103\012\055\013\061\015\155\016\065\020\160" +
    "\021\056\025\071\032\063\037\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\070\004\103\012\055\013\061\015\155\016" +
    "\065\020\166\021\056\025\071\032\063\037\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\173\034\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\070\003\200\004\103" +
    "\012\055\013\061\015\174\016\065\021\056\025\071\032" +
    "\063\037\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\070\004" +
    "\103\012\055\013\061\015\205\016\065\021\056\025\071" +
    "\032\063\037\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\216\001\001\000\004\006\231\001\001\000\014" +
    "\014\221\025\220\040\223\053\224\054\222\001\001\000" +
    "\004\007\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\227\001\001\000\002\001\001\000\014\014" +
    "\221\025\220\040\223\053\224\054\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\005\251\006\241\013\236\021\234\025\252" +
    "\027\235\031\255\036\242\043\247\045\254\047\262\050" +
    "\245\052\250\056\261\057\240\060\253\001\001\000\004" +
    "\051\356\001\001\000\004\030\353\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\070\004\103\012\055" +
    "\013\061\015\346\016\065\021\056\025\071\032\063\037" +
    "\073\042\347\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\303\021\302\025\267\001" +
    "\001\000\002\001\001\000\004\051\265\001\001\000\040" +
    "\005\251\006\241\013\236\021\234\025\252\027\235\031" +
    "\255\036\242\045\254\047\262\050\263\052\250\056\261" +
    "\057\240\060\253\001\001\000\002\001\001\000\006\025" +
    "\271\056\273\001\001\000\002\001\001\000\010\013\236" +
    "\021\270\025\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\275\001\001\000\004" +
    "\051\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\002\070\004\103\012\055\013\061\015\277\016\065" +
    "\021\056\025\071\032\063\037\073\001\001\000\002\001" +
    "\001\000\036\005\251\006\241\013\236\021\234\025\252" +
    "\027\235\031\255\036\242\045\254\047\301\052\250\056" +
    "\261\057\240\060\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\070\004\103\012\055" +
    "\013\061\015\310\016\065\021\056\025\071\032\063\037" +
    "\073\001\001\000\002\001\001\000\036\005\251\006\241" +
    "\013\236\021\234\025\252\027\235\031\255\036\242\045" +
    "\254\047\312\052\250\056\261\057\240\060\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\221\025" +
    "\317\033\045\040\320\053\321\001\001\000\026\002\070" +
    "\004\103\012\055\013\061\015\316\016\065\021\056\025" +
    "\071\032\063\037\073\001\001\000\002\001\001\000\006" +
    "\007\325\034\211\001\001\000\006\007\324\034\052\001" +
    "\001\000\002\001\001\000\026\002\070\004\103\012\055" +
    "\013\061\015\323\016\065\021\056\025\071\032\063\037" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\070\004\103\012\055\013\061\015" +
    "\327\016\065\021\056\025\071\032\063\037\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\070\004" +
    "\103\012\055\013\061\015\332\016\065\021\056\025\071" +
    "\032\063\037\073\001\001\000\002\001\001\000\036\005" +
    "\251\006\241\013\236\021\234\025\252\027\235\031\255" +
    "\036\242\045\254\047\334\052\250\056\261\057\240\060" +
    "\253\001\001\000\002\001\001\000\036\005\251\006\241" +
    "\013\236\021\234\025\252\027\235\031\255\036\242\045" +
    "\254\047\336\052\250\056\261\057\240\060\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\070\004\103\012\055" +
    "\013\061\015\346\016\065\021\056\025\071\032\063\037" +
    "\073\042\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\070\004\103\012\055\013\061\015\355\016" +
    "\065\021\056\025\071\032\063\037\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\236\021\360\025" +
    "\267\001\001\000\002\001\001\000\010\013\236\021\362" +
    "\025\267\001\001\000\002\001\001\000\004\044\364\001" +
    "\001\000\004\006\365\001\001\000\002\001\001\000\012" +
    "\014\221\025\220\040\223\053\367\001\001\000\002\001" +
    "\001\000\006\023\371\025\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\221\025" +
    "\220\040\223\053\375\001\001\000\002\001\001\000\006" +
    "\025\372\026\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\u0103\017\035\022\031" +
    "\025\032\045\034\056\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u0108\001\001" +
    "\000\004\055\u0109\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\221\025\317\033\045" +
    "\040\320\053\u010c\001\001\000\002\001\001\000\010\004" +
    "\u010f\012\u010e\032\063\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


 
  public void report_fatal_error(String msg, Object info) {
    report_error(msg, info);
  }

  public void report_error(String msg, Object info) {
    Main.setToken((java_cup.runtime.Symbol)info);
    Main.handleSyntaxError("Syntax error: unexpected ");
  }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 152. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Program start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // array_element ::= identifier indexed_brackets 
            {
                ArrayElement RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new ArrayElement(id, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // array_element ::= function_call indexed_brackets 
            {
                ArrayElement RESULT = null;
                int fcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionCall fc = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionCall> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new ArrayElement(fc, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // array_element ::= array_literal indexed_brackets 
            {
                ArrayElement RESULT = null;
                int alleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int alright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayLiteral al = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayLiteral> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new ArrayElement(al, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // array_element_list ::= expr 
            {
                ArrayElementList RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ArrayElementList(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // array_element_list ::= expr COMMA array_element_list 
            {
                ArrayElementList RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int aelleft = CUP$parser$stack.peek().left;
                int aelright = CUP$parser$stack.peek().right;
                ArrayElementList ael = CUP$parser$stack.peek().<ArrayElementList> value();
                 RESULT = new ArrayElementList(e,ael); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // array_element_list ::= 
            {
                ArrayElementList RESULT = null;
                 RESULT = new ArrayElementList(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // array_literal ::= OPEN_BRACE array_element_list CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int obleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int obright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object ob = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int aelleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aelright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayElementList ael = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayElementList> value();
                 RESULT = new ArrayLiteral(ael, obleft, obright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literal",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // assignment_stmt ::= identifier GETS expr 
            {
                AssignmentStmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(id, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // assignment_stmt ::= identifier indexed_brackets GETS expr 
            {
                AssignmentStmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int ibleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ibright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                IndexedBrackets ib = CUP$parser$stack.elementAt(CUP$parser$top-2).<IndexedBrackets> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(id, ib, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",3, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // assignment_stmt ::= function_call indexed_brackets GETS expr 
            {
                AssignmentStmt RESULT = null;
                int fcleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int fcright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                FunctionCall fc = CUP$parser$stack.elementAt(CUP$parser$top-3).<FunctionCall> value();
                int ibleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ibright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                IndexedBrackets ib = CUP$parser$stack.elementAt(CUP$parser$top-2).<IndexedBrackets> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(fc, ib, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",3, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // block_stmt ::= OPEN_BRACE CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                 RESULT = new BlockStmt(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // block_stmt ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                StmtList sl = CUP$parser$stack.elementAt(CUP$parser$top-1).<StmtList> value();
                 RESULT = new BlockStmt(sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // block_stmt ::= OPEN_BRACE stmt_list return_stmt CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                StmtList sl = CUP$parser$stack.elementAt(CUP$parser$top-2).<StmtList> value();
                int rsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnStmt rs = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnStmt> value();
                 RESULT = new BlockStmt(sl, rs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // block_stmt ::= OPEN_BRACE return_stmt CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int rsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnStmt rs = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnStmt> value();
                 RESULT = new BlockStmt(rs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // brackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
                Brackets RESULT = null;
                 RESULT = new Brackets(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // brackets ::= OPEN_BRACKET CLOSE_BRACKET brackets 
            {
                Brackets RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new Brackets(b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",5, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // class_body ::= field_decl class_body 
            {
                ClassBody RESULT = null;
                int fdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FieldDecl fd = CUP$parser$stack.elementAt(CUP$parser$top-1).<FieldDecl> value();
                int cbleft = CUP$parser$stack.peek().left;
                int cbright = CUP$parser$stack.peek().right;
                ClassBody cb = CUP$parser$stack.peek().<ClassBody> value();
                 RESULT = new ClassBody(fd,cb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // class_body ::= function_decl class_body 
            {
                ClassBody RESULT = null;
                int fdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionDecl fd = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionDecl> value();
                int cbleft = CUP$parser$stack.peek().left;
                int cbright = CUP$parser$stack.peek().right;
                ClassBody cb = CUP$parser$stack.peek().<ClassBody> value();
                 RESULT = new ClassBody(fd,cb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // class_body ::= 
            {
                ClassBody RESULT = null;
                 RESULT = new ClassBody(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",6, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // class_decl ::= CLASS identifier OPEN_BRACE class_body CLOSE_BRACE 
            {
                ClassDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int cbleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int cbright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ClassBody cb = CUP$parser$stack.elementAt(CUP$parser$top-1).<ClassBody> value();
                 RESULT = new ClassDecl(id,cb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",7, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // class_decl ::= CLASS identifier EXTENDS identifier OPEN_BRACE class_body CLOSE_BRACE 
            {
                ClassDecl RESULT = null;
                int id1left = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int id1right = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                Identifier id1 = CUP$parser$stack.elementAt(CUP$parser$top-5).<Identifier> value();
                int id2left = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int id2right = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id2 = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int cbleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int cbright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ClassBody cb = CUP$parser$stack.elementAt(CUP$parser$top-1).<ClassBody> value();
                 RESULT = new ClassDecl(id1,id2,cb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",7, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // constant ::= literal 
            {
                Constant RESULT = null;
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Literal l = CUP$parser$stack.peek().<Literal> value();
                 RESULT = l; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // constant ::= array_literal 
            {
                Constant RESULT = null;
                int alleft = CUP$parser$stack.peek().left;
                int alright = CUP$parser$stack.peek().right;
                ArrayLiteral al = CUP$parser$stack.peek().<ArrayLiteral> value();
                 RESULT = al; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // dotable_expr ::= identifier 
            {
                DotableExpr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new DotableExpr(id,false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // dotable_expr ::= function_call 
            {
                DotableExpr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new DotableExpr(fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // dotable_expr ::= dotable_expr DOT identifier 
            {
                DotableExpr RESULT = null;
                int deleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int deright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                DotableExpr de = CUP$parser$stack.elementAt(CUP$parser$top-2).<DotableExpr> value();
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new DotableExpr(de,id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // dotable_expr ::= NEW identifier 
            {
                DotableExpr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new DotableExpr(id,true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // dotable_expr ::= THIS 
            {
                DotableExpr RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Object t = CUP$parser$stack.peek().<Object> value();
                 RESULT = new DotableExpr(tleft, tright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // dotable_expr ::= OPEN_PAREN dotable_expr CLOSE_PAREN 
            {
                DotableExpr RESULT = null;
                int deleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int deright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                DotableExpr de = CUP$parser$stack.elementAt(CUP$parser$top-1).<DotableExpr> value();
                 RESULT = new DotableExpr(de); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // empty_array_type ::= primitive_type brackets 
            {
                EmptyArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new EmptyArrayType(pt, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("empty_array_type",10, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // empty_array_type ::= identifier brackets 
            {
                EmptyArrayType RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new EmptyArrayType(id, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("empty_array_type",10, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // expr ::= dotable_expr 
            {
                Expr RESULT = null;
                int deleft = CUP$parser$stack.peek().left;
                int deright = CUP$parser$stack.peek().right;
                DotableExpr de = CUP$parser$stack.peek().<DotableExpr> value();
                 RESULT = de; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // expr ::= normal_expr 
            {
                Expr RESULT = null;
                int neleft = CUP$parser$stack.peek().left;
                int neright = CUP$parser$stack.peek().right;
                Expr ne = CUP$parser$stack.peek().<Expr> value();
                 RESULT = ne; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // field_decl ::= var_decl 
            {
                FieldDecl RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new FieldDecl(vd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // field_decl ::= short_tuple_decl 
            {
                FieldDecl RESULT = null;
                int stdleft = CUP$parser$stack.peek().left;
                int stdright = CUP$parser$stack.peek().right;
                ShortTupleDecl std = CUP$parser$stack.peek().<ShortTupleDecl> value();
                 RESULT = new FieldDecl(std); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // function_arg ::= expr 
            {
                FunctionArg RESULT = null;
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new FunctionArg(expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // function_arg ::= expr COMMA function_arg 
            {
                FunctionArg RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int faleft = CUP$parser$stack.peek().left;
                int faright = CUP$parser$stack.peek().right;
                FunctionArg fa = CUP$parser$stack.peek().<FunctionArg> value();
                 RESULT = new FunctionArg(expression, fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // function_call ::= identifier OPEN_PAREN function_arg CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int faleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int faright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionArg fa = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionArg> value();
                 RESULT = new FunctionCall(id, fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",15, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // function_call ::= identifier OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                 RESULT = new FunctionCall(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // function_call ::= dotable_expr DOT identifier OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int deleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int deright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                DotableExpr de = CUP$parser$stack.elementAt(CUP$parser$top-4).<DotableExpr> value();
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                 RESULT = new FunctionCall(de,id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",15, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // function_call ::= dotable_expr DOT identifier OPEN_PAREN function_arg CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int deleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int deright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                DotableExpr de = CUP$parser$stack.elementAt(CUP$parser$top-5).<DotableExpr> value();
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int faleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int faright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionArg fa = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionArg> value();
                 RESULT = new FunctionCall(de,id,fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",15, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // function_call ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int lleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int lright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Object l = CUP$parser$stack.elementAt(CUP$parser$top-3).<Object> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new FunctionCall(e, lleft, lright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",15, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // function_decl ::= identifier OPEN_PAREN CLOSE_PAREN return_type block_stmt 
            {
                FunctionDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int rtleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rtright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnType rt = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnType> value();
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = new FunctionDecl(id, rt, bs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",16, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // function_decl ::= identifier OPEN_PAREN function_param CLOSE_PAREN return_type block_stmt 
            {
                FunctionDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-5).<Identifier> value();
                int fpleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int fpright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                FunctionParam fp = CUP$parser$stack.elementAt(CUP$parser$top-3).<FunctionParam> value();
                int rtleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rtright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnType rt = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnType> value();
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = new FunctionDecl(id, fp, rt, bs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",16, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // function_param ::= identifier COLON type 
            {
                FunctionParam RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new FunctionParam(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // function_param ::= identifier COLON type COMMA function_param 
            {
                FunctionParam RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int fpleft = CUP$parser$stack.peek().left;
                int fpright = CUP$parser$stack.peek().right;
                FunctionParam fp = CUP$parser$stack.peek().<FunctionParam> value();
                 RESULT = new FunctionParam(id, t, fp); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",17, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // global_decl ::= var_decl SEMICOLON 
            {
                GlobalDecl RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl> value();
                 RESULT = new GlobalDecl(vd, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",18, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // global_decl ::= var_decl 
            {
                GlobalDecl RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new GlobalDecl(vd, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // global_decl ::= short_tuple_decl SEMICOLON 
            {
                GlobalDecl RESULT = null;
                int stdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int stdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ShortTupleDecl std = CUP$parser$stack.elementAt(CUP$parser$top-1).<ShortTupleDecl> value();
                 RESULT = new GlobalDecl(std, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",18, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // global_decl ::= short_tuple_decl 
            {
                GlobalDecl RESULT = null;
                int stdleft = CUP$parser$stack.peek().left;
                int stdright = CUP$parser$stack.peek().right;
                ShortTupleDecl std = CUP$parser$stack.peek().<ShortTupleDecl> value();
                 RESULT = new GlobalDecl(std, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // global_decl ::= simple_var_init SEMICOLON 
            {
                GlobalDecl RESULT = null;
                int svileft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sviright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                SimpleVarInit svi = CUP$parser$stack.elementAt(CUP$parser$top-1).<SimpleVarInit> value();
                 RESULT = new GlobalDecl(svi, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",18, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // global_decl ::= simple_var_init 
            {
                GlobalDecl RESULT = null;
                int svileft = CUP$parser$stack.peek().left;
                int sviright = CUP$parser$stack.peek().right;
                SimpleVarInit svi = CUP$parser$stack.peek().<SimpleVarInit> value();
                 RESULT = new GlobalDecl(svi, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // identifier ::= IDENTIFIER 
            {
                Identifier RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Identifier(id, idleft, idright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // identifier_list ::= identifier COMMA identifier_list 
            {
                IdentifierList RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int idlleft = CUP$parser$stack.peek().left;
                int idlright = CUP$parser$stack.peek().right;
                IdentifierList idl = CUP$parser$stack.peek().<IdentifierList> value();
                 RESULT = new IdentifierList(id, idl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // identifier_list ::= identifier 
            {
                IdentifierList RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new IdentifierList(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                IfStmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new IfStmt(e, s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt ELSE stmt 
            {
                IfStmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-4).<Expr> value();
                int s1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int s1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Stmt s1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Stmt> value();
                int s2left = CUP$parser$stack.peek().left;
                int s2right = CUP$parser$stack.peek().right;
                Stmt s2 = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new IfStmt(e, s1, s2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // indexed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                IndexedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new IndexedBrackets(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexed_brackets",22, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // indexed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET indexed_brackets 
            {
                IndexedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new IndexedBrackets(e, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexed_brackets",22, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // label ::= identifier COLON 
            {
                Label RESULT = null;
                int labelNameleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int labelNameright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier labelName = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                 RESULT = new Label(labelName.getTheValue(), labelNameleft, labelNameright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("label",23, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // literal ::= INTEGER_LITERAL 
            {
                Literal RESULT = null;
                int illeft = CUP$parser$stack.peek().left;
                int ilright = CUP$parser$stack.peek().right;
                String il = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(il, 0, illeft, ilright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // literal ::= CHARACTER_LITERAL 
            {
                Literal RESULT = null;
                int clleft = CUP$parser$stack.peek().left;
                int clright = CUP$parser$stack.peek().right;
                String cl = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(cl, 2, clleft, clright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // literal ::= STRING_LITERAL 
            {
                Literal RESULT = null;
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                String sl = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(sl, 1, slleft, slright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // literal ::= TRUE 
            {
                Literal RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Boolean t = CUP$parser$stack.peek().<Boolean> value();
                 RESULT = new Literal(true, tleft, tright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // literal ::= FALSE 
            {
                Literal RESULT = null;
                int fleft = CUP$parser$stack.peek().left;
                int fright = CUP$parser$stack.peek().right;
                Boolean f = CUP$parser$stack.peek().<Boolean> value();
                 RESULT = new Literal(false, fleft, fright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // mixed_array_type ::= primitive_type brackets 
            {
                MixedArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new MixedArrayType(pt, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_array_type",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // mixed_array_type ::= primitive_type mixed_brackets 
            {
                MixedArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int mbleft = CUP$parser$stack.peek().left;
                int mbright = CUP$parser$stack.peek().right;
                MixedBrackets mb = CUP$parser$stack.peek().<MixedBrackets> value();
                 RESULT = new MixedArrayType(pt, mb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_array_type",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // mixed_array_type ::= identifier brackets 
            {
                MixedArrayType RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new MixedArrayType(id, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_array_type",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // mixed_array_type ::= identifier mixed_brackets 
            {
                MixedArrayType RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int mbleft = CUP$parser$stack.peek().left;
                int mbright = CUP$parser$stack.peek().right;
                MixedBrackets mb = CUP$parser$stack.peek().<MixedBrackets> value();
                 RESULT = new MixedArrayType(id, mb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_array_type",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new MixedBrackets(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET mixed_brackets 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int mbleft = CUP$parser$stack.peek().left;
                int mbright = CUP$parser$stack.peek().right;
                MixedBrackets mb = CUP$parser$stack.peek().<MixedBrackets> value();
                 RESULT = new MixedBrackets(e, mb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",26, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET brackets 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new MixedBrackets(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",26, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // module_list ::= class_decl module_list 
            {
                ModuleList RESULT = null;
                int cdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int cdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ClassDecl cd = CUP$parser$stack.elementAt(CUP$parser$top-1).<ClassDecl> value();
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new ModuleList(cd, ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",27, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // module_list ::= function_decl module_list 
            {
                ModuleList RESULT = null;
                int fdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionDecl fd = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionDecl> value();
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new ModuleList(fd, ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",27, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // module_list ::= global_decl module_list 
            {
                ModuleList RESULT = null;
                int gdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int gdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                GlobalDecl gd = CUP$parser$stack.elementAt(CUP$parser$top-1).<GlobalDecl> value();
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new ModuleList(gd, ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",27, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // module_list ::= class_decl 
            {
                ModuleList RESULT = null;
                int cdleft = CUP$parser$stack.peek().left;
                int cdright = CUP$parser$stack.peek().right;
                ClassDecl cd = CUP$parser$stack.peek().<ClassDecl> value();
                 RESULT = new ModuleList(cd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // module_list ::= function_decl 
            {
                ModuleList RESULT = null;
                int fdleft = CUP$parser$stack.peek().left;
                int fdright = CUP$parser$stack.peek().right;
                FunctionDecl fd = CUP$parser$stack.peek().<FunctionDecl> value();
                 RESULT = new ModuleList(fd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // module_list ::= global_decl 
            {
                ModuleList RESULT = null;
                int gdleft = CUP$parser$stack.peek().left;
                int gdright = CUP$parser$stack.peek().right;
                GlobalDecl gd = CUP$parser$stack.peek().<GlobalDecl> value();
                 RESULT = new ModuleList(gd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // naked_stmt ::= assignment_stmt 
            {
                NakedStmt RESULT = null;
                int assleft = CUP$parser$stack.peek().left;
                int assright = CUP$parser$stack.peek().right;
                AssignmentStmt ass = CUP$parser$stack.peek().<AssignmentStmt> value();
                 RESULT = ass; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // naked_stmt ::= if_stmt 
            {
                NakedStmt RESULT = null;
                int isleft = CUP$parser$stack.peek().left;
                int isright = CUP$parser$stack.peek().right;
                IfStmt is = CUP$parser$stack.peek().<IfStmt> value();
                 RESULT = is; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // naked_stmt ::= while_stmt 
            {
                NakedStmt RESULT = null;
                int wsleft = CUP$parser$stack.peek().left;
                int wsright = CUP$parser$stack.peek().right;
                WhileStmt ws = CUP$parser$stack.peek().<WhileStmt> value();
                 RESULT = ws; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // naked_stmt ::= function_call 
            {
                NakedStmt RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // naked_stmt ::= block_stmt 
            {
                NakedStmt RESULT = null;
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = bs; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // naked_stmt ::= short_tuple_decl 
            {
                NakedStmt RESULT = null;
                int stdleft = CUP$parser$stack.peek().left;
                int stdright = CUP$parser$stack.peek().right;
                ShortTupleDecl std = CUP$parser$stack.peek().<ShortTupleDecl> value();
                 RESULT = std; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // naked_stmt ::= var_decl 
            {
                NakedStmt RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = vd; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // naked_stmt ::= var_init 
            {
                NakedStmt RESULT = null;
                int vileft = CUP$parser$stack.peek().left;
                int viright = CUP$parser$stack.peek().right;
                VarInit vi = CUP$parser$stack.peek().<VarInit> value();
                 RESULT = vi; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // naked_stmt ::= tuple_init 
            {
                NakedStmt RESULT = null;
                int tileft = CUP$parser$stack.peek().left;
                int tiright = CUP$parser$stack.peek().right;
                TupleInit ti = CUP$parser$stack.peek().<TupleInit> value();
                 RESULT = ti; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // naked_stmt ::= BREAK 
            {
                NakedStmt RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Break(bleft, bright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // naked_stmt ::= BREAK TO IDENTIFIER 
            {
                NakedStmt RESULT = null;
                int bleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int bright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object b = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int labelNameleft = CUP$parser$stack.peek().left;
                int labelNameright = CUP$parser$stack.peek().right;
                String labelName = CUP$parser$stack.peek().<String> value();
                 RESULT = new Break(labelName, bleft, bright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // naked_stmt ::= CONTINUE 
            {
                NakedStmt RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Object c = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Continue(cleft, cright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // naked_stmt ::= CONTINUE TO IDENTIFIER 
            {
                NakedStmt RESULT = null;
                int cleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int cright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object c = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int labelNameleft = CUP$parser$stack.peek().left;
                int labelNameright = CUP$parser$stack.peek().right;
                String labelName = CUP$parser$stack.peek().<String> value();
                 RESULT = new Continue(labelName, cleft, cright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // normal_expr ::= constant 
            {
                Expr RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Constant c = CUP$parser$stack.peek().<Constant> value();
                 RESULT = c; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // normal_expr ::= op_expr 
            {
                Expr RESULT = null;
                int oeleft = CUP$parser$stack.peek().left;
                int oeright = CUP$parser$stack.peek().right;
                Expr oe = CUP$parser$stack.peek().<Expr> value();
                 RESULT = oe; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // normal_expr ::= array_element 
            {
                Expr RESULT = null;
                int aeleft = CUP$parser$stack.peek().left;
                int aeright = CUP$parser$stack.peek().right;
                ArrayElement ae = CUP$parser$stack.peek().<ArrayElement> value();
                 RESULT = ae; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // normal_expr ::= NULL 
            {
                Expr RESULT = null;
                int nleft = CUP$parser$stack.peek().left;
                int nright = CUP$parser$stack.peek().right;
                Object n = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Null(nleft, nright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // normal_expr ::= OPEN_PAREN normal_expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int neleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int neright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr ne = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 ne.setSurroundedParentheses(); RESULT = ne; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",29, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // op_expr ::= MINUS expr 
            {
                Expr RESULT = null;
                int mleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int mright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object m = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(e, UnaryOp.INT_NEG, mleft, mright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // op_expr ::= NOT expr 
            {
                Expr RESULT = null;
                int nleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int nright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object n = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(e, UnaryOp.LOG_NEG, nleft, nright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // op_expr ::= expr PLUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.PLUS); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // op_expr ::= expr MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.MINUS); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // op_expr ::= expr TIMES expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.TIMES); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // op_expr ::= expr HIGH_MULT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.HIGH_MULT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // op_expr ::= expr DIVIDE expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.DIVIDE); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // op_expr ::= expr MODULO expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.MODULO); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // op_expr ::= expr NOT_EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.NOT_EQUAL); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // op_expr ::= expr EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.EQUAL); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // op_expr ::= expr LT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.LT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // op_expr ::= expr LEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.LEQ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // op_expr ::= expr GT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.GT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // op_expr ::= expr GEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.GEQ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 111: // op_expr ::= expr AND expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.AND); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 112: // op_expr ::= expr OR expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.OR); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 113: // primitive_type ::= INT 
            {
                PrimitiveType RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Object i = CUP$parser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(0); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 114: // primitive_type ::= BOOL 
            {
                PrimitiveType RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 115: // program ::= module_list 
            {
                Program RESULT = null;
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new Program(ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 116: // program ::= use_id module_list 
            {
                Program RESULT = null;
                int useidcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int useidcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                UseId useidc = CUP$parser$stack.elementAt(CUP$parser$top-1).<UseId> value();
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new Program(useidc, ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",31, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 117: // return_list ::= expr 
            {
                ReturnList RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ReturnList(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",32, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 118: // return_list ::= expr COMMA return_list 
            {
                ReturnList RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int rlleft = CUP$parser$stack.peek().left;
                int rlright = CUP$parser$stack.peek().right;
                ReturnList rl = CUP$parser$stack.peek().<ReturnList> value();
                 RESULT = new ReturnList(e, rl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 119: // return_stmt ::= RETURN 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.peek().left;
                int rright = CUP$parser$stack.peek().right;
                Object r = CUP$parser$stack.peek().<Object> value();
                 RESULT = new ReturnStmt(rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",33, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 120: // return_stmt ::= RETURN return_list 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int rlleft = CUP$parser$stack.peek().left;
                int rlright = CUP$parser$stack.peek().right;
                ReturnList rl = CUP$parser$stack.peek().<ReturnList> value();
                 RESULT = new ReturnStmt(rl, rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",33, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 121: // return_stmt ::= RETURN SEMICOLON 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = new ReturnStmt(rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",33, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 122: // return_stmt ::= RETURN return_list SEMICOLON 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int rlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnList rl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnList> value();
                 RESULT = new ReturnStmt(rl, rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",33, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 123: // return_type ::= COLON type_list 
            {
                ReturnType RESULT = null;
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                TypeList tl = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new ReturnType(tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",34, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 124: // return_type ::= 
            {
                ReturnType RESULT = null;
                 RESULT = new ReturnType(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",34, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 125: // short_tuple_decl ::= identifier COMMA identifier_list COLON type 
            {
                ShortTupleDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int idlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                IdentifierList idl = CUP$parser$stack.elementAt(CUP$parser$top-2).<IdentifierList> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new ShortTupleDecl(id, idl, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("short_tuple_decl",35, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 126: // simple_var_init ::= identifier COLON type GETS constant 
            {
                SimpleVarInit RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Constant c = CUP$parser$stack.peek().<Constant> value();
                 RESULT = new SimpleVarInit(id,t,c); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_var_init",36, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 127: // stmt ::= naked_stmt SEMICOLON 
            {
                Stmt RESULT = null;
                int nsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int nsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                NakedStmt ns = CUP$parser$stack.elementAt(CUP$parser$top-1).<NakedStmt> value();
                 RESULT = new Stmt(ns, true, nsleft, nsright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",37, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 128: // stmt ::= naked_stmt 
            {
                Stmt RESULT = null;
                int nsleft = CUP$parser$stack.peek().left;
                int nsright = CUP$parser$stack.peek().right;
                NakedStmt ns = CUP$parser$stack.peek().<NakedStmt> value();
                 RESULT = new Stmt(ns, false, nsleft, nsright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",37, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 129: // stmt_list ::= stmt 
            {
                StmtList RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new StmtList(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 130: // stmt_list ::= stmt stmt_list 
            {
                StmtList RESULT = null;
                int sleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Stmt s = CUP$parser$stack.elementAt(CUP$parser$top-1).<Stmt> value();
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                StmtList sl = CUP$parser$stack.peek().<StmtList> value();
                 RESULT = new StmtList(s, sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",38, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 131: // tuple_decl_list ::= COMMA var_decl 
            {
                TupleDeclList RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new TupleDeclList(vd, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",39, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 132: // tuple_decl_list ::= COMMA var_decl tuple_decl_list 
            {
                TupleDeclList RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl> value();
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                TupleDeclList tdl = CUP$parser$stack.peek().<TupleDeclList> value();
                 RESULT = new TupleDeclList(vd, tdl, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",39, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 133: // tuple_decl_list ::= COMMA UNDERSCORE 
            {
                TupleDeclList RESULT = null;
                 RESULT = new TupleDeclList(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",39, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 134: // tuple_decl_list ::= COMMA UNDERSCORE tuple_decl_list 
            {
                TupleDeclList RESULT = null;
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                TupleDeclList tdl = CUP$parser$stack.peek().<TupleDeclList> value();
                 RESULT = new TupleDeclList(tdl, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",39, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 135: // tuple_init ::= UNDERSCORE tuple_decl_list GETS function_call 
            {
                TupleInit RESULT = null;
                int tdlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TupleDeclList tdl = CUP$parser$stack.elementAt(CUP$parser$top-2).<TupleDeclList> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(tdl, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",40, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 136: // tuple_init ::= var_decl tuple_decl_list GETS function_call 
            {
                TupleInit RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-3).<VarDecl> value();
                int tdlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TupleDeclList tdl = CUP$parser$stack.elementAt(CUP$parser$top-2).<TupleDeclList> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(vd, tdl, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",40, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 137: // tuple_init ::= UNDERSCORE GETS function_call 
            {
                TupleInit RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",40, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 138: // type ::= primitive_type 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                PrimitiveType pt = CUP$parser$stack.peek().<PrimitiveType> value();
                 RESULT = pt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",41, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 139: // type ::= empty_array_type 
            {
                Type RESULT = null;
                int atleft = CUP$parser$stack.peek().left;
                int atright = CUP$parser$stack.peek().right;
                EmptyArrayType at = CUP$parser$stack.peek().<EmptyArrayType> value();
                 RESULT = at; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",41, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 140: // type ::= identifier 
            {
                Type RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 id.setIsClassName(); RESULT = id; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",41, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 141: // type_list ::= type 
            {
                TypeList RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new TypeList(t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",42, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 142: // type_list ::= type COMMA type_list 
            {
                TypeList RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                TypeList tl = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new TypeList(t, tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",42, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 143: // use_id ::= USE identifier 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new UseId(id, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",43, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 144: // use_id ::= USE identifier SEMICOLON 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                 RESULT = new UseId(id, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",43, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 145: // use_id ::= USE identifier use_id 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int uileft = CUP$parser$stack.peek().left;
                int uiright = CUP$parser$stack.peek().right;
                UseId ui = CUP$parser$stack.peek().<UseId> value();
                 RESULT = new UseId(id, ui, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",43, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 146: // use_id ::= USE identifier SEMICOLON use_id 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int uileft = CUP$parser$stack.peek().left;
                int uiright = CUP$parser$stack.peek().right;
                UseId ui = CUP$parser$stack.peek().<UseId> value();
                 RESULT = new UseId(id, ui, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",43, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 147: // var_decl ::= identifier COLON mixed_array_type 
            {
                VarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int matleft = CUP$parser$stack.peek().left;
                int matright = CUP$parser$stack.peek().right;
                MixedArrayType mat = CUP$parser$stack.peek().<MixedArrayType> value();
                 RESULT = new VarDecl(id, mat); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",44, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 148: // var_decl ::= identifier COLON primitive_type 
            {
                VarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                PrimitiveType pt = CUP$parser$stack.peek().<PrimitiveType> value();
                 RESULT = new VarDecl(id, pt); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",44, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 149: // var_decl ::= identifier COLON identifier 
            {
                VarDecl RESULT = null;
                int id1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int id1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int id2left = CUP$parser$stack.peek().left;
                int id2right = CUP$parser$stack.peek().right;
                Identifier id2 = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new VarDecl(id1, id2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",44, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 150: // var_init ::= identifier COLON type GETS expr 
            {
                VarInit RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new VarInit(id, t, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_init",45, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 151: // while_stmt ::= WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                WhileStmt RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new WhileStmt(expression, s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",46, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 152: // while_stmt ::= label WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                WhileStmt RESULT = null;
                int lleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int lright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                Label l = CUP$parser$stack.elementAt(CUP$parser$top-5).<Label> value();
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new WhileStmt(expression, s); RESULT.setLabel(l); l.setLoop(RESULT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",46, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
