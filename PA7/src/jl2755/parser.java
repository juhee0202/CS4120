
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package jl2755;

import jl2755.ast.*;
import java.io.IOException;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\003\003\000\002\003\005" +
    "\000\002\003\002\000\002\004\005\000\002\005\005\000" +
    "\002\005\006\000\002\005\006\000\002\006\004\000\002" +
    "\006\005\000\002\006\006\000\002\006\005\000\002\007" +
    "\004\000\002\007\005\000\002\010\004\000\002\010\004" +
    "\000\002\010\003\000\002\010\003\000\002\011\007\000" +
    "\002\011\011\000\002\012\003\000\002\012\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\005\000\002\013" +
    "\004\000\002\013\003\000\002\013\005\000\002\014\004" +
    "\000\002\015\003\000\002\015\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\005\000\002\017\003\000\002\017\005\000\002\020" +
    "\006\000\002\020\005\000\002\020\007\000\002\020\010" +
    "\000\002\020\006\000\002\021\007\000\002\021\010\000" +
    "\002\022\005\000\002\022\007\000\002\023\004\000\002" +
    "\023\003\000\002\023\004\000\002\023\003\000\002\023" +
    "\004\000\002\023\003\000\002\023\004\000\002\023\003" +
    "\000\002\024\003\000\002\025\005\000\002\025\003\000" +
    "\002\026\007\000\002\026\011\000\002\027\005\000\002" +
    "\027\006\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\004" +
    "\000\002\031\004\000\002\032\005\000\002\032\006\000" +
    "\002\032\006\000\002\033\004\000\002\033\004\000\002" +
    "\033\004\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\016\004\000\002\016\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\036\003\000\002\036\003\000\002\037\003" +
    "\000\002\037\004\000\002\040\003\000\002\040\005\000" +
    "\002\041\003\000\002\041\004\000\002\041\004\000\002" +
    "\041\005\000\002\042\004\000\002\042\002\000\002\043" +
    "\007\000\002\044\004\000\002\044\003\000\002\045\003" +
    "\000\002\045\004\000\002\046\004\000\002\046\005\000" +
    "\002\046\004\000\002\046\005\000\002\047\006\000\002" +
    "\047\006\000\002\047\005\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\051\003\000\002\051\005" +
    "\000\002\052\004\000\002\052\005\000\002\052\005\000" +
    "\002\052\006\000\002\053\005\000\002\053\005\000\002" +
    "\054\007\000\002\055\007" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\012\004\021\016\007\053\005\055\011\001" +
    "\002\000\010\044\246\050\247\051\245\001\002\000\006" +
    "\041\241\051\024\001\002\000\016\002\uffcc\004\uffcc\043" +
    "\uffcc\052\237\053\uffcc\055\uffcc\001\002\000\004\004\021" +
    "\001\002\000\004\002\232\001\002\000\004\004\021\001" +
    "\002\000\012\002\uffb2\004\021\053\005\055\011\001\002" +
    "\000\016\002\uffca\004\uffca\043\uffca\052\213\053\uffca\055" +
    "\uffca\001\002\000\004\002\uff94\001\002\000\012\002\uffb1" +
    "\004\021\053\005\055\011\001\002\000\010\004\021\053" +
    "\005\055\011\001\002\000\012\002\uffb3\004\021\053\005" +
    "\055\011\001\002\000\020\002\uffce\004\uffce\043\uffce\051" +
    "\024\052\026\053\uffce\055\uffce\001\002\000\120\002\uffc7" +
    "\004\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\022\uffc7\023\uffc7\026\uffc7\027\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\063\uffc7\001\002" +
    "\000\016\002\uffc8\004\uffc8\043\uffc8\052\023\053\uffc8\055" +
    "\uffc8\001\002\000\014\002\uffc9\004\uffc9\043\uffc9\053\uffc9" +
    "\055\uffc9\001\002\000\006\004\021\053\165\001\002\000" +
    "\004\041\027\001\002\000\014\002\uffcf\004\uffcf\043\uffcf" +
    "\053\uffcf\055\uffcf\001\002\000\014\004\021\044\032\054" +
    "\034\057\031\060\035\001\002\000\010\044\137\045\uffe8" +
    "\063\uffe8\001\002\000\004\004\021\001\002\000\014\004" +
    "\021\044\032\054\034\057\031\060\035\001\002\000\046" +
    "\002\uff80\004\uff80\012\uff80\013\uff80\014\uff80\015\uff80\043" +
    "\uff80\044\uff80\046\uff80\047\uff80\052\uff80\053\uff80\054\uff80" +
    "\055\uff80\057\uff80\060\uff80\061\uff80\063\uffe7\001\002\000" +
    "\004\044\156\001\002\000\106\002\uffe4\004\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\017\uffe4\020\uffe4\022\uffe4\023" +
    "\uffe4\026\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\057\uffe4\060\uffe4\061\uffe4\063\uffe4\001\002\000" +
    "\004\063\037\001\002\000\004\004\021\001\002\000\106" +
    "\002\uffe6\004\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017" +
    "\uffe6\020\uffe6\022\uffe6\023\uffe6\026\uffe6\027\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\043\uffe6\044\041\045\uffe6\046\uffe6\047\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\055\uffe6\057\uffe6\060\uffe6\061" +
    "\uffe6\063\uffe6\001\002\000\040\004\021\005\065\006\057" +
    "\007\046\010\061\011\064\020\047\030\062\044\063\045" +
    "\066\046\052\054\034\057\031\060\035\062\056\001\002" +
    "\000\004\045\155\001\002\000\104\002\uffdf\004\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\017\uffdf\020\uffdf\022\uffdf" +
    "\023\uffdf\026\uffdf\027\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\057\uffdf\060\uffdf\061\uffdf\001\002\000\110" +
    "\002\uffe7\004\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017" +
    "\uffe7\020\uffe7\022\uffe7\023\uffe7\026\uffe7\027\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\042\071\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\057\uffe7\060" +
    "\uffe7\061\uffe7\063\uffe7\001\002\000\106\002\uffe1\004\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1\022" +
    "\uffe1\023\uffe1\026\uffe1\027\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\057\uffe1\060\uffe1\061\uffe1\063\037\001" +
    "\002\000\104\002\uffc0\004\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\017\uffc0\020\uffc0\022\uffc0\023\uffc0\026\uffc0\027" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\001\002\000\036\004\021\005\065\006" +
    "\057\007\046\010\061\011\064\020\047\030\062\044\063" +
    "\046\052\054\034\057\031\060\035\062\056\001\002\000" +
    "\104\002\uffde\004\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\017\uffde\020\uffde\022\uffde\023\uffde\026\uffde\027\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\051" +
    "\uffde\052\uffde\053\uffde\054\uffde\055\uffde\057\uffde\060\uffde" +
    "\061\uffde\001\002\000\104\002\uffea\004\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\017\uffea\020\uffea\022\uffea\023\uffea" +
    "\026\uffea\027\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\043\uffea\044\uffea\045\uffea" +
    "\046\uffea\047\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\057\uffea\060\uffea\061\uffea\001\002\000\040\004\021" +
    "\005\065\006\057\007\046\010\061\011\064\020\047\030" +
    "\062\044\063\046\052\047\ufffb\054\034\057\031\060\035" +
    "\062\056\001\002\000\042\017\111\020\104\022\074\023" +
    "\075\026\103\027\100\031\077\032\110\033\102\034\105" +
    "\035\106\036\073\037\076\040\107\045\uffda\051\144\001" +
    "\002\000\110\002\uffe8\004\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\026\uffe8\027" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\042\071\043\uffe8\044\137\045\uffe8\046" +
    "\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\057\uffe8\060\uffe8\061\uffe8\063\uffe8\001\002\000\104\002" +
    "\uffdd\004\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd" +
    "\020\uffdd\022\uffdd\023\uffdd\026\uffdd\027\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\052" +
    "\uffdd\053\uffdd\054\uffdd\055\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\001\002\000\104\002\uffdc\004\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\017\uffdc\020\uffdc\022\uffdc\023\uffdc\026\uffdc" +
    "\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\057" +
    "\uffdc\060\uffdc\061\uffdc\001\002\000\104\002\uffbf\004\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf\022" +
    "\uffbf\023\uffbf\026\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\057\uffbf\060\uffbf\061\uffbf\001\002\000" +
    "\104\002\uffe0\004\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\017\uffe0\020\uffe0\022\uffe0\023\uffe0\026\uffe0\027\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\051" +
    "\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\057\uffe0\060\uffe0" +
    "\061\uffe0\001\002\000\104\002\uffbd\004\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\017\uffbd\020\uffbd\022\uffbd\023\uffbd" +
    "\026\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\001\002\000\036\004\021" +
    "\005\065\006\057\007\046\010\061\011\064\020\047\030" +
    "\062\044\063\046\052\054\034\057\031\060\035\062\056" +
    "\001\002\000\036\004\021\005\065\006\057\007\046\010" +
    "\061\011\064\020\047\030\062\044\063\046\052\054\034" +
    "\057\031\060\035\062\056\001\002\000\104\002\uffbc\004" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc" +
    "\022\uffbc\023\uffbc\026\uffbc\027\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\057\uffbc\060\uffbc\061\uffbc\001\002" +
    "\000\104\002\uffbe\004\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\017\uffbe\020\uffbe\022\uffbe\023\uffbe\026\uffbe\027\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\001\002\000\110\002\uffd6\004\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6\022\uffd6\023" +
    "\uffd6\026\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\057\uffd6\060\uffd6\061\uffd6\063\uffd6\001" +
    "\002\000\106\002\uffe9\004\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\017\uffe9\020\uffe9\022\uffe9\023\uffe9\026\uffe9\027" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\042\071\043\uffe9\044\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\057\uffe9\060\uffe9\061\uffe9\001\002\000\104\002\ufffe\004" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\017\ufffe\020\ufffe" +
    "\022\ufffe\023\ufffe\026\ufffe\027\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\043\ufffe" +
    "\044\ufffe\045\ufffe\046\ufffe\047\ufffe\051\ufffe\052\ufffe\053" +
    "\ufffe\054\ufffe\055\ufffe\057\ufffe\060\ufffe\061\ufffe\001\002" +
    "\000\036\004\021\005\065\006\057\007\046\010\061\011" +
    "\064\020\047\030\062\044\063\046\052\054\034\057\031" +
    "\060\035\062\056\001\002\000\040\017\111\020\104\022" +
    "\074\023\075\026\103\027\100\031\077\032\110\033\102" +
    "\034\105\035\106\036\073\037\076\040\107\043\101\001" +
    "\002\000\036\004\021\005\065\006\057\007\046\010\061" +
    "\011\064\020\047\030\062\044\063\046\052\054\034\057" +
    "\031\060\035\062\056\001\002\000\036\004\021\005\065" +
    "\006\057\007\046\010\061\011\064\020\047\030\062\044" +
    "\063\046\052\054\034\057\031\060\035\062\056\001\002" +
    "\000\036\004\021\005\065\006\057\007\046\010\061\011" +
    "\064\020\047\030\062\044\063\046\052\054\034\057\031" +
    "\060\035\062\056\001\002\000\036\004\021\005\065\006" +
    "\057\007\046\010\061\011\064\020\047\030\062\044\063" +
    "\046\052\054\034\057\031\060\035\062\056\001\002\000" +
    "\036\004\021\005\065\006\057\007\046\010\061\011\064" +
    "\020\047\030\062\044\063\046\052\054\034\057\031\060" +
    "\035\062\056\001\002\000\036\004\021\005\065\006\057" +
    "\007\046\010\061\011\064\020\047\030\062\044\063\046" +
    "\052\054\034\057\031\060\035\062\056\001\002\000\110" +
    "\002\uffc2\004\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\017" +
    "\uffc2\020\uffc2\022\uffc2\023\uffc2\026\uffc2\027\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\071\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\001\002\000\036\004\021\005\065" +
    "\006\057\007\046\010\061\011\064\020\047\030\062\044" +
    "\063\046\052\054\034\057\031\060\035\062\056\001\002" +
    "\000\036\004\021\005\065\006\057\007\046\010\061\011" +
    "\064\020\047\030\062\044\063\046\052\054\034\057\031" +
    "\060\035\062\056\001\002\000\036\004\021\005\065\006" +
    "\057\007\046\010\061\011\064\020\047\030\062\044\063" +
    "\046\052\054\034\057\031\060\035\062\056\001\002\000" +
    "\036\004\021\005\065\006\057\007\046\010\061\011\064" +
    "\020\047\030\062\044\063\046\052\054\034\057\031\060" +
    "\035\062\056\001\002\000\036\004\021\005\065\006\057" +
    "\007\046\010\061\011\064\020\047\030\062\044\063\046" +
    "\052\054\034\057\031\060\035\062\056\001\002\000\036" +
    "\004\021\005\065\006\057\007\046\010\061\011\064\020" +
    "\047\030\062\044\063\046\052\054\034\057\031\060\035" +
    "\062\056\001\002\000\036\004\021\005\065\006\057\007" +
    "\046\010\061\011\064\020\047\030\062\044\063\046\052" +
    "\054\034\057\031\060\035\062\056\001\002\000\036\004" +
    "\021\005\065\006\057\007\046\010\061\011\064\020\047" +
    "\030\062\044\063\046\052\054\034\057\031\060\035\062" +
    "\056\001\002\000\104\002\uffa4\004\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\017\uffa4\020\uffa4\022\074\023\075\026" +
    "\103\027\100\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\001\002\000\104\002\uff9b\004" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\017\111\020\104" +
    "\022\074\023\075\026\103\027\100\031\uff9b\032\uff9b\033" +
    "\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\047\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\054\uff9b\055\uff9b\057\uff9b\060\uff9b\061\uff9b\001\002" +
    "\000\104\002\uff9e\004\uff9e\012\uff9e\013\uff9e\014\uff9e\015" +
    "\uff9e\017\111\020\104\022\074\023\075\026\103\027\100" +
    "\031\077\032\110\033\102\034\105\035\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\057\uff9e\060" +
    "\uff9e\061\uff9e\001\002\000\104\002\uff98\004\uff98\012\uff98" +
    "\013\uff98\014\uff98\015\uff98\017\111\020\104\022\074\023" +
    "\075\026\103\027\100\031\077\032\110\033\102\034\105" +
    "\035\uff98\036\uff98\037\076\040\107\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\047\uff98\051\uff98\052\uff98\053\uff98\054\uff98" +
    "\055\uff98\057\uff98\060\uff98\061\uff98\001\002\000\104\002" +
    "\uff99\004\uff99\012\uff99\013\uff99\014\uff99\015\uff99\017\111" +
    "\020\104\022\074\023\075\026\103\027\100\031\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99" +
    "\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\051\uff99\052" +
    "\uff99\053\uff99\054\uff99\055\uff99\057\uff99\060\uff99\061\uff99" +
    "\001\002\000\104\002\uffa3\004\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\017\uffa3\020\uffa3\022\074\023\075\026\103" +
    "\027\100\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\001\002\000\104\002\uffa0\004\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\015\uffa0\017\uffa0\020\uffa0\022" +
    "\uffa0\023\uffa0\026\uffa0\027\uffa0\031\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\043\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\051\uffa0\052\uffa0\053\uffa0" +
    "\054\uffa0\055\uffa0\057\uffa0\060\uffa0\061\uffa0\001\002\000" +
    "\104\002\uff9a\004\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a" +
    "\017\111\020\104\022\074\023\075\026\103\027\100\031" +
    "\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\057\uff9a\060\uff9a" +
    "\061\uff9a\001\002\000\106\002\uffc1\004\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\017\uffc1\020\uffc1\022\uffc1\023\uffc1" +
    "\026\uffc1\027\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\057\uffc1\060\uffc1\061\uffc1\001\002\000\104" +
    "\002\uff9f\004\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\017" +
    "\uff9f\020\uff9f\022\uff9f\023\uff9f\026\uff9f\027\uff9f\031\uff9f" +
    "\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\054\uff9f\055\uff9f\057\uff9f\060\uff9f\061" +
    "\uff9f\001\002\000\104\002\uff9c\004\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\017\111\020\104\022\074\023\075\026" +
    "\103\027\100\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c" +
    "\036\uff9c\037\uff9c\040\uff9c\043\uff9c\044\uff9c\045\uff9c\046" +
    "\uff9c\047\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\001\002\000\104\002\uff9d\004" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\017\111\020\104" +
    "\022\074\023\075\026\103\027\100\031\077\032\110\033" +
    "\102\034\105\035\uff9d\036\uff9d\037\uff9d\040\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\057\uff9d\060\uff9d\061\uff9d\001\002" +
    "\000\104\002\uffa1\004\uffa1\012\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\017\uffa1\020\uffa1\022\uffa1\023\uffa1\026\uffa1\027\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\057\uffa1\060" +
    "\uffa1\061\uffa1\001\002\000\104\002\uffa2\004\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\017\uffa2\020\uffa2\022\uffa2\023" +
    "\uffa2\026\uffa2\027\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\057\uffa2\060\uffa2\061\uffa2\001\002\000\104\002" +
    "\uff97\004\uff97\012\uff97\013\uff97\014\uff97\015\uff97\017\111" +
    "\020\104\022\074\023\075\026\103\027\100\031\077\032" +
    "\110\033\102\034\105\035\106\036\uff97\037\076\040\107" +
    "\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\051\uff97\052" +
    "\uff97\053\uff97\054\uff97\055\uff97\057\uff97\060\uff97\061\uff97" +
    "\001\002\000\040\017\uffe0\020\uffe0\022\uffe0\023\uffe0\026" +
    "\uffe0\027\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\045\135\001\002\000\042\017" +
    "\uffe1\020\uffe1\022\uffe1\023\uffe1\026\uffe1\027\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\045\134\063\037\001\002\000\036\017\111\020\104" +
    "\022\074\023\075\026\103\027\100\031\077\032\110\033" +
    "\102\034\105\035\106\036\073\037\076\040\107\001\002" +
    "\000\106\002\uffe3\004\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3\026\uffe3\027\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\057\uffe3\060" +
    "\uffe3\061\uffe3\063\uffe3\001\002\000\104\002\uffdb\004\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb\022" +
    "\uffdb\023\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\043\uffdb\044" +
    "\uffdb\045\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb\053\uffdb" +
    "\054\uffdb\055\uffdb\057\uffdb\060\uffdb\061\uffdb\001\002\000" +
    "\104\002\uffa5\004\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\017\uffa5\020\uffa5\022\uffa5\023\uffa5\026\uffa5\027\uffa5\031" +
    "\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5" +
    "\040\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\001\002\000\040\004\021\005\065\006\057\007" +
    "\046\010\061\011\064\020\047\030\062\044\063\045\142" +
    "\046\052\054\034\057\031\060\035\062\056\001\002\000" +
    "\104\002\000\004\000\012\000\013\000\014\000\015\000" +
    "\017\000\020\000\022\000\023\000\026\000\027\000\031" +
    "\000\032\000\033\000\034\000\035\000\036\000\037\000" +
    "\040\000\043\000\044\000\045\000\046\000\047\000\051" +
    "\000\052\000\053\000\054\000\055\000\057\000\060\000" +
    "\061\000\001\002\000\004\045\143\001\002\000\110\002" +
    "\uffd7\004\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7" +
    "\020\uffd7\022\uffd7\023\uffd7\026\uffd7\027\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\063\uffd7\001\002\000\110\002\uffd8\004\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8\022\uffd8" +
    "\023\uffd8\026\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\057\uffd8\060\uffd8\061\uffd8\063\uffd8" +
    "\001\002\000\036\004\021\005\065\006\057\007\046\010" +
    "\061\011\064\020\047\030\062\044\063\046\052\054\034" +
    "\057\031\060\035\062\056\001\002\000\004\045\uffd9\001" +
    "\002\000\042\017\111\020\104\022\074\023\075\026\103" +
    "\027\100\031\077\032\110\033\102\034\105\035\106\036" +
    "\073\037\076\040\107\047\ufffd\051\151\001\002\000\004" +
    "\047\150\001\002\000\106\002\ufffa\004\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa" +
    "\026\ufffa\027\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\051\ufffa\052\ufffa\053\ufffa\054" +
    "\ufffa\055\ufffa\057\ufffa\060\ufffa\061\ufffa\001\002\000\040" +
    "\004\021\005\065\006\057\007\046\010\061\011\064\020" +
    "\047\030\062\044\063\046\052\047\ufffb\054\034\057\031" +
    "\060\035\062\056\001\002\000\004\047\ufffc\001\002\000" +
    "\104\002\uffa6\004\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6" +
    "\017\uffa6\020\uffa6\022\uffa6\023\uffa6\026\uffa6\027\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\057\uffa6\060\uffa6" +
    "\061\uffa6\001\002\000\104\002\uffff\004\uffff\012\uffff\013" +
    "\uffff\014\uffff\015\uffff\017\uffff\020\uffff\022\uffff\023\uffff" +
    "\026\uffff\027\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035" +
    "\uffff\036\uffff\037\uffff\040\uffff\043\uffff\044\uffff\045\uffff" +
    "\046\uffff\047\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055" +
    "\uffff\057\uffff\060\uffff\061\uffff\001\002\000\110\002\uffd5" +
    "\004\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\017\uffd5\020" +
    "\uffd5\022\uffd5\023\uffd5\026\uffd5\027\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\063\uffd5\001\002\000\036\004\021\005\065\006\057" +
    "\007\046\010\061\011\064\020\047\030\062\044\063\046" +
    "\052\054\034\057\031\060\035\062\056\001\002\000\040" +
    "\017\111\020\104\022\074\023\075\026\103\027\100\031" +
    "\077\032\110\033\102\034\105\035\106\036\073\037\076" +
    "\040\107\045\160\001\002\000\110\002\uffd4\004\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4\020\uffd4\022\uffd4" +
    "\023\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\057\uffd4\060\uffd4\061\uffd4\063\uffd4" +
    "\001\002\000\006\045\uffe7\063\uffe7\001\002\000\006\045" +
    "\134\063\037\001\002\000\106\002\uffe5\004\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020\uffe5\022\uffe5\023" +
    "\uffe5\026\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\057\uffe5\060\uffe5\061\uffe5\063\uffe5\001\002\000" +
    "\004\050\171\001\002\000\006\041\uff83\051\024\001\002" +
    "\000\006\041\uff85\051\024\001\002\000\004\041\uff84\001" +
    "\002\000\004\041\uff82\001\002\000\006\024\175\025\173" +
    "\001\002\000\050\002\uff75\004\uff75\012\uff75\013\uff75\014" +
    "\uff75\015\uff75\041\uff75\043\uff75\044\uff75\046\uff75\047\uff75" +
    "\051\uff75\052\uff75\053\uff75\054\uff75\055\uff75\057\uff75\060" +
    "\uff75\061\uff75\001\002\000\054\002\uff95\004\uff95\012\uff95" +
    "\013\uff95\014\uff95\015\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\051\uff95\052\uff95\053\uff95" +
    "\054\uff95\055\uff95\057\uff95\060\uff95\061\uff95\001\002\000" +
    "\010\041\uff74\042\176\051\uff74\001\002\000\054\002\uff96" +
    "\004\uff96\012\uff96\013\uff96\014\uff96\015\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\051\uff96" +
    "\052\uff96\053\uff96\054\uff96\055\uff96\057\uff96\060\uff96\061" +
    "\uff96\001\002\000\040\004\021\005\065\006\057\007\046" +
    "\010\061\011\064\020\047\030\062\043\201\044\063\046" +
    "\052\054\034\057\031\060\035\062\056\001\002\000\050" +
    "\002\uffba\004\uffba\012\uffba\013\uffba\014\uffba\015\uffba\041" +
    "\uffba\043\uffba\044\uffba\046\uffba\047\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\057\uffba\060\uffba\061\uffba\001" +
    "\002\000\006\041\uffbb\051\uffbb\001\002\000\054\002\ufff2" +
    "\004\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\041\ufff2\042" +
    "\206\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\054\ufff2\055\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\001\002\000\040\017\111\020\104\022\074\023\075" +
    "\026\103\027\100\031\077\032\110\033\102\034\105\035" +
    "\106\036\073\037\076\040\107\043\203\001\002\000\052" +
    "\002\uffb9\004\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\041" +
    "\uffb9\042\176\043\uffb9\044\uffb9\046\uffb9\047\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\001\002\000\050\002\uffb8\004\uffb8\012\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\041\uffb8\043\uffb8\044\uffb8\046\uffb8\047" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\057\uffb8" +
    "\060\uffb8\061\uffb8\001\002\000\050\002\uffb7\004\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\041\uffb7\043\uffb7\044\uffb7" +
    "\046\uffb7\047\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055" +
    "\uffb7\057\uffb7\060\uffb7\061\uffb7\001\002\000\004\043\201" +
    "\001\002\000\052\002\ufff1\004\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\041\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1" +
    "\047\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\001\002\000\004\002\uffb6\001\002" +
    "\000\004\002\uff93\001\002\000\004\002\uffb4\001\002\000" +
    "\014\002\uffcb\004\uffcb\043\uffcb\053\uffcb\055\uffcb\001\002" +
    "\000\004\002\uffb5\001\002\000\006\042\217\056\216\001" +
    "\002\000\004\004\021\001\002\000\006\004\021\053\005" +
    "\001\002\000\010\004\021\043\uffed\053\005\001\002\000" +
    "\004\043\224\001\002\000\010\004\021\043\uffee\053\005" +
    "\001\002\000\004\043\ufff0\001\002\000\012\002\uffec\004" +
    "\uffec\053\uffec\055\uffec\001\002\000\004\043\uffef\001\002" +
    "\000\004\042\227\001\002\000\006\004\021\053\005\001" +
    "\002\000\004\043\231\001\002\000\012\002\uffeb\004\uffeb" +
    "\053\uffeb\055\uffeb\001\002\000\004\002\001\001\002\000" +
    "\014\004\uff79\016\007\052\234\053\uff79\055\uff79\001\002" +
    "\000\012\004\uff78\016\007\053\uff78\055\uff78\001\002\000" +
    "\010\004\uff77\053\uff77\055\uff77\001\002\000\010\004\uff76" +
    "\053\uff76\055\uff76\001\002\000\014\002\uffcd\004\uffcd\043" +
    "\uffcd\053\uffcd\055\uffcd\001\002\000\004\041\243\001\002" +
    "\000\014\004\021\044\032\054\034\057\031\060\035\001" +
    "\002\000\046\002\uff7f\004\uff7f\012\uff7f\013\uff7f\014\uff7f" +
    "\015\uff7f\043\uff7f\044\uff7f\046\uff7f\047\uff7f\052\uff7f\053" +
    "\uff7f\054\uff7f\055\uff7f\057\uff7f\060\uff7f\061\uff7f\063\uffe7" +
    "\001\002\000\014\004\021\044\032\054\034\057\031\060" +
    "\035\001\002\000\046\002\uff81\004\uff81\012\uff81\013\uff81" +
    "\014\uff81\015\uff81\043\uff81\044\uff81\046\uff81\047\uff81\052" +
    "\uff81\053\uff81\054\uff81\055\uff81\057\uff81\060\uff81\061\uff81" +
    "\063\uffe7\001\002\000\004\004\021\001\002\000\006\004" +
    "\021\045\261\001\002\000\010\004\021\024\175\025\173" +
    "\001\002\000\052\002\uff7c\004\uff7c\012\uff7c\013\uff7c\014" +
    "\uff7c\015\uff7c\041\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c" +
    "\047\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\057" +
    "\uff7c\060\uff7c\061\uff7c\001\002\000\052\002\uff7d\004\uff7d" +
    "\012\uff7d\013\uff7d\014\uff7d\015\uff7d\041\uff7d\043\uff7d\044" +
    "\uff7d\045\uff7d\046\uff7d\047\uff7d\051\uff7d\052\uff7d\053\uff7d" +
    "\054\uff7d\055\uff7d\057\uff7d\060\uff7d\061\uff7d\001\002\000" +
    "\052\002\uff74\004\uff74\012\uff74\013\uff74\014\uff74\015\uff74" +
    "\041\uff7e\042\176\043\uff74\044\uff74\046\uff74\047\uff74\051" +
    "\uff74\052\uff74\053\uff74\054\uff74\055\uff74\057\uff74\060\uff74" +
    "\061\uff74\001\002\000\004\041\254\001\002\000\036\004" +
    "\021\005\065\006\057\007\046\010\061\011\064\020\047" +
    "\030\062\044\063\046\052\054\034\057\031\060\035\062" +
    "\056\001\002\000\100\002\uff73\004\uff73\012\uff73\013\uff73" +
    "\014\uff73\015\uff73\017\111\020\104\022\074\023\075\026" +
    "\103\027\100\031\077\032\110\033\102\034\105\035\106" +
    "\036\073\037\076\040\107\043\uff73\044\uff73\046\uff73\047" +
    "\uff73\052\uff73\053\uff73\054\uff73\055\uff73\057\uff73\060\uff73" +
    "\061\uff73\001\002\000\050\002\uffbb\004\uffbb\012\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\041\uffe2\043\uffbb\044\uffbb\046\uffbb" +
    "\047\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\001\002\000\004\050\360\001\002" +
    "\000\004\045\355\001\002\000\006\046\uff8b\050\263\001" +
    "\002\000\004\046\273\001\002\000\010\004\021\024\175" +
    "\025\173\001\002\000\004\046\uff8c\001\002\000\052\002" +
    "\uff7e\004\uff7e\012\uff7e\013\uff7e\014\uff7e\015\uff7e\042\206" +
    "\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\051\uff7e\052" +
    "\uff7e\053\uff7e\054\uff7e\055\uff7e\057\uff7e\060\uff7e\061\uff7e" +
    "\001\002\000\006\046\uff7b\051\267\001\002\000\010\004" +
    "\021\024\175\025\173\001\002\000\004\046\uff7a\001\002" +
    "\000\050\002\uffe2\004\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\057\uffe2\060\uffe2\061" +
    "\uffe2\001\002\000\014\002\uffd3\004\uffd3\043\uffd3\053\uffd3" +
    "\055\uffd3\001\002\000\032\004\021\012\305\014\314\015" +
    "\276\044\032\046\273\047\302\053\005\054\034\057\031" +
    "\060\035\061\303\001\002\000\042\004\uffad\012\uffad\013" +
    "\uffad\014\uffad\015\uffad\042\071\044\uffad\046\uffad\047\uffad" +
    "\052\uffad\053\uffad\054\uffad\057\uffad\060\uffad\061\uffad\063" +
    "\uffe7\001\002\000\036\004\uffaf\012\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\044\uffaf\046\uffaf\047\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\001\002\000\042\004\021" +
    "\005\065\006\057\007\046\010\061\011\064\020\047\030" +
    "\062\044\063\046\052\047\uff90\052\344\054\034\057\031" +
    "\060\035\062\056\001\002\000\036\004\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\044\uffa9\046\uffa9\047\uffa9\052\uffa9" +
    "\053\uffa9\054\uffa9\057\uffa9\060\uffa9\061\uffa9\001\002\000" +
    "\036\004\uffac\012\uffac\013\uffac\014\uffac\015\uffac\044\uffac" +
    "\046\uffac\047\uffac\052\uffac\053\uffac\054\uffac\057\uffac\060" +
    "\uffac\061\uffac\001\002\000\036\004\uff88\012\uff88\013\uff88" +
    "\014\uff88\015\uff88\044\uff88\046\uff88\047\uff88\052\343\053" +
    "\uff88\054\uff88\057\uff88\060\uff88\061\uff88\001\002\000\044" +
    "\002\ufff6\004\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\043" +
    "\ufff6\044\ufff6\046\ufff6\047\ufff6\052\ufff6\053\ufff6\054\ufff6" +
    "\055\ufff6\057\ufff6\060\ufff6\061\ufff6\001\002\000\036\004" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\044\uffa7\046\uffa7" +
    "\047\uffa7\052\uffa7\053\uffa7\054\uffa7\057\uffa7\060\uffa7\061" +
    "\uffa7\001\002\000\006\015\276\047\340\001\002\000\004" +
    "\044\332\001\002\000\004\047\331\001\002\000\036\004" +
    "\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\044\uffa8\046\uffa8" +
    "\047\uffa8\052\uffa8\053\uffa8\054\uffa8\057\uffa8\060\uffa8\061" +
    "\uffa8\001\002\000\036\004\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\044\uffb0\046\uffb0\047\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\057\uffb0\060\uffb0\061\uffb0\001\002\000\016\041\325" +
    "\042\071\044\137\050\247\051\245\063\uffe8\001\002\000" +
    "\036\004\uffae\012\uffae\013\uffae\014\uffae\015\uffae\044\uffae" +
    "\046\uffae\047\uffae\052\uffae\053\uffae\054\uffae\057\uffae\060" +
    "\uffae\061\uffae\001\002\000\036\004\uffab\012\uffab\013\uffab" +
    "\014\uffab\015\uffab\044\uffab\046\uffab\047\uffab\052\uffab\053" +
    "\uffab\054\uffab\057\uffab\060\uffab\061\uffab\001\002\000\004" +
    "\044\320\001\002\000\040\004\uffaa\012\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\044\uffaa\046\uffaa\047\uffaa\051\024\052\uffaa" +
    "\053\uffaa\054\uffaa\057\uffaa\060\uffaa\061\uffaa\001\002\000" +
    "\032\004\021\012\305\014\314\015\uff87\044\032\046\273" +
    "\047\uff87\053\005\054\034\057\031\060\035\061\303\001" +
    "\002\000\006\015\uff86\047\uff86\001\002\000\036\004\021" +
    "\005\065\006\057\007\046\010\061\011\064\020\047\030" +
    "\062\044\063\046\052\054\034\057\031\060\035\062\056" +
    "\001\002\000\040\017\111\020\104\022\074\023\075\026" +
    "\103\027\100\031\077\032\110\033\102\034\105\035\106" +
    "\036\073\037\076\040\107\045\322\001\002\000\026\004" +
    "\021\012\305\014\314\044\032\046\273\053\005\054\034" +
    "\057\031\060\035\061\303\001\002\000\036\004\uff72\012" +
    "\uff72\013\uff72\014\uff72\015\uff72\044\uff72\046\uff72\047\uff72" +
    "\052\uff72\053\uff72\054\uff72\057\uff72\060\uff72\061\uff72\001" +
    "\002\000\004\041\327\001\002\000\036\004\021\005\065" +
    "\006\057\007\046\010\061\011\064\020\047\030\062\044" +
    "\063\046\052\054\034\057\031\060\035\062\056\001\002" +
    "\000\072\004\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\017" +
    "\111\020\104\022\074\023\075\026\103\027\100\031\077" +
    "\032\110\033\102\034\105\035\106\036\073\037\076\040" +
    "\107\044\ufff9\046\ufff9\047\ufff9\052\ufff9\053\ufff9\054\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\001\002\000\036\004\021\005" +
    "\065\006\057\007\046\010\061\011\064\020\047\030\062" +
    "\044\063\046\052\054\034\057\031\060\035\062\056\001" +
    "\002\000\072\004\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\017\111\020\104\022\074\023\075\026\103\027\100\031" +
    "\077\032\110\033\102\034\105\035\106\036\073\037\076" +
    "\040\107\044\ufff8\046\ufff8\047\ufff8\052\ufff8\053\ufff8\054" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\001\002\000\044\002\ufff3" +
    "\004\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\043\ufff3\044" +
    "\ufff3\046\ufff3\047\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3" +
    "\057\ufff3\060\ufff3\061\ufff3\001\002\000\036\004\021\005" +
    "\065\006\057\007\046\010\061\011\064\020\047\030\062" +
    "\044\063\046\052\054\034\057\031\060\035\062\056\001" +
    "\002\000\040\017\111\020\104\022\074\023\075\026\103" +
    "\027\100\031\077\032\110\033\102\034\105\035\106\036" +
    "\073\037\076\040\107\045\334\001\002\000\026\004\021" +
    "\012\305\014\314\044\032\046\273\053\005\054\034\057" +
    "\031\060\035\061\303\001\002\000\036\004\uffc4\012\uffc4" +
    "\013\336\014\uffc4\015\uffc4\044\uffc4\046\uffc4\047\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\057\uffc4\060\uffc4\061\uffc4\001\002" +
    "\000\026\004\021\012\305\014\314\044\032\046\273\053" +
    "\005\054\034\057\031\060\035\061\303\001\002\000\036" +
    "\004\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\044\uffc3\046" +
    "\uffc3\047\uffc3\052\uffc3\053\uffc3\054\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\001\002\000\044\002\ufff5\004\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\043\ufff5\044\ufff5\046\ufff5\047\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\001\002\000\004\047\342\001\002\000\044\002\ufff4" +
    "\004\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\043\ufff4\044" +
    "\ufff4\046\ufff4\047\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\001\002\000\036\004\uff89\012" +
    "\uff89\013\uff89\014\uff89\015\uff89\044\uff89\046\uff89\047\uff89" +
    "\052\uff89\053\uff89\054\uff89\057\uff89\060\uff89\061\uff89\001" +
    "\002\000\004\047\uff8e\001\002\000\044\017\111\020\104" +
    "\022\074\023\075\026\103\027\100\031\077\032\110\033" +
    "\102\034\105\035\106\036\073\037\076\040\107\047\uff92" +
    "\051\350\052\uff92\001\002\000\006\047\uff8f\052\347\001" +
    "\002\000\004\047\uff8d\001\002\000\036\004\021\005\065" +
    "\006\057\007\046\010\061\011\064\020\047\030\062\044" +
    "\063\046\052\054\034\057\031\060\035\062\056\001\002" +
    "\000\006\047\uff91\052\uff91\001\002\000\004\041\353\001" +
    "\002\000\036\004\021\005\065\006\057\007\046\010\061" +
    "\011\064\020\047\030\062\044\063\046\052\054\034\057" +
    "\031\060\035\062\056\001\002\000\072\004\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\017\111\020\104\022\074\023" +
    "\075\026\103\027\100\031\077\032\110\033\102\034\105" +
    "\035\106\036\073\037\076\040\107\044\ufff7\046\ufff7\047" +
    "\ufff7\052\ufff7\053\ufff7\054\ufff7\057\ufff7\060\ufff7\061\ufff7" +
    "\001\002\000\006\046\uff8b\050\263\001\002\000\004\046" +
    "\273\001\002\000\014\002\uffd2\004\uffd2\043\uffd2\053\uffd2" +
    "\055\uffd2\001\002\000\010\004\021\024\175\025\173\001" +
    "\002\000\006\045\uffd1\051\362\001\002\000\004\004\021" +
    "\001\002\000\004\045\uffd0\001\002\000\006\050\uffc5\051" +
    "\370\001\002\000\004\050\366\001\002\000\010\004\021" +
    "\024\175\025\173\001\002\000\044\002\uff8a\004\uff8a\012" +
    "\uff8a\013\uff8a\014\uff8a\015\uff8a\043\uff8a\044\uff8a\046\uff8a" +
    "\047\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a\057\uff8a\060" +
    "\uff8a\061\uff8a\001\002\000\004\004\021\001\002\000\004" +
    "\050\uffc6\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\030\011\016\021\011\023\014\024\003\033" +
    "\013\037\007\043\005\047\021\052\015\053\017\054\012" +
    "\001\001\000\002\001\001\000\004\046\237\001\001\000" +
    "\002\001\001\000\004\024\232\001\001\000\002\001\001" +
    "\000\004\024\214\001\001\000\024\011\016\021\011\023" +
    "\014\024\003\033\213\043\005\047\021\053\017\054\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\011" +
    "\016\021\011\023\014\024\003\033\211\043\005\047\021" +
    "\053\017\054\012\001\001\000\024\011\016\021\011\023" +
    "\014\024\003\033\210\043\005\047\021\053\017\054\012" +
    "\001\001\000\024\011\016\021\011\023\014\024\003\033" +
    "\207\043\005\047\021\053\017\054\012\001\001\000\004" +
    "\046\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\163\053\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\035\020\032\024" +
    "\027\001\001\000\002\001\001\000\004\024\162\001\001" +
    "\000\010\013\161\020\160\024\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\037\001\001\000\002\001\001\000\030\002" +
    "\054\004\066\012\042\013\044\015\052\016\047\017\041" +
    "\020\043\024\053\030\050\035\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\054\004\066\012" +
    "\042\013\044\015\152\016\047\020\043\024\053\030\050" +
    "\035\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\054\003\146\004\066\012\042\013\044\015\145" +
    "\016\047\020\043\024\053\030\050\035\057\001\001\000" +
    "\002\001\001\000\004\027\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\054\004\066\012\042\013\044" +
    "\015\135\016\047\020\043\024\053\030\050\035\057\001" +
    "\001\000\026\002\054\004\066\012\042\013\131\015\132" +
    "\016\047\020\043\024\053\030\050\035\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\067\001\001\000\002\001\001\000\026\002\054\004" +
    "\066\012\042\013\044\015\071\016\047\020\043\024\053" +
    "\030\050\035\057\001\001\000\002\001\001\000\026\002" +
    "\054\004\066\012\042\013\044\015\127\016\047\020\043" +
    "\024\053\030\050\035\057\001\001\000\026\002\054\004" +
    "\066\012\042\013\044\015\126\016\047\020\043\024\053" +
    "\030\050\035\057\001\001\000\026\002\054\004\066\012" +
    "\042\013\044\015\125\016\047\020\043\024\053\030\050" +
    "\035\057\001\001\000\026\002\054\004\066\012\042\013" +
    "\044\015\124\016\047\020\043\024\053\030\050\035\057" +
    "\001\001\000\026\002\054\004\066\012\042\013\044\015" +
    "\123\016\047\020\043\024\053\030\050\035\057\001\001" +
    "\000\026\002\054\004\066\012\042\013\044\015\122\016" +
    "\047\020\043\024\053\030\050\035\057\001\001\000\004" +
    "\027\121\001\001\000\026\002\054\004\066\012\042\013" +
    "\044\015\120\016\047\020\043\024\053\030\050\035\057" +
    "\001\001\000\026\002\054\004\066\012\042\013\044\015" +
    "\117\016\047\020\043\024\053\030\050\035\057\001\001" +
    "\000\026\002\054\004\066\012\042\013\044\015\116\016" +
    "\047\020\043\024\053\030\050\035\057\001\001\000\026" +
    "\002\054\004\066\012\042\013\044\015\115\016\047\020" +
    "\043\024\053\030\050\035\057\001\001\000\026\002\054" +
    "\004\066\012\042\013\044\015\114\016\047\020\043\024" +
    "\053\030\050\035\057\001\001\000\026\002\054\004\066" +
    "\012\042\013\044\015\113\016\047\020\043\024\053\030" +
    "\050\035\057\001\001\000\026\002\054\004\066\012\042" +
    "\013\044\015\112\016\047\020\043\024\053\030\050\035" +
    "\057\001\001\000\026\002\054\004\066\012\042\013\044" +
    "\015\111\016\047\020\043\024\053\030\050\035\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\054\004\066" +
    "\012\042\013\044\015\052\016\047\017\140\020\043\024" +
    "\053\030\050\035\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\054\004\066\012\042\013\044\015\052\016\047\017\144" +
    "\020\043\024\053\030\050\035\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\054\003\151\004\066\012\042\013\044\015" +
    "\145\016\047\020\043\024\053\030\050\035\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\054\004\066\012\042\013\044" +
    "\015\156\016\047\020\043\024\053\030\050\035\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\167\001\001\000\004\046\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\171\036\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\177" +
    "\032\176\001\001\000\002\001\001\000\026\002\054\004" +
    "\066\012\042\013\044\015\201\016\047\020\043\024\053" +
    "\030\050\035\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\206\001\001\000\002\001\001\000\006" +
    "\007\204\032\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\225\001\001" +
    "\000\022\010\220\021\217\023\221\024\003\043\005\047" +
    "\021\053\017\054\012\001\001\000\022\010\224\021\217" +
    "\023\221\024\003\043\005\047\021\053\017\054\012\001" +
    "\001\000\002\001\001\000\022\010\222\021\217\023\221" +
    "\024\003\043\005\047\021\053\017\054\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\227\021\217\023\221\024\003\043" +
    "\005\047\021\053\017\054\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\234\001" +
    "\001\000\004\052\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\035\020\241\024\027\001\001\000\002\001\001\000\010" +
    "\013\035\020\243\024\027\001\001\000\002\001\001\000" +
    "\006\024\363\025\364\001\001\000\006\022\257\024\256" +
    "\001\001\000\014\014\250\024\247\031\171\036\251\050" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\255\032\176\001\001\000\002\001\001\000\026\002" +
    "\054\004\066\012\042\013\044\015\254\016\047\020\043" +
    "\024\053\030\050\035\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\261\001\001\000\004\006\271\001\001\000\014\014" +
    "\250\024\247\036\264\050\265\051\263\001\001\000\002" +
    "\001\001\000\004\007\270\001\001\000\002\001\001\000" +
    "\014\014\250\024\247\036\264\050\265\051\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\005\307\006\277\013\035\020\273\024\310\026\274" +
    "\034\300\041\305\043\312\044\315\045\303\047\306\053" +
    "\314\054\276\055\311\001\001\000\004\027\351\001\001" +
    "\000\002\001\001\000\030\002\054\004\066\012\042\013" +
    "\044\015\344\016\047\020\043\024\053\030\050\035\057" +
    "\040\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\340\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\323\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\024\001\001\000\036\005\307\006\277\013\035" +
    "\020\273\024\310\026\274\034\300\043\312\044\315\045" +
    "\316\047\306\053\314\054\276\055\311\001\001\000\002" +
    "\001\001\000\026\002\054\004\066\012\042\013\044\015" +
    "\320\016\047\020\043\024\053\030\050\035\057\001\001" +
    "\000\002\001\001\000\034\005\307\006\277\013\035\020" +
    "\273\024\310\026\274\034\300\043\312\044\322\047\306" +
    "\053\314\054\276\055\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\054\004\066\012\042\013\044" +
    "\015\325\016\047\020\043\024\053\030\050\035\057\001" +
    "\001\000\002\001\001\000\026\002\054\004\066\012\042" +
    "\013\044\015\327\016\047\020\043\024\053\030\050\035" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\002\054\004\066\012\042\013\044\015\332\016\047\020" +
    "\043\024\053\030\050\035\057\001\001\000\002\001\001" +
    "\000\034\005\307\006\277\013\035\020\273\024\310\026" +
    "\274\034\300\043\312\044\334\047\306\053\314\054\276" +
    "\055\311\001\001\000\002\001\001\000\034\005\307\006" +
    "\277\013\035\020\273\024\310\026\274\034\300\043\312" +
    "\044\336\047\306\053\314\054\276\055\311\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\054" +
    "\004\066\012\042\013\044\015\344\016\047\020\043\024" +
    "\053\030\050\035\057\040\350\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\054\004\066\012\042\013" +
    "\044\015\353\016\047\020\043\024\053\030\050\035\057" +
    "\001\001\000\002\001\001\000\004\042\355\001\001\000" +
    "\004\006\356\001\001\000\002\001\001\000\012\014\250" +
    "\024\247\036\264\050\360\001\001\000\002\001\001\000" +
    "\006\022\362\024\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\250\024\247\036" +
    "\264\050\366\001\001\000\002\001\001\000\006\024\363" +
    "\025\370\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


 
  public void report_fatal_error(String msg, Object info) {
    report_error(msg, info);
  }

  public void report_error(String msg, Object info) {
    Main.setToken((java_cup.runtime.Symbol)info);
    Main.handleSyntaxError("Syntax error: unexpected ");
  }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 143. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Program start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // array_element ::= identifier indexed_brackets 
            {
                ArrayElement RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new ArrayElement(id, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // array_element ::= function_call indexed_brackets 
            {
                ArrayElement RESULT = null;
                int fcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionCall fc = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionCall> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new ArrayElement(fc, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // array_element ::= array_literal indexed_brackets 
            {
                ArrayElement RESULT = null;
                int alleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int alright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayLiteral al = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayLiteral> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new ArrayElement(al, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // array_element_list ::= expr 
            {
                ArrayElementList RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ArrayElementList(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // array_element_list ::= expr COMMA array_element_list 
            {
                ArrayElementList RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int aelleft = CUP$parser$stack.peek().left;
                int aelright = CUP$parser$stack.peek().right;
                ArrayElementList ael = CUP$parser$stack.peek().<ArrayElementList> value();
                 RESULT = new ArrayElementList(e,ael); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // array_element_list ::= 
            {
                ArrayElementList RESULT = null;
                 RESULT = new ArrayElementList(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // array_literal ::= OPEN_BRACE array_element_list CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int obleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int obright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object ob = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int aelleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aelright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayElementList ael = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayElementList> value();
                 RESULT = new ArrayLiteral(ael, obleft, obright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literal",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // assignment_stmt ::= identifier GETS expr 
            {
                AssignmentStmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(id, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // assignment_stmt ::= identifier indexed_brackets GETS expr 
            {
                AssignmentStmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int ibleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ibright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                IndexedBrackets ib = CUP$parser$stack.elementAt(CUP$parser$top-2).<IndexedBrackets> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(id, ib, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",3, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // assignment_stmt ::= function_call indexed_brackets GETS expr 
            {
                AssignmentStmt RESULT = null;
                int fcleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int fcright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                FunctionCall fc = CUP$parser$stack.elementAt(CUP$parser$top-3).<FunctionCall> value();
                int ibleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ibright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                IndexedBrackets ib = CUP$parser$stack.elementAt(CUP$parser$top-2).<IndexedBrackets> value();
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(fc, ib, expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",3, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // block_stmt ::= OPEN_BRACE CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                 RESULT = new BlockStmt(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // block_stmt ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                StmtList sl = CUP$parser$stack.elementAt(CUP$parser$top-1).<StmtList> value();
                 RESULT = new BlockStmt(sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // block_stmt ::= OPEN_BRACE stmt_list return_stmt CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                StmtList sl = CUP$parser$stack.elementAt(CUP$parser$top-2).<StmtList> value();
                int rsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnStmt rs = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnStmt> value();
                 RESULT = new BlockStmt(sl, rs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // block_stmt ::= OPEN_BRACE return_stmt CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int rsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnStmt rs = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnStmt> value();
                 RESULT = new BlockStmt(rs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // brackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
                Brackets RESULT = null;
                 RESULT = new Brackets(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // brackets ::= OPEN_BRACKET CLOSE_BRACKET brackets 
            {
                Brackets RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new Brackets(b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",5, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // class_body ::= global_decl class_body 
            {
                ClassBody RESULT = null;
                int gdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int gdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                GlobalDecl gd = CUP$parser$stack.elementAt(CUP$parser$top-1).<GlobalDecl> value();
                int cbleft = CUP$parser$stack.peek().left;
                int cbright = CUP$parser$stack.peek().right;
                ClassBody cb = CUP$parser$stack.peek().<ClassBody> value();
                 RESULT = new ClassBody(gd,cb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // class_body ::= function_decl class_body 
            {
                ClassBody RESULT = null;
                int fdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionDecl fd = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionDecl> value();
                int cbleft = CUP$parser$stack.peek().left;
                int cbright = CUP$parser$stack.peek().right;
                ClassBody cb = CUP$parser$stack.peek().<ClassBody> value();
                 RESULT = new ClassBody(fd,cb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // class_body ::= global_decl 
            {
                ClassBody RESULT = null;
                int gdleft = CUP$parser$stack.peek().left;
                int gdright = CUP$parser$stack.peek().right;
                GlobalDecl gd = CUP$parser$stack.peek().<GlobalDecl> value();
                 RESULT = new ClassBody(gd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // class_body ::= function_decl 
            {
                ClassBody RESULT = null;
                int fdleft = CUP$parser$stack.peek().left;
                int fdright = CUP$parser$stack.peek().right;
                FunctionDecl fd = CUP$parser$stack.peek().<FunctionDecl> value();
                 RESULT = new ClassBody(fd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // class_decl ::= CLASS identifier OPEN_BRACKET class_body CLOSE_BRACKET 
            {
                ClassDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int cbleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int cbright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ClassBody cb = CUP$parser$stack.elementAt(CUP$parser$top-1).<ClassBody> value();
                 RESULT = new ClassDecl(id,cb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",7, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // class_decl ::= CLASS identifier EXTENDS identifier OPEN_BRACKET class_body CLOSE_BRACKET 
            {
                ClassDecl RESULT = null;
                int id1left = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int id1right = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                Identifier id1 = CUP$parser$stack.elementAt(CUP$parser$top-5).<Identifier> value();
                int id2left = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int id2right = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id2 = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int cbleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int cbright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ClassBody cb = CUP$parser$stack.elementAt(CUP$parser$top-1).<ClassBody> value();
                 RESULT = new ClassDecl(id1,id2,cb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",7, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // constant ::= literal 
            {
                Constant RESULT = null;
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Literal l = CUP$parser$stack.peek().<Literal> value();
                 RESULT = l; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // constant ::= array_literal 
            {
                Constant RESULT = null;
                int alleft = CUP$parser$stack.peek().left;
                int alright = CUP$parser$stack.peek().right;
                ArrayLiteral al = CUP$parser$stack.peek().<ArrayLiteral> value();
                 RESULT = al; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // dotable_expr ::= identifier 
            {
                DotableExpr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new DotableExpr(id,false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // dotable_expr ::= function_call 
            {
                DotableExpr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new DotableExpr(fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // dotable_expr ::= dotable_expr DOT identifier 
            {
                DotableExpr RESULT = null;
                int deleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int deright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                DotableExpr de = CUP$parser$stack.elementAt(CUP$parser$top-2).<DotableExpr> value();
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new DotableExpr(de,id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // dotable_expr ::= NEW identifier 
            {
                DotableExpr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new DotableExpr(id,true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // dotable_expr ::= THIS 
            {
                DotableExpr RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Object t = CUP$parser$stack.peek().<Object> value();
                 RESULT = new DotableExpr(tleft, tright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // dotable_expr ::= OPEN_PAREN dotable_expr CLOSE_PAREN 
            {
                DotableExpr RESULT = null;
                int deleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int deright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                DotableExpr de = CUP$parser$stack.elementAt(CUP$parser$top-1).<DotableExpr> value();
                 RESULT = new DotableExpr(de); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // empty_array_type ::= primitive_type brackets 
            {
                EmptyArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new EmptyArrayType(pt, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("empty_array_type",10, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // expr ::= dotable_expr 
            {
                Expr RESULT = null;
                int deleft = CUP$parser$stack.peek().left;
                int deright = CUP$parser$stack.peek().right;
                DotableExpr de = CUP$parser$stack.peek().<DotableExpr> value();
                 RESULT = de; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // expr ::= normal_expr 
            {
                Expr RESULT = null;
                int neleft = CUP$parser$stack.peek().left;
                int neright = CUP$parser$stack.peek().right;
                Expr ne = CUP$parser$stack.peek().<Expr> value();
                 RESULT = ne; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // normal_expr ::= constant 
            {
                Expr RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Constant c = CUP$parser$stack.peek().<Constant> value();
                 RESULT = c; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // normal_expr ::= op_expr 
            {
                Expr RESULT = null;
                int oeleft = CUP$parser$stack.peek().left;
                int oeright = CUP$parser$stack.peek().right;
                Expr oe = CUP$parser$stack.peek().<Expr> value();
                 RESULT = oe; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // normal_expr ::= array_element 
            {
                Expr RESULT = null;
                int aeleft = CUP$parser$stack.peek().left;
                int aeright = CUP$parser$stack.peek().right;
                ArrayElement ae = CUP$parser$stack.peek().<ArrayElement> value();
                 RESULT = ae; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // normal_expr ::= NULL 
            {
                Expr RESULT = null;
                 RESULT = null; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // normal_expr ::= OPEN_PAREN normal_expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int neleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int neright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr ne = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 ne.setSurroundedParentheses(); RESULT = ne; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // function_arg ::= expr 
            {
                FunctionArg RESULT = null;
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new FunctionArg(expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // function_arg ::= expr COMMA function_arg 
            {
                FunctionArg RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int faleft = CUP$parser$stack.peek().left;
                int faright = CUP$parser$stack.peek().right;
                FunctionArg fa = CUP$parser$stack.peek().<FunctionArg> value();
                 RESULT = new FunctionArg(expression, fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",13, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // function_call ::= identifier OPEN_PAREN function_arg CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int faleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int faright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionArg fa = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionArg> value();
                 RESULT = new FunctionCall(id, fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",14, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // function_call ::= identifier OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                 RESULT = new FunctionCall(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // function_call ::= dotable_expr DOT identifier OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int deleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int deright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                DotableExpr de = CUP$parser$stack.elementAt(CUP$parser$top-4).<DotableExpr> value();
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                 RESULT = new FunctionCall(de,id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",14, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // function_call ::= dotable_expr DOT identifier OPEN_PAREN function_arg CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int deleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int deright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                DotableExpr de = CUP$parser$stack.elementAt(CUP$parser$top-5).<DotableExpr> value();
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int faleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int faright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionArg fa = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionArg> value();
                 RESULT = new FunctionCall(de,id,fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",14, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // function_call ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int lleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int lright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Object l = CUP$parser$stack.elementAt(CUP$parser$top-3).<Object> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new FunctionCall(e, lleft, lright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",14, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // function_decl ::= identifier OPEN_PAREN CLOSE_PAREN return_type block_stmt 
            {
                FunctionDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int rtleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rtright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnType rt = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnType> value();
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = new FunctionDecl(id, rt, bs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",15, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // function_decl ::= identifier OPEN_PAREN function_param CLOSE_PAREN return_type block_stmt 
            {
                FunctionDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-5).<Identifier> value();
                int fpleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int fpright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                FunctionParam fp = CUP$parser$stack.elementAt(CUP$parser$top-3).<FunctionParam> value();
                int rtleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rtright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnType rt = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnType> value();
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = new FunctionDecl(id, fp, rt, bs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",15, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // function_param ::= identifier COLON type 
            {
                FunctionParam RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new FunctionParam(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",16, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // function_param ::= identifier COLON type COMMA function_param 
            {
                FunctionParam RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int fpleft = CUP$parser$stack.peek().left;
                int fpright = CUP$parser$stack.peek().right;
                FunctionParam fp = CUP$parser$stack.peek().<FunctionParam> value();
                 RESULT = new FunctionParam(id, t, fp); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",16, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // global_decl ::= var_decl SEMICOLON 
            {
                GlobalDecl RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl> value();
                 RESULT = new GlobalDecl(vd, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",17, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // global_decl ::= var_decl 
            {
                GlobalDecl RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new GlobalDecl(vd, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // global_decl ::= short_tuple_decl SEMICOLON 
            {
                GlobalDecl RESULT = null;
                int stdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int stdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ShortTupleDecl std = CUP$parser$stack.elementAt(CUP$parser$top-1).<ShortTupleDecl> value();
                 RESULT = new GlobalDecl(std, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",17, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // global_decl ::= short_tuple_decl 
            {
                GlobalDecl RESULT = null;
                int stdleft = CUP$parser$stack.peek().left;
                int stdright = CUP$parser$stack.peek().right;
                ShortTupleDecl std = CUP$parser$stack.peek().<ShortTupleDecl> value();
                 RESULT = new GlobalDecl(std, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // global_decl ::= var_init SEMICOLON 
            {
                GlobalDecl RESULT = null;
                int vileft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int viright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarInit vi = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarInit> value();
                 RESULT = new GlobalDecl(vi, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",17, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // global_decl ::= var_init 
            {
                GlobalDecl RESULT = null;
                int vileft = CUP$parser$stack.peek().left;
                int viright = CUP$parser$stack.peek().right;
                VarInit vi = CUP$parser$stack.peek().<VarInit> value();
                 RESULT = new GlobalDecl(vi, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // global_decl ::= tuple_init SEMICOLON 
            {
                GlobalDecl RESULT = null;
                int tileft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int tiright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                TupleInit ti = CUP$parser$stack.elementAt(CUP$parser$top-1).<TupleInit> value();
                 RESULT = new GlobalDecl(ti, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",17, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // global_decl ::= tuple_init 
            {
                GlobalDecl RESULT = null;
                int tileft = CUP$parser$stack.peek().left;
                int tiright = CUP$parser$stack.peek().right;
                TupleInit ti = CUP$parser$stack.peek().<TupleInit> value();
                 RESULT = new GlobalDecl(ti, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // identifier ::= IDENTIFIER 
            {
                Identifier RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Identifier(id, idleft, idright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // identifier_list ::= identifier COMMA identifier_list 
            {
                IdentifierList RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int idlleft = CUP$parser$stack.peek().left;
                int idlright = CUP$parser$stack.peek().right;
                IdentifierList idl = CUP$parser$stack.peek().<IdentifierList> value();
                 RESULT = new IdentifierList(id, idl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // identifier_list ::= identifier 
            {
                IdentifierList RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new IdentifierList(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                IfStmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new IfStmt(e, s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",20, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt ELSE stmt 
            {
                IfStmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-4).<Expr> value();
                int s1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int s1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Stmt s1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Stmt> value();
                int s2left = CUP$parser$stack.peek().left;
                int s2right = CUP$parser$stack.peek().right;
                Stmt s2 = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new IfStmt(e, s1, s2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",20, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // indexed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                IndexedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new IndexedBrackets(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexed_brackets",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // indexed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET indexed_brackets 
            {
                IndexedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new IndexedBrackets(e, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexed_brackets",21, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // literal ::= INTEGER_LITERAL 
            {
                Literal RESULT = null;
                int illeft = CUP$parser$stack.peek().left;
                int ilright = CUP$parser$stack.peek().right;
                String il = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(il, 0, illeft, ilright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // literal ::= CHARACTER_LITERAL 
            {
                Literal RESULT = null;
                int clleft = CUP$parser$stack.peek().left;
                int clright = CUP$parser$stack.peek().right;
                String cl = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(cl, 2, clleft, clright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // literal ::= STRING_LITERAL 
            {
                Literal RESULT = null;
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                String sl = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(sl, 1, slleft, slright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // literal ::= TRUE 
            {
                Literal RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Boolean t = CUP$parser$stack.peek().<Boolean> value();
                 RESULT = new Literal(true, tleft, tright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // literal ::= FALSE 
            {
                Literal RESULT = null;
                int fleft = CUP$parser$stack.peek().left;
                int fright = CUP$parser$stack.peek().right;
                Boolean f = CUP$parser$stack.peek().<Boolean> value();
                 RESULT = new Literal(false, fleft, fright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // mixed_array_type ::= primitive_type brackets 
            {
                MixedArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new MixedArrayType(pt, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_array_type",23, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // mixed_array_type ::= primitive_type mixed_brackets 
            {
                MixedArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int mbleft = CUP$parser$stack.peek().left;
                int mbright = CUP$parser$stack.peek().right;
                MixedBrackets mb = CUP$parser$stack.peek().<MixedBrackets> value();
                 RESULT = new MixedArrayType(pt, mb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_array_type",23, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new MixedBrackets(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET mixed_brackets 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int mbleft = CUP$parser$stack.peek().left;
                int mbright = CUP$parser$stack.peek().right;
                MixedBrackets mb = CUP$parser$stack.peek().<MixedBrackets> value();
                 RESULT = new MixedBrackets(e, mb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",24, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET brackets 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new MixedBrackets(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",24, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // module_list ::= class_decl module_list 
            {
                ModuleList RESULT = null;
                int cdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int cdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ClassDecl cd = CUP$parser$stack.elementAt(CUP$parser$top-1).<ClassDecl> value();
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new ModuleList(cd, ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // module_list ::= function_decl module_list 
            {
                ModuleList RESULT = null;
                int fdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionDecl fd = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionDecl> value();
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new ModuleList(fd, ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // module_list ::= global_decl module_list 
            {
                ModuleList RESULT = null;
                int gdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int gdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                GlobalDecl gd = CUP$parser$stack.elementAt(CUP$parser$top-1).<GlobalDecl> value();
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new ModuleList(gd, ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // module_list ::= class_decl 
            {
                ModuleList RESULT = null;
                int cdleft = CUP$parser$stack.peek().left;
                int cdright = CUP$parser$stack.peek().right;
                ClassDecl cd = CUP$parser$stack.peek().<ClassDecl> value();
                 RESULT = new ModuleList(cd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // module_list ::= function_decl 
            {
                ModuleList RESULT = null;
                int fdleft = CUP$parser$stack.peek().left;
                int fdright = CUP$parser$stack.peek().right;
                FunctionDecl fd = CUP$parser$stack.peek().<FunctionDecl> value();
                 RESULT = new ModuleList(fd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // module_list ::= global_decl 
            {
                ModuleList RESULT = null;
                int gdleft = CUP$parser$stack.peek().left;
                int gdright = CUP$parser$stack.peek().right;
                GlobalDecl gd = CUP$parser$stack.peek().<GlobalDecl> value();
                 RESULT = new ModuleList(gd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // naked_stmt ::= assignment_stmt 
            {
                NakedStmt RESULT = null;
                int assleft = CUP$parser$stack.peek().left;
                int assright = CUP$parser$stack.peek().right;
                AssignmentStmt ass = CUP$parser$stack.peek().<AssignmentStmt> value();
                 RESULT = ass; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // naked_stmt ::= if_stmt 
            {
                NakedStmt RESULT = null;
                int isleft = CUP$parser$stack.peek().left;
                int isright = CUP$parser$stack.peek().right;
                IfStmt is = CUP$parser$stack.peek().<IfStmt> value();
                 RESULT = is; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // naked_stmt ::= while_stmt 
            {
                NakedStmt RESULT = null;
                int wsleft = CUP$parser$stack.peek().left;
                int wsright = CUP$parser$stack.peek().right;
                WhileStmt ws = CUP$parser$stack.peek().<WhileStmt> value();
                 RESULT = ws; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // naked_stmt ::= function_call 
            {
                NakedStmt RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // naked_stmt ::= block_stmt 
            {
                NakedStmt RESULT = null;
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = bs; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // naked_stmt ::= short_tuple_decl 
            {
                NakedStmt RESULT = null;
                int stdleft = CUP$parser$stack.peek().left;
                int stdright = CUP$parser$stack.peek().right;
                ShortTupleDecl std = CUP$parser$stack.peek().<ShortTupleDecl> value();
                 RESULT = std; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // naked_stmt ::= var_decl 
            {
                NakedStmt RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = vd; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // naked_stmt ::= var_init 
            {
                NakedStmt RESULT = null;
                int vileft = CUP$parser$stack.peek().left;
                int viright = CUP$parser$stack.peek().right;
                VarInit vi = CUP$parser$stack.peek().<VarInit> value();
                 RESULT = vi; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // naked_stmt ::= tuple_init 
            {
                NakedStmt RESULT = null;
                int tileft = CUP$parser$stack.peek().left;
                int tiright = CUP$parser$stack.peek().right;
                TupleInit ti = CUP$parser$stack.peek().<TupleInit> value();
                 RESULT = ti; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // naked_stmt ::= BREAK 
            {
                NakedStmt RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Break(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // op_expr ::= MINUS expr 
            {
                Expr RESULT = null;
                int mleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int mright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object m = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(e, UnaryOp.INT_NEG, mleft, mright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // op_expr ::= NOT expr 
            {
                Expr RESULT = null;
                int nleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int nright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object n = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(e, UnaryOp.LOG_NEG, nleft, nright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // op_expr ::= expr PLUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.PLUS); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // op_expr ::= expr MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.MINUS); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // op_expr ::= expr TIMES expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.TIMES); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // op_expr ::= expr HIGH_MULT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.HIGH_MULT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // op_expr ::= expr DIVIDE expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.DIVIDE); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // op_expr ::= expr MODULO expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.MODULO); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // op_expr ::= expr NOT_EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.NOT_EQUAL); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // op_expr ::= expr EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.EQUAL); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // op_expr ::= expr LT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.LT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // op_expr ::= expr LEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.LEQ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // op_expr ::= expr GT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.GT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // op_expr ::= expr GEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.GEQ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // op_expr ::= expr AND expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.AND); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // op_expr ::= expr OR expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.OR); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // primitive_type ::= INT 
            {
                PrimitiveType RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Object i = CUP$parser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(0); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // primitive_type ::= BOOL 
            {
                PrimitiveType RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // program ::= module_list 
            {
                Program RESULT = null;
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new Program(ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // program ::= use_id module_list 
            {
                Program RESULT = null;
                int useidcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int useidcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                UseId useidc = CUP$parser$stack.elementAt(CUP$parser$top-1).<UseId> value();
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new Program(useidc, ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",29, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 111: // return_list ::= expr 
            {
                ReturnList RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ReturnList(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 112: // return_list ::= expr COMMA return_list 
            {
                ReturnList RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int rlleft = CUP$parser$stack.peek().left;
                int rlright = CUP$parser$stack.peek().right;
                ReturnList rl = CUP$parser$stack.peek().<ReturnList> value();
                 RESULT = new ReturnList(e, rl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",30, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 113: // return_stmt ::= RETURN 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.peek().left;
                int rright = CUP$parser$stack.peek().right;
                Object r = CUP$parser$stack.peek().<Object> value();
                 RESULT = new ReturnStmt(rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 114: // return_stmt ::= RETURN return_list 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int rlleft = CUP$parser$stack.peek().left;
                int rlright = CUP$parser$stack.peek().right;
                ReturnList rl = CUP$parser$stack.peek().<ReturnList> value();
                 RESULT = new ReturnStmt(rl, rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",31, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 115: // return_stmt ::= RETURN SEMICOLON 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = new ReturnStmt(rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",31, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 116: // return_stmt ::= RETURN return_list SEMICOLON 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int rlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnList rl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnList> value();
                 RESULT = new ReturnStmt(rl, rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",31, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 117: // return_type ::= COLON type_list 
            {
                ReturnType RESULT = null;
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                TypeList tl = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new ReturnType(tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",32, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 118: // return_type ::= 
            {
                ReturnType RESULT = null;
                 RESULT = new ReturnType(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",32, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 119: // short_tuple_decl ::= identifier COMMA identifier_list COLON type 
            {
                ShortTupleDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int idlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                IdentifierList idl = CUP$parser$stack.elementAt(CUP$parser$top-2).<IdentifierList> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new ShortTupleDecl(id, idl, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("short_tuple_decl",33, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 120: // stmt ::= naked_stmt SEMICOLON 
            {
                Stmt RESULT = null;
                int nsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int nsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                NakedStmt ns = CUP$parser$stack.elementAt(CUP$parser$top-1).<NakedStmt> value();
                 RESULT = new Stmt(ns, true, nsleft, nsright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",34, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 121: // stmt ::= naked_stmt 
            {
                Stmt RESULT = null;
                int nsleft = CUP$parser$stack.peek().left;
                int nsright = CUP$parser$stack.peek().right;
                NakedStmt ns = CUP$parser$stack.peek().<NakedStmt> value();
                 RESULT = new Stmt(ns, false, nsleft, nsright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 122: // stmt_list ::= stmt 
            {
                StmtList RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new StmtList(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",35, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 123: // stmt_list ::= stmt stmt_list 
            {
                StmtList RESULT = null;
                int sleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Stmt s = CUP$parser$stack.elementAt(CUP$parser$top-1).<Stmt> value();
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                StmtList sl = CUP$parser$stack.peek().<StmtList> value();
                 RESULT = new StmtList(s, sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",35, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 124: // tuple_decl_list ::= COMMA var_decl 
            {
                TupleDeclList RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new TupleDeclList(vd, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",36, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 125: // tuple_decl_list ::= COMMA var_decl tuple_decl_list 
            {
                TupleDeclList RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl> value();
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                TupleDeclList tdl = CUP$parser$stack.peek().<TupleDeclList> value();
                 RESULT = new TupleDeclList(vd, tdl, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 126: // tuple_decl_list ::= COMMA UNDERSCORE 
            {
                TupleDeclList RESULT = null;
                 RESULT = new TupleDeclList(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",36, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 127: // tuple_decl_list ::= COMMA UNDERSCORE tuple_decl_list 
            {
                TupleDeclList RESULT = null;
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                TupleDeclList tdl = CUP$parser$stack.peek().<TupleDeclList> value();
                 RESULT = new TupleDeclList(tdl, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 128: // tuple_init ::= UNDERSCORE tuple_decl_list GETS function_call 
            {
                TupleInit RESULT = null;
                int tdlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TupleDeclList tdl = CUP$parser$stack.elementAt(CUP$parser$top-2).<TupleDeclList> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(tdl, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",37, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 129: // tuple_init ::= var_decl tuple_decl_list GETS function_call 
            {
                TupleInit RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-3).<VarDecl> value();
                int tdlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TupleDeclList tdl = CUP$parser$stack.elementAt(CUP$parser$top-2).<TupleDeclList> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(vd, tdl, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",37, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 130: // tuple_init ::= UNDERSCORE GETS function_call 
            {
                TupleInit RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",37, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 131: // type ::= primitive_type 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                PrimitiveType pt = CUP$parser$stack.peek().<PrimitiveType> value();
                 RESULT = pt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 132: // type ::= empty_array_type 
            {
                Type RESULT = null;
                int atleft = CUP$parser$stack.peek().left;
                int atright = CUP$parser$stack.peek().right;
                EmptyArrayType at = CUP$parser$stack.peek().<EmptyArrayType> value();
                 RESULT = at; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 133: // type ::= identifier 
            {
                Type RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 id.setIsClassName(); RESULT = id; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 134: // type_list ::= type 
            {
                TypeList RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new TypeList(t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 135: // type_list ::= type COMMA type_list 
            {
                TypeList RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                TypeList tl = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new TypeList(t, tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",39, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 136: // use_id ::= USE identifier 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new UseId(id, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",40, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 137: // use_id ::= USE identifier SEMICOLON 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                 RESULT = new UseId(id, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",40, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 138: // use_id ::= USE identifier use_id 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int uileft = CUP$parser$stack.peek().left;
                int uiright = CUP$parser$stack.peek().right;
                UseId ui = CUP$parser$stack.peek().<UseId> value();
                 RESULT = new UseId(id, ui, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",40, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 139: // use_id ::= USE identifier SEMICOLON use_id 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int uileft = CUP$parser$stack.peek().left;
                int uiright = CUP$parser$stack.peek().right;
                UseId ui = CUP$parser$stack.peek().<UseId> value();
                 RESULT = new UseId(id, ui, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",40, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 140: // var_decl ::= identifier COLON mixed_array_type 
            {
                VarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int matleft = CUP$parser$stack.peek().left;
                int matright = CUP$parser$stack.peek().right;
                MixedArrayType mat = CUP$parser$stack.peek().<MixedArrayType> value();
                 RESULT = new VarDecl(id, mat); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",41, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 141: // var_decl ::= identifier COLON primitive_type 
            {
                VarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                PrimitiveType pt = CUP$parser$stack.peek().<PrimitiveType> value();
                 RESULT = new VarDecl(id, pt); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",41, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 142: // var_init ::= identifier COLON type GETS expr 
            {
                VarInit RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new VarInit(id, t, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_init",42, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 143: // while_stmt ::= WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                WhileStmt RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new WhileStmt(expression, s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",43, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
