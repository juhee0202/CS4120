
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package jl2755;

import jl2755.ast.*;
import java.io.IOException;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\005\000\002\003\002\000\002\004\005" +
    "\000\002\005\005\000\002\006\004\000\002\006\005\000" +
    "\002\006\006\000\002\006\005\000\002\007\004\000\002" +
    "\007\005\000\002\010\004\000\002\010\004\000\002\010" +
    "\002\000\002\011\007\000\002\011\011\000\002\012\003" +
    "\000\002\012\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\005\000\002\013\004\000\002\013\003\000\002" +
    "\013\003\000\002\014\004\000\002\014\004\000\002\015" +
    "\003\000\002\015\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\004\000\002\017\004\000\002\020\003\000" +
    "\002\020\005\000\002\021\006\000\002\021\005\000\002" +
    "\021\007\000\002\021\010\000\002\021\006\000\002\022" +
    "\007\000\002\022\010\000\002\023\005\000\002\023\007" +
    "\000\002\024\004\000\002\024\003\000\002\024\004\000" +
    "\002\024\003\000\002\024\004\000\002\024\003\000\002" +
    "\025\003\000\002\026\005\000\002\026\003\000\002\027" +
    "\007\000\002\027\011\000\002\030\005\000\002\030\006" +
    "\000\002\031\004\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\004\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\034\005\000\002\034\006\000\002\034\006" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\005\000\002\036\003\000\002\036\005\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\005\000\002\037\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\040\003\000\002\040\003\000" +
    "\002\041\003\000\002\041\004\000\002\042\003\000\002" +
    "\042\005\000\002\043\003\000\002\043\004\000\002\043" +
    "\004\000\002\043\005\000\002\044\004\000\002\044\002" +
    "\000\002\045\007\000\002\045\007\000\002\045\007\000" +
    "\002\046\007\000\002\047\004\000\002\047\003\000\002" +
    "\050\003\000\002\050\004\000\002\051\004\000\002\051" +
    "\005\000\002\051\004\000\002\051\005\000\002\052\006" +
    "\000\002\052\006\000\002\052\005\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\054\003\000\002" +
    "\054\005\000\002\055\004\000\002\055\005\000\002\055" +
    "\005\000\002\055\006\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\057\007\000\002\060\007\000" +
    "\002\060\010" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\010\004\020\016\006\055\010\001\002\000" +
    "\010\044\046\050\u0103\051\045\001\002\000\012\002\uffd1" +
    "\004\uffd1\052\u0102\055\uffd1\001\002\000\004\004\020\001" +
    "\002\000\004\002\375\001\002\000\004\004\020\001\002" +
    "\000\010\002\uffb6\004\020\055\010\001\002\000\012\002" +
    "\uffcf\004\uffcf\052\025\055\uffcf\001\002\000\004\002\uff90" +
    "\001\002\000\010\002\uffb5\004\020\055\010\001\002\000" +
    "\006\004\020\055\010\001\002\000\010\002\uffb7\004\020" +
    "\055\010\001\002\000\012\002\uffd3\004\uffd3\052\021\055" +
    "\uffd3\001\002\000\122\002\uffce\004\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\022\uffce\023" +
    "\uffce\026\uffce\027\uffce\031\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060" +
    "\uffce\061\uffce\062\uffce\064\uffce\001\002\000\010\002\uffd4" +
    "\004\uffd4\055\uffd4\001\002\000\004\002\uffba\001\002\000" +
    "\004\002\uff8f\001\002\000\004\002\uffb8\001\002\000\010" +
    "\002\uffd0\004\uffd0\055\uffd0\001\002\000\004\002\uffb9\001" +
    "\002\000\006\046\031\056\030\001\002\000\004\004\020" +
    "\001\002\000\006\004\020\047\ufff2\001\002\000\010\044" +
    "\046\050\047\051\045\001\002\000\006\004\020\047\ufff2" +
    "\001\002\000\004\047\043\001\002\000\010\004\uffe2\047" +
    "\uffe2\052\042\001\002\000\006\004\020\047\ufff2\001\002" +
    "\000\010\004\uffe3\047\uffe3\052\040\001\002\000\006\004" +
    "\uffe1\047\uffe1\001\002\000\004\047\ufff4\001\002\000\006" +
    "\004\uffe0\047\uffe0\001\002\000\010\002\ufff1\004\ufff1\055" +
    "\ufff1\001\002\000\004\047\ufff3\001\002\000\004\004\020" +
    "\001\002\000\006\004\020\045\215\001\002\000\010\004" +
    "\020\024\054\025\052\001\002\000\022\002\uff6c\004\uff6c" +
    "\041\uff6c\042\055\047\uff6c\051\uff6c\052\uff6c\055\uff6c\001" +
    "\002\000\046\002\uff6e\004\uff6e\012\uff6e\013\uff6e\014\uff6e" +
    "\015\uff6e\041\uff6e\046\uff6e\047\uff6e\051\uff6e\052\uff6e\053" +
    "\uff6e\054\uff6e\055\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e" +
    "\001\002\000\052\002\uff91\004\uff91\012\uff91\013\uff91\014" +
    "\uff91\015\uff91\041\uff91\042\uff91\045\uff91\046\uff91\047\uff91" +
    "\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\057\uff91\060" +
    "\uff91\061\uff91\062\uff91\001\002\000\016\004\uff6d\041\uff6d" +
    "\042\055\047\uff6d\051\uff6d\052\uff6d\001\002\000\052\002" +
    "\uff92\004\uff92\012\uff92\013\uff92\014\uff92\015\uff92\041\uff92" +
    "\042\uff92\045\uff92\046\uff92\047\uff92\051\uff92\052\uff92\053" +
    "\uff92\054\uff92\055\uff92\057\uff92\060\uff92\061\uff92\062\uff92" +
    "\001\002\000\040\004\020\005\106\006\077\007\066\010" +
    "\101\011\105\020\070\030\102\043\064\044\103\046\072" +
    "\054\063\057\060\060\104\063\076\001\002\000\046\002" +
    "\uffc0\004\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\041\uffc0" +
    "\046\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\001\002\000\046" +
    "\002\uffc1\004\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\041" +
    "\uffc1\046\uffc1\047\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\001\002\000" +
    "\004\004\020\001\002\000\100\004\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\017\uffa7\020\uffa7\022\uffa7\023\uffa7\026" +
    "\uffa7\027\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\043\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\057\uffa7\060\uffa7" +
    "\061\uffa7\062\uffa7\001\002\000\104\004\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\017\uffec\020\uffec\022\uffec\023\uffec" +
    "\026\uffec\027\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\037\uffec\040\uffec\042\uffec\043\uffec\045\uffec" +
    "\046\uffec\047\uffec\051\uffec\052\uffec\053\uffec\054\uffec\057" +
    "\uffec\060\uffec\061\uffec\062\uffec\064\uffec\001\002\000\004" +
    "\044\205\001\002\000\052\002\ufff6\004\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\041\ufff6\042\203\045\ufff6\046\ufff6" +
    "\047\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\057" +
    "\ufff6\060\ufff6\061\ufff6\062\ufff6\001\002\000\104\004\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020\uffe5\022" +
    "\uffe5\023\uffe5\026\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042\111\043" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\064\175\001" +
    "\002\000\104\002\uffc6\004\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\017\uffc6\020\uffc6\022\uffc6\023\uffc6\026\uffc6\027" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\043\uffc6\045\uffc6\046\uffc6\047\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\062\uffc6\001\002\000\100\004\uffa6\012\uffa6\013" +
    "\uffa6\014\uffa6\015\uffa6\017\uffa6\020\uffa6\022\uffa6\023\uffa6" +
    "\026\uffa6\027\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\043\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\057\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\001\002\000\036\004\020\005\106" +
    "\006\077\007\066\010\101\011\105\020\070\030\102\044" +
    "\103\046\072\054\063\057\060\060\104\063\076\001\002" +
    "\000\100\004\uffef\012\uffef\013\uffef\014\uffef\015\uffef\017" +
    "\uffef\020\uffef\022\uffef\023\uffef\026\uffef\027\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040" +
    "\uffef\043\uffef\045\uffef\046\uffef\047\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\057\uffef\060\uffef\061\uffef\062\uffef\001" +
    "\002\000\040\004\020\005\106\006\077\007\066\010\101" +
    "\011\105\020\070\030\102\044\103\046\072\047\ufffd\054" +
    "\063\057\060\060\104\063\076\001\002\000\040\017\131" +
    "\020\124\022\114\023\115\026\123\027\120\031\117\032" +
    "\130\033\122\034\125\035\126\036\113\037\116\040\127" +
    "\043\163\001\002\000\106\004\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\026\uffe8" +
    "\027\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\064\uffe8\001\002\000\106" +
    "\004\uffed\012\uffed\013\uffed\014\uffed\015\uffed\017\uffed\020" +
    "\uffed\022\uffed\023\uffed\026\uffed\027\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\042" +
    "\uffed\043\uffed\044\154\045\uffed\046\uffed\047\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\057\uffed\060\uffed\061\uffed\062" +
    "\uffed\064\uffed\001\002\000\100\004\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\017\uffa5\020\uffa5\022\uffa5\023\uffa5\026" +
    "\uffa5\027\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\043\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\062\uffa5\001\002\000\104\002\uffc5\004\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\020\uffc5\022\uffc5" +
    "\023\uffc5\026\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\043\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055" +
    "\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\001\002\000\100" +
    "\004\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4\020" +
    "\uffe4\022\uffe4\023\uffe4\026\uffe4\027\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\043" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\054\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\001\002\000" +
    "\104\002\uffc3\004\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\017\uffc3\020\uffc3\022\uffc3\023\uffc3\026\uffc3\027\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\043\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\057\uffc3\060\uffc3\061\uffc3" +
    "\062\uffc3\001\002\000\036\004\020\005\106\006\077\007" +
    "\066\010\101\011\105\020\070\030\102\044\103\046\072" +
    "\054\063\057\060\060\104\063\076\001\002\000\036\004" +
    "\020\005\106\006\077\007\066\010\101\011\105\020\070" +
    "\030\102\044\103\046\072\054\063\057\060\060\104\063" +
    "\076\001\002\000\106\004\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\017\uffe9\020\uffe9\022\uffe9\023\uffe9\026\uffe9\027" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\062\uffe9\064\uffe9\001\002\000\104\002" +
    "\uffc2\004\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2" +
    "\020\uffc2\022\uffc2\023\uffc2\026\uffc2\027\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\043\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\001\002\000\104\002\uffc4\004\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\017\uffc4\020\uffc4\022\uffc4\023\uffc4\026\uffc4" +
    "\027\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\043\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\057\uffc4\060" +
    "\uffc4\061\uffc4\062\uffc4\001\002\000\102\004\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\017\uffee\020\uffee\022\uffee\023" +
    "\uffee\026\uffee\027\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\042\111\043\uffee\045" +
    "\uffee\046\uffee\047\uffee\051\uffee\052\uffee\053\uffee\054\uffee" +
    "\057\uffee\060\uffee\061\uffee\062\uffee\001\002\000\100\004" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\017\uffa3\020\uffa3" +
    "\022\uffa3\023\uffa3\026\uffa3\027\uffa3\031\uffa3\032\uffa3\033" +
    "\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\043\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\001\002\000\036" +
    "\004\020\005\106\006\077\007\066\010\101\011\105\020" +
    "\070\030\102\044\103\046\072\054\063\057\060\060\104" +
    "\063\076\001\002\000\040\017\131\020\124\022\114\023" +
    "\115\026\123\027\120\031\117\032\130\033\122\034\125" +
    "\035\126\036\113\037\116\040\127\043\121\001\002\000" +
    "\036\004\020\005\106\006\077\007\066\010\101\011\105" +
    "\020\070\030\102\044\103\046\072\054\063\057\060\060" +
    "\104\063\076\001\002\000\036\004\020\005\106\006\077" +
    "\007\066\010\101\011\105\020\070\030\102\044\103\046" +
    "\072\054\063\057\060\060\104\063\076\001\002\000\036" +
    "\004\020\005\106\006\077\007\066\010\101\011\105\020" +
    "\070\030\102\044\103\046\072\054\063\057\060\060\104" +
    "\063\076\001\002\000\036\004\020\005\106\006\077\007" +
    "\066\010\101\011\105\020\070\030\102\044\103\046\072" +
    "\054\063\057\060\060\104\063\076\001\002\000\036\004" +
    "\020\005\106\006\077\007\066\010\101\011\105\020\070" +
    "\030\102\044\103\046\072\054\063\057\060\060\104\063" +
    "\076\001\002\000\036\004\020\005\106\006\077\007\066" +
    "\010\101\011\105\020\070\030\102\044\103\046\072\054" +
    "\063\057\060\060\104\063\076\001\002\000\106\004\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9\020\uffc9\022" +
    "\uffc9\023\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\111\043\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\064" +
    "\uffc9\001\002\000\036\004\020\005\106\006\077\007\066" +
    "\010\101\011\105\020\070\030\102\044\103\046\072\054" +
    "\063\057\060\060\104\063\076\001\002\000\036\004\020" +
    "\005\106\006\077\007\066\010\101\011\105\020\070\030" +
    "\102\044\103\046\072\054\063\057\060\060\104\063\076" +
    "\001\002\000\036\004\020\005\106\006\077\007\066\010" +
    "\101\011\105\020\070\030\102\044\103\046\072\054\063" +
    "\057\060\060\104\063\076\001\002\000\036\004\020\005" +
    "\106\006\077\007\066\010\101\011\105\020\070\030\102" +
    "\044\103\046\072\054\063\057\060\060\104\063\076\001" +
    "\002\000\036\004\020\005\106\006\077\007\066\010\101" +
    "\011\105\020\070\030\102\044\103\046\072\054\063\057" +
    "\060\060\104\063\076\001\002\000\036\004\020\005\106" +
    "\006\077\007\066\010\101\011\105\020\070\030\102\044" +
    "\103\046\072\054\063\057\060\060\104\063\076\001\002" +
    "\000\036\004\020\005\106\006\077\007\066\010\101\011" +
    "\105\020\070\030\102\044\103\046\072\054\063\057\060" +
    "\060\104\063\076\001\002\000\036\004\020\005\106\006" +
    "\077\007\066\010\101\011\105\020\070\030\102\044\103" +
    "\046\072\054\063\057\060\060\104\063\076\001\002\000" +
    "\100\004\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\017\uffa0" +
    "\020\uffa0\022\114\023\115\026\123\027\120\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\043\uffa0\045\uffa0\046\uffa0\047\uffa0\051\uffa0\052\uffa0\053" +
    "\uffa0\054\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\001\002" +
    "\000\100\004\uff97\012\uff97\013\uff97\014\uff97\015\uff97\017" +
    "\131\020\124\022\114\023\115\026\123\027\120\031\uff97" +
    "\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040" +
    "\uff97\043\uff97\045\uff97\046\uff97\047\uff97\051\uff97\052\uff97" +
    "\053\uff97\054\uff97\057\uff97\060\uff97\061\uff97\062\uff97\001" +
    "\002\000\100\004\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a" +
    "\017\131\020\124\022\114\023\115\026\123\027\120\031" +
    "\117\032\130\033\122\034\125\035\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\043\uff9a\045\uff9a\046\uff9a\047\uff9a\051\uff9a\052" +
    "\uff9a\053\uff9a\054\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a" +
    "\001\002\000\100\004\uff94\012\uff94\013\uff94\014\uff94\015" +
    "\uff94\017\131\020\124\022\114\023\115\026\123\027\120" +
    "\031\117\032\130\033\122\034\125\035\uff94\036\uff94\037" +
    "\116\040\127\043\uff94\045\uff94\046\uff94\047\uff94\051\uff94" +
    "\052\uff94\053\uff94\054\uff94\057\uff94\060\uff94\061\uff94\062" +
    "\uff94\001\002\000\100\004\uff95\012\uff95\013\uff95\014\uff95" +
    "\015\uff95\017\131\020\124\022\114\023\115\026\123\027" +
    "\120\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95" +
    "\037\uff95\040\uff95\043\uff95\045\uff95\046\uff95\047\uff95\051" +
    "\uff95\052\uff95\053\uff95\054\uff95\057\uff95\060\uff95\061\uff95" +
    "\062\uff95\001\002\000\100\004\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\017\uff9f\020\uff9f\022\114\023\115\026\123" +
    "\027\120\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\043\uff9f\045\uff9f\046\uff9f\047\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\054\uff9f\057\uff9f\060\uff9f\061" +
    "\uff9f\062\uff9f\001\002\000\100\004\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\017\uff9c\020\uff9c\022\uff9c\023\uff9c\026" +
    "\uff9c\027\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c" +
    "\036\uff9c\037\uff9c\040\uff9c\043\uff9c\045\uff9c\046\uff9c\047" +
    "\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\057\uff9c\060\uff9c" +
    "\061\uff9c\062\uff9c\001\002\000\100\004\uff96\012\uff96\013" +
    "\uff96\014\uff96\015\uff96\017\131\020\124\022\114\023\115" +
    "\026\123\027\120\031\uff96\032\uff96\033\uff96\034\uff96\035" +
    "\uff96\036\uff96\037\uff96\040\uff96\043\uff96\045\uff96\046\uff96" +
    "\047\uff96\051\uff96\052\uff96\053\uff96\054\uff96\057\uff96\060" +
    "\uff96\061\uff96\062\uff96\001\002\000\106\004\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\017\uffc8\020\uffc8\022\uffc8\023" +
    "\uffc8\026\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\064\uffc8\001" +
    "\002\000\100\004\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\017\uff9b\020\uff9b\022\uff9b\023\uff9b\026\uff9b\027\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\043\uff9b\045\uff9b\046\uff9b\047\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\054\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b" +
    "\001\002\000\100\004\uff98\012\uff98\013\uff98\014\uff98\015" +
    "\uff98\017\131\020\124\022\114\023\115\026\123\027\120" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\043\uff98\045\uff98\046\uff98\047\uff98\051\uff98" +
    "\052\uff98\053\uff98\054\uff98\057\uff98\060\uff98\061\uff98\062" +
    "\uff98\001\002\000\100\004\uff99\012\uff99\013\uff99\014\uff99" +
    "\015\uff99\017\131\020\124\022\114\023\115\026\123\027" +
    "\120\031\117\032\130\033\122\034\125\035\uff99\036\uff99" +
    "\037\uff99\040\uff99\043\uff99\045\uff99\046\uff99\047\uff99\051" +
    "\uff99\052\uff99\053\uff99\054\uff99\057\uff99\060\uff99\061\uff99" +
    "\062\uff99\001\002\000\100\004\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\017\uff9d\020\uff9d\022\uff9d\023\uff9d\026\uff9d" +
    "\027\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036" +
    "\uff9d\037\uff9d\040\uff9d\043\uff9d\045\uff9d\046\uff9d\047\uff9d" +
    "\051\uff9d\052\uff9d\053\uff9d\054\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\001\002\000\100\004\uff9e\012\uff9e\013\uff9e" +
    "\014\uff9e\015\uff9e\017\uff9e\020\uff9e\022\uff9e\023\uff9e\026" +
    "\uff9e\027\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\043\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\057\uff9e\060\uff9e" +
    "\061\uff9e\062\uff9e\001\002\000\100\004\uff93\012\uff93\013" +
    "\uff93\014\uff93\015\uff93\017\131\020\124\022\114\023\115" +
    "\026\123\027\120\031\117\032\130\033\122\034\125\035" +
    "\126\036\uff93\037\116\040\127\043\uff93\045\uff93\046\uff93" +
    "\047\uff93\051\uff93\052\uff93\053\uff93\054\uff93\057\uff93\060" +
    "\uff93\061\uff93\062\uff93\001\002\000\040\017\131\020\124" +
    "\022\114\023\115\026\123\027\120\031\117\032\130\033" +
    "\122\034\125\035\126\036\113\037\116\040\127\045\152" +
    "\001\002\000\100\004\uffa4\012\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\017\uffa4\020\uffa4\022\uffa4\023\uffa4\026\uffa4\027\uffa4" +
    "\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\043\uffa4\045\uffa4\046\uffa4\047\uffa4\051\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\057\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\001\002\000\100\004\uffa1\012\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\017\uffa1\020\uffa1\022\uffa1\023\uffa1\026\uffa1\027" +
    "\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\040\uffa1\043\uffa1\045\uffa1\046\uffa1\047\uffa1\051" +
    "\uffa1\052\uffa1\053\uffa1\054\uffa1\057\uffa1\060\uffa1\061\uffa1" +
    "\062\uffa1\001\002\000\040\004\020\005\106\006\077\007" +
    "\066\010\101\011\105\020\070\030\102\044\103\045\157" +
    "\046\072\054\063\057\060\060\104\063\076\001\002\000" +
    "\004\045\162\001\002\000\042\017\131\020\124\022\114" +
    "\023\115\026\123\027\120\031\117\032\130\033\122\034" +
    "\125\035\126\036\113\037\116\040\127\045\uffdf\051\160" +
    "\001\002\000\106\004\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\017\uffdc\020\uffdc\022\uffdc\023\uffdc\026\uffdc\027\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\057\uffdc\060" +
    "\uffdc\061\uffdc\062\uffdc\064\uffdc\001\002\000\036\004\020" +
    "\005\106\006\077\007\066\010\101\011\105\020\070\030" +
    "\102\044\103\046\072\054\063\057\060\060\104\063\076" +
    "\001\002\000\004\045\uffde\001\002\000\106\004\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd\020\uffdd\022\uffdd" +
    "\023\uffdd\026\uffdd\027\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\064\uffdd" +
    "\001\002\000\050\002\uffbd\004\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\041\uffbd\042\055\046\uffbd\047\uffbd\051\uffbd" +
    "\052\uffbd\053\uffbd\054\uffbd\055\uffbd\057\uffbd\060\uffbd\061" +
    "\uffbd\062\uffbd\001\002\000\046\002\uffbc\004\uffbc\012\uffbc" +
    "\013\uffbc\014\uffbc\015\uffbc\041\uffbc\046\uffbc\047\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\001\002\000\046\002\uffbb\004\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\041\uffbb\046\uffbb\047\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\001\002\000\042\017\131\020\124" +
    "\022\114\023\115\026\123\027\120\031\117\032\130\033" +
    "\122\034\125\035\126\036\113\037\116\040\127\047\uffff" +
    "\051\171\001\002\000\004\047\170\001\002\000\102\004" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\017\ufffc\020\ufffc" +
    "\022\ufffc\023\ufffc\026\ufffc\027\ufffc\031\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\042\ufffc" +
    "\043\ufffc\045\ufffc\046\ufffc\047\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\001\002" +
    "\000\040\004\020\005\106\006\077\007\066\010\101\011" +
    "\105\020\070\030\102\044\103\046\072\047\ufffd\054\063" +
    "\057\060\060\104\063\076\001\002\000\004\047\ufffe\001" +
    "\002\000\100\004\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\017\uffa2\020\uffa2\022\uffa2\023\uffa2\026\uffa2\027\uffa2\031" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\043\uffa2\045\uffa2\046\uffa2\047\uffa2\051\uffa2\052" +
    "\uffa2\053\uffa2\054\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2" +
    "\001\002\000\106\004\000\012\000\013\000\014\000\015" +
    "\000\017\000\020\000\022\000\023\000\026\000\027\000" +
    "\031\000\032\000\033\000\034\000\035\000\036\000\037" +
    "\000\040\000\041\000\042\000\043\000\045\000\046\000" +
    "\047\000\051\000\052\000\053\000\054\000\057\000\060" +
    "\000\061\000\062\000\064\000\001\002\000\004\004\020" +
    "\001\002\000\110\004\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\017\uffeb\020\uffeb\022\uffeb\023\uffeb\026\uffeb\027\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\177\045\uffeb" +
    "\046\uffeb\047\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\064\uffeb\001\002\000\040" +
    "\004\020\005\106\006\077\007\066\010\101\011\105\020" +
    "\070\030\102\044\103\045\201\046\072\054\063\057\060" +
    "\060\104\063\076\001\002\000\004\045\202\001\002\000" +
    "\106\004\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb" +
    "\020\uffdb\022\uffdb\023\uffdb\026\uffdb\027\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\045\uffdb\046\uffdb\047\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\057\uffdb\060\uffdb\061\uffdb" +
    "\062\uffdb\064\uffdb\001\002\000\106\004\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\017\uffda\020\uffda\022\uffda\023\uffda" +
    "\026\uffda\027\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda" +
    "\045\uffda\046\uffda\047\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\064\uffda\001\002" +
    "\000\004\043\064\001\002\000\050\002\ufff5\004\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\041\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\057" +
    "\ufff5\060\ufff5\061\ufff5\062\ufff5\001\002\000\036\004\020" +
    "\005\106\006\077\007\066\010\101\011\105\020\070\030" +
    "\102\044\103\046\072\054\063\057\060\060\104\063\076" +
    "\001\002\000\040\017\131\020\124\022\114\023\115\026" +
    "\123\027\120\031\117\032\130\033\122\034\125\035\126" +
    "\036\113\037\116\040\127\045\207\001\002\000\106\004" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9" +
    "\022\uffd9\023\uffd9\026\uffd9\027\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\045\uffd9\046\uffd9\047\uffd9\051\uffd9\052" +
    "\uffd9\053\uffd9\054\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9" +
    "\064\uffd9\001\002\000\106\004\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\017\uffea\020\uffea\022\uffea\023\uffea\026\uffea" +
    "\027\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\045\uffea" +
    "\046\uffea\047\uffea\051\uffea\052\uffea\053\uffea\054\uffea\057" +
    "\uffea\060\uffea\061\uffea\062\uffea\064\uffea\001\002\000\046" +
    "\002\uffbe\004\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\041" +
    "\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\001\002\000" +
    "\046\002\uffbf\004\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\041\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\001\002" +
    "\000\004\050\355\001\002\000\004\045\352\001\002\000" +
    "\006\046\uff87\050\217\001\002\000\004\046\232\001\002" +
    "\000\010\004\020\024\054\025\052\001\002\000\012\042" +
    "\203\045\uff75\046\uff75\051\uff75\001\002\000\004\046\uff88" +
    "\001\002\000\012\041\uff76\045\uff76\046\uff76\051\uff76\001" +
    "\002\000\012\042\203\045\uff77\046\uff77\051\uff77\001\002" +
    "\000\006\046\uff74\051\225\001\002\000\010\004\020\024" +
    "\054\025\052\001\002\000\004\046\uff73\001\002\000\010" +
    "\045\uffe7\046\uffe7\051\uffe7\001\002\000\010\045\uffe6\046" +
    "\uffe6\051\uffe6\001\002\000\012\002\uffd8\004\uffd8\047\uffd8" +
    "\055\uffd8\001\002\000\032\004\020\012\246\014\257\015" +
    "\237\046\232\047\243\053\233\054\063\057\060\060\104" +
    "\061\244\062\256\001\002\000\006\041\346\051\263\001" +
    "\002\000\044\004\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\041\uffec\042\uffec\046\uffb1\047\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\064\uffec\001\002" +
    "\000\036\004\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\046" +
    "\uffb3\047\uffb3\052\uffb3\053\uffb3\054\uffb3\057\uffb3\060\uffb3" +
    "\061\uffb3\062\uffb3\001\002\000\010\041\343\042\111\064" +
    "\175\001\002\000\042\004\020\005\106\006\077\007\066" +
    "\010\101\011\105\020\070\030\102\044\103\046\072\047" +
    "\uff8c\052\335\054\063\057\060\060\104\063\076\001\002" +
    "\000\036\004\uffad\012\uffad\013\uffad\014\uffad\015\uffad\046" +
    "\uffad\047\uffad\052\uffad\053\uffad\054\uffad\057\uffad\060\uffad" +
    "\061\uffad\062\uffad\001\002\000\036\004\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\046\uffb0\047\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\001\002\000" +
    "\036\004\uff81\012\uff81\013\uff81\014\uff81\015\uff81\046\uff81" +
    "\047\uff81\052\334\053\uff81\054\uff81\057\uff81\060\uff81\061" +
    "\uff81\062\uff81\001\002\000\042\002\ufffa\004\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\046\ufffa\047\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa" +
    "\001\002\000\040\004\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\046\uffab\047\uffab\052\uffab\053\uffab\054\uffab\057\uffab" +
    "\060\uffab\061\uffab\062\uffab\066\332\001\002\000\006\015" +
    "\237\047\327\001\002\000\004\044\321\001\002\000\004" +
    "\047\320\001\002\000\036\004\uffac\012\uffac\013\uffac\014" +
    "\uffac\015\uffac\046\uffac\047\uffac\052\uffac\053\uffac\054\uffac" +
    "\057\uffac\060\uffac\061\uffac\062\uffac\001\002\000\036\004" +
    "\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\046\uffb4\047\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\057\uffb4\060\uffb4\061\uffb4\062" +
    "\uffb4\001\002\000\016\041\uffed\042\uffed\044\154\050\310" +
    "\051\045\064\uffed\001\002\000\036\004\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\046\uffb2\047\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\001\002\000" +
    "\036\004\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\046\uffaf" +
    "\047\uffaf\052\uffaf\053\uffaf\054\uffaf\057\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\001\002\000\004\014\303\001\002\000\040" +
    "\004\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\046\uffa9\047" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\065\301\001\002\000\004\044\275\001\002\000" +
    "\040\004\uffae\012\uffae\013\uffae\014\uffae\015\uffae\046\uffae" +
    "\047\uffae\051\263\052\uffae\053\uffae\054\uffae\057\uffae\060" +
    "\uffae\061\uffae\062\uffae\001\002\000\032\004\020\012\246" +
    "\014\257\015\uff80\046\232\047\uff80\053\233\054\063\057" +
    "\060\060\104\061\244\062\256\001\002\000\006\015\uff7f" +
    "\047\uff7f\001\002\000\006\004\020\053\271\001\002\000" +
    "\004\041\265\001\002\000\012\004\020\054\063\057\060" +
    "\060\104\001\002\000\042\004\uff79\012\uff79\013\uff79\014" +
    "\uff79\015\uff79\042\uffec\046\uff79\047\uff79\052\uff79\053\uff79" +
    "\054\uff79\057\uff79\060\uff79\061\uff79\062\uff79\064\uffec\001" +
    "\002\000\006\042\111\064\175\001\002\000\004\050\047" +
    "\001\002\000\006\041\uff7c\051\263\001\002\000\006\041" +
    "\uff7e\051\263\001\002\000\004\041\uff7d\001\002\000\004" +
    "\041\uff7b\001\002\000\036\004\020\005\106\006\077\007" +
    "\066\010\101\011\105\020\070\030\102\044\103\046\072" +
    "\054\063\057\060\060\104\063\076\001\002\000\040\017" +
    "\131\020\124\022\114\023\115\026\123\027\120\031\117" +
    "\032\130\033\122\034\125\035\126\036\113\037\116\040" +
    "\127\045\277\001\002\000\026\004\020\012\246\014\257" +
    "\046\232\053\233\054\063\057\060\060\104\061\244\062" +
    "\256\001\002\000\036\004\uff6a\012\uff6a\013\uff6a\014\uff6a" +
    "\015\uff6a\046\uff6a\047\uff6a\052\uff6a\053\uff6a\054\uff6a\057" +
    "\uff6a\060\uff6a\061\uff6a\062\uff6a\001\002\000\004\004\302" +
    "\001\002\000\036\004\uffa8\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\046\uffa8\047\uffa8\052\uffa8\053\uffa8\054\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\001\002\000\004\044\304\001" +
    "\002\000\036\004\020\005\106\006\077\007\066\010\101" +
    "\011\105\020\070\030\102\044\103\046\072\054\063\057" +
    "\060\060\104\063\076\001\002\000\040\017\131\020\124" +
    "\022\114\023\115\026\123\027\120\031\117\032\130\033" +
    "\122\034\125\035\126\036\113\037\116\040\127\045\306" +
    "\001\002\000\026\004\020\012\246\014\257\046\232\053" +
    "\233\054\063\057\060\060\104\061\244\062\256\001\002" +
    "\000\036\004\uff69\012\uff69\013\uff69\014\uff69\015\uff69\046" +
    "\uff69\047\uff69\052\uff69\053\uff69\054\uff69\057\uff69\060\uff69" +
    "\061\uff69\062\uff69\001\002\000\012\004\020\014\uffc7\024" +
    "\054\025\052\001\002\000\044\004\uff6c\012\uff6c\013\uff6c" +
    "\014\uff6c\015\uff6c\041\uff75\042\055\046\uff6c\047\uff6c\051" +
    "\uff6c\052\uff6c\053\uff6c\054\uff6c\057\uff6c\060\uff6c\061\uff6c" +
    "\062\uff6c\001\002\000\044\004\uff6d\012\uff6d\013\uff6d\014" +
    "\uff6d\015\uff6d\041\uff77\042\055\046\uff6d\047\uff6d\051\uff6d" +
    "\052\uff6d\053\uff6d\054\uff6d\057\uff6d\060\uff6d\061\uff6d\062" +
    "\uff6d\001\002\000\004\041\314\001\002\000\036\004\020" +
    "\005\106\006\077\007\066\010\101\011\105\020\070\030" +
    "\102\044\103\046\072\054\063\057\060\060\104\063\076" +
    "\001\002\000\072\004\uff6b\012\uff6b\013\uff6b\014\uff6b\015" +
    "\uff6b\017\131\020\124\022\114\023\115\026\123\027\120" +
    "\031\117\032\130\033\122\034\125\035\126\036\113\037" +
    "\116\040\127\046\uff6b\047\uff6b\052\uff6b\053\uff6b\054\uff6b" +
    "\057\uff6b\060\uff6b\061\uff6b\062\uff6b\001\002\000\042\004" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\041\uffe7\046\uffc1" +
    "\047\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\001\002\000\042\004\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\041\uffe6\046\uffbf\047\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\057\uffbf\060\uffbf\061\uffbf" +
    "\062\uffbf\001\002\000\042\002\ufff7\004\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\046\ufff7\047\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\055\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\001" +
    "\002\000\036\004\020\005\106\006\077\007\066\010\101" +
    "\011\105\020\070\030\102\044\103\046\072\054\063\057" +
    "\060\060\104\063\076\001\002\000\040\017\131\020\124" +
    "\022\114\023\115\026\123\027\120\031\117\032\130\033" +
    "\122\034\125\035\126\036\113\037\116\040\127\045\323" +
    "\001\002\000\026\004\020\012\246\014\257\046\232\053" +
    "\233\054\063\057\060\060\104\061\244\062\256\001\002" +
    "\000\036\004\uffcb\012\uffcb\013\325\014\uffcb\015\uffcb\046" +
    "\uffcb\047\uffcb\052\uffcb\053\uffcb\054\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\062\uffcb\001\002\000\026\004\020\012\246\014" +
    "\257\046\232\053\233\054\063\057\060\060\104\061\244" +
    "\062\256\001\002\000\036\004\uffca\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\046\uffca\047\uffca\052\uffca\053\uffca\054\uffca" +
    "\057\uffca\060\uffca\061\uffca\062\uffca\001\002\000\042\002" +
    "\ufff9\004\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\046\ufff9" +
    "\047\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\057\ufff9\060" +
    "\ufff9\061\ufff9\062\ufff9\001\002\000\004\047\331\001\002" +
    "\000\042\002\ufff8\004\ufff8\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\046\ufff8\047\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8" +
    "\057\ufff8\060\ufff8\061\ufff8\062\ufff8\001\002\000\004\004" +
    "\333\001\002\000\036\004\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\046\uffaa\047\uffaa\052\uffaa\053\uffaa\054\uffaa\057" +
    "\uffaa\060\uffaa\061\uffaa\062\uffaa\001\002\000\036\004\uff82" +
    "\012\uff82\013\uff82\014\uff82\015\uff82\046\uff82\047\uff82\052" +
    "\uff82\053\uff82\054\uff82\057\uff82\060\uff82\061\uff82\062\uff82" +
    "\001\002\000\004\047\uff8a\001\002\000\044\017\131\020" +
    "\124\022\114\023\115\026\123\027\120\031\117\032\130" +
    "\033\122\034\125\035\126\036\113\037\116\040\127\047" +
    "\uff8e\051\341\052\uff8e\001\002\000\006\047\uff8b\052\340" +
    "\001\002\000\004\047\uff89\001\002\000\036\004\020\005" +
    "\106\006\077\007\066\010\101\011\105\020\070\030\102" +
    "\044\103\046\072\054\063\057\060\060\104\063\076\001" +
    "\002\000\006\047\uff8d\052\uff8d\001\002\000\036\004\020" +
    "\005\106\006\077\007\066\010\101\011\105\020\070\030" +
    "\102\044\103\046\072\054\063\057\060\060\104\063\076" +
    "\001\002\000\072\004\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\017\131\020\124\022\114\023\115\026\123\027\120" +
    "\031\117\032\130\033\122\034\125\035\126\036\113\037" +
    "\116\040\127\046\ufffb\047\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\057\ufffb\060\ufffb\061\ufffb\062\ufffb\001\002\000\004\041" +
    "\350\001\002\000\012\004\020\054\063\057\060\060\104" +
    "\001\002\000\042\004\uff78\012\uff78\013\uff78\014\uff78\015" +
    "\uff78\042\uffec\046\uff78\047\uff78\052\uff78\053\uff78\054\uff78" +
    "\057\uff78\060\uff78\061\uff78\062\uff78\064\uffec\001\002\000" +
    "\012\004\020\054\063\057\060\060\104\001\002\000\042" +
    "\004\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\042\uffec\046" +
    "\uff7a\047\uff7a\052\uff7a\053\uff7a\054\uff7a\057\uff7a\060\uff7a" +
    "\061\uff7a\062\uff7a\064\uffec\001\002\000\006\046\uff87\050" +
    "\217\001\002\000\004\046\232\001\002\000\012\002\uffd7" +
    "\004\uffd7\047\uffd7\055\uffd7\001\002\000\010\004\020\024" +
    "\054\025\052\001\002\000\006\045\uffd6\051\357\001\002" +
    "\000\004\004\020\001\002\000\004\045\uffd5\001\002\000" +
    "\006\050\uffcc\051\367\001\002\000\004\050\363\001\002" +
    "\000\010\004\020\024\054\025\052\001\002\000\044\002" +
    "\uff85\004\uff85\012\uff85\013\uff85\014\uff85\015\uff85\042\055" +
    "\046\uff85\047\uff85\052\uff85\053\uff85\054\uff85\055\uff85\057" +
    "\uff85\060\uff85\061\uff85\062\uff85\001\002\000\042\002\uff84" +
    "\004\uff84\012\uff84\013\uff84\014\uff84\015\uff84\046\uff84\047" +
    "\uff84\052\uff84\053\uff84\054\uff84\055\uff84\057\uff84\060\uff84" +
    "\061\uff84\062\uff84\001\002\000\044\002\uff86\004\uff86\012" +
    "\uff86\013\uff86\014\uff86\015\uff86\042\055\046\uff86\047\uff86" +
    "\052\uff86\053\uff86\054\uff86\055\uff86\057\uff86\060\uff86\061" +
    "\uff86\062\uff86\001\002\000\004\004\020\001\002\000\004" +
    "\050\uffcd\001\002\000\004\046\372\001\002\000\006\004" +
    "\020\047\ufff2\001\002\000\004\047\374\001\002\000\010" +
    "\002\ufff0\004\ufff0\055\ufff0\001\002\000\004\002\001\001" +
    "\002\000\012\004\uff72\016\006\052\377\055\uff72\001\002" +
    "\000\010\004\uff71\016\006\055\uff71\001\002\000\006\004" +
    "\uff70\055\uff70\001\002\000\006\004\uff6f\055\uff6f\001\002" +
    "\000\010\002\uffd2\004\uffd2\055\uffd2\001\002\000\010\004" +
    "\020\024\054\025\052\001\002\000\016\002\uff6d\004\uff6d" +
    "\041\u0105\042\055\052\uff6d\055\uff6d\001\002\000\014\005" +
    "\106\006\077\007\066\010\101\011\105\001\002\000\012" +
    "\002\uff83\004\uff83\052\uff83\055\uff83\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\026\011\015\022\010\024\013\025\003\035" +
    "\012\041\006\045\004\046\011\055\014\056\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\375\001" +
    "\001\000\002\001\001\000\004\025\026\001\001\000\022" +
    "\011\015\022\010\024\013\025\003\035\025\045\004\046" +
    "\011\056\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\011\015\022\010\024\013\025\003\035\023\045" +
    "\004\046\011\056\016\001\001\000\022\011\015\022\010" +
    "\024\013\025\003\035\022\045\004\046\011\056\016\001" +
    "\001\000\022\011\015\022\010\024\013\025\003\035\021" +
    "\045\004\046\011\056\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\370\001\001\000\016" +
    "\010\033\017\035\022\032\025\031\045\034\056\036\001" +
    "\001\000\002\001\001\000\016\010\043\017\035\022\032" +
    "\025\031\045\034\056\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\040\017\035\022\032\025\031" +
    "\045\034\056\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\360\026\361\001\001\000" +
    "\006\023\213\025\212\001\001\000\010\025\047\033\050" +
    "\040\052\001\001\000\006\007\211\034\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\056\034\055" +
    "\001\001\000\002\001\001\000\026\002\073\004\106\012" +
    "\060\013\064\015\072\016\066\021\061\025\074\032\070" +
    "\037\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\203\001\001\000\004\030" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\002\073\004\106\012\060\013\064\015\172\016\066\021" +
    "\061\025\074\032\070\037\077\001\001\000\002\001\001" +
    "\000\030\002\073\003\166\004\106\012\060\013\064\015" +
    "\165\016\066\021\061\025\074\032\070\037\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\073\004\106\012\060\013\064\015" +
    "\152\016\066\021\061\025\074\032\070\037\077\001\001" +
    "\000\026\002\073\004\106\012\060\013\064\015\150\016" +
    "\066\021\061\025\074\032\070\037\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\107\001\001\000\002\001\001\000\026\002\073\004\106" +
    "\012\060\013\064\015\111\016\066\021\061\025\074\032" +
    "\070\037\077\001\001\000\002\001\001\000\026\002\073" +
    "\004\106\012\060\013\064\015\147\016\066\021\061\025" +
    "\074\032\070\037\077\001\001\000\026\002\073\004\106" +
    "\012\060\013\064\015\146\016\066\021\061\025\074\032" +
    "\070\037\077\001\001\000\026\002\073\004\106\012\060" +
    "\013\064\015\145\016\066\021\061\025\074\032\070\037" +
    "\077\001\001\000\026\002\073\004\106\012\060\013\064" +
    "\015\144\016\066\021\061\025\074\032\070\037\077\001" +
    "\001\000\026\002\073\004\106\012\060\013\064\015\143" +
    "\016\066\021\061\025\074\032\070\037\077\001\001\000" +
    "\026\002\073\004\106\012\060\013\064\015\142\016\066" +
    "\021\061\025\074\032\070\037\077\001\001\000\004\030" +
    "\141\001\001\000\026\002\073\004\106\012\060\013\064" +
    "\015\140\016\066\021\061\025\074\032\070\037\077\001" +
    "\001\000\026\002\073\004\106\012\060\013\064\015\137" +
    "\016\066\021\061\025\074\032\070\037\077\001\001\000" +
    "\026\002\073\004\106\012\060\013\064\015\136\016\066" +
    "\021\061\025\074\032\070\037\077\001\001\000\026\002" +
    "\073\004\106\012\060\013\064\015\135\016\066\021\061" +
    "\025\074\032\070\037\077\001\001\000\026\002\073\004" +
    "\106\012\060\013\064\015\134\016\066\021\061\025\074" +
    "\032\070\037\077\001\001\000\026\002\073\004\106\012" +
    "\060\013\064\015\133\016\066\021\061\025\074\032\070" +
    "\037\077\001\001\000\026\002\073\004\106\012\060\013" +
    "\064\015\132\016\066\021\061\025\074\032\070\037\077" +
    "\001\001\000\026\002\073\004\106\012\060\013\064\015" +
    "\131\016\066\021\061\025\074\032\070\037\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\073\004\106" +
    "\012\060\013\064\015\155\016\066\020\154\021\061\025" +
    "\074\032\070\037\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\002\073\004\106\012" +
    "\060\013\064\015\155\016\066\020\160\021\061\025\074" +
    "\032\070\037\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\164\034\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\073\003\171\004\106\012\060" +
    "\013\064\015\165\016\066\021\061\025\074\032\070\037" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\175\001\001\000\002\001\001\000" +
    "\030\002\073\004\106\012\060\013\064\015\155\016\066" +
    "\020\177\021\061\025\074\032\070\037\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\073\004\106\012" +
    "\060\013\064\015\205\016\066\021\061\025\074\032\070" +
    "\037\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\215\001\001\000" +
    "\004\006\230\001\001\000\014\014\221\025\217\040\222" +
    "\053\223\054\220\001\001\000\004\007\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\226\001\001" +
    "\000\002\001\001\000\014\014\221\025\217\040\222\053" +
    "\223\054\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\002\073\005" +
    "\250\006\240\013\235\021\233\025\251\027\234\031\254" +
    "\036\241\043\246\045\253\047\260\050\244\052\247\056" +
    "\257\057\237\060\252\001\001\000\004\051\344\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\173\001" +
    "\001\000\030\002\073\004\106\012\060\013\064\015\335" +
    "\016\066\021\061\025\074\032\070\037\077\042\336\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\327\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\263\001\001\000\042\002\073\005" +
    "\250\006\240\013\235\021\233\025\251\027\234\031\254" +
    "\036\241\045\253\047\260\050\261\052\247\056\257\057" +
    "\237\060\252\001\001\000\002\001\001\000\006\025\267" +
    "\056\271\001\001\000\002\001\001\000\012\002\073\013" +
    "\266\021\265\025\074\001\001\000\002\001\001\000\004" +
    "\030\173\001\001\000\002\001\001\000\004\051\273\001" +
    "\001\000\004\051\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\073\004\106\012\060\013\064\015" +
    "\275\016\066\021\061\025\074\032\070\037\077\001\001" +
    "\000\002\001\001\000\040\002\073\005\250\006\240\013" +
    "\235\021\233\025\251\027\234\031\254\036\241\045\253" +
    "\047\277\052\247\056\257\057\237\060\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\073\004\106\012\060\013\064\015" +
    "\304\016\066\021\061\025\074\032\070\037\077\001\001" +
    "\000\002\001\001\000\040\002\073\005\250\006\240\013" +
    "\235\021\233\025\251\027\234\031\254\036\241\045\253" +
    "\047\306\052\247\056\257\057\237\060\252\001\001\000" +
    "\002\001\001\000\014\014\221\025\310\033\050\040\311" +
    "\053\312\001\001\000\006\007\316\034\210\001\001\000" +
    "\006\007\315\034\055\001\001\000\002\001\001\000\026" +
    "\002\073\004\106\012\060\013\064\015\314\016\066\021" +
    "\061\025\074\032\070\037\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\002\073\004\106\012\060\013\064\015\321\016\066" +
    "\021\061\025\074\032\070\037\077\001\001\000\002\001" +
    "\001\000\040\002\073\005\250\006\240\013\235\021\233" +
    "\025\251\027\234\031\254\036\241\045\253\047\323\052" +
    "\247\056\257\057\237\060\252\001\001\000\002\001\001" +
    "\000\040\002\073\005\250\006\240\013\235\021\233\025" +
    "\251\027\234\031\254\036\241\045\253\047\325\052\247" +
    "\056\257\057\237\060\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\073\004\106\012\060\013\064\015\335\016" +
    "\066\021\061\025\074\032\070\037\077\042\341\001\001" +
    "\000\002\001\001\000\026\002\073\004\106\012\060\013" +
    "\064\015\343\016\066\021\061\025\074\032\070\037\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\073\013\266\021\346\025\074\001\001\000\002\001\001" +
    "\000\012\002\073\013\266\021\350\025\074\001\001\000" +
    "\002\001\001\000\004\044\352\001\001\000\004\006\353" +
    "\001\001\000\002\001\001\000\012\014\221\025\217\040" +
    "\222\053\355\001\001\000\002\001\001\000\006\023\357" +
    "\025\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\363\033\364\040\365\001\001" +
    "\000\006\007\211\034\210\001\001\000\002\001\001\000" +
    "\006\007\056\034\055\001\001\000\006\025\360\026\367" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\372\017\035\022\032\025\031\045\034\056\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\377\001\001\000\004\055\u0100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\047\033\050\040\u0103\001\001\000\006\007\056\034\055" +
    "\001\001\000\004\032\u0105\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


 
  public void report_fatal_error(String msg, Object info) {
    report_error(msg, info);
  }

  public void report_error(String msg, Object info) {
    Main.setToken((java_cup.runtime.Symbol)info);
    Main.handleSyntaxError("Syntax error: unexpected ");
  }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 152. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Program start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // array_element ::= dotable_expr indexed_brackets 
            {
                ArrayElement RESULT = null;
                int deleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int deright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                DotableExpr de = CUP$parser$stack.elementAt(CUP$parser$top-1).<DotableExpr> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new ArrayElement(de,ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // array_element_list ::= expr 
            {
                ArrayElementList RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ArrayElementList(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // array_element_list ::= expr COMMA array_element_list 
            {
                ArrayElementList RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int aelleft = CUP$parser$stack.peek().left;
                int aelright = CUP$parser$stack.peek().right;
                ArrayElementList ael = CUP$parser$stack.peek().<ArrayElementList> value();
                 RESULT = new ArrayElementList(e,ael); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // array_element_list ::= 
            {
                ArrayElementList RESULT = null;
                 RESULT = new ArrayElementList(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_element_list",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // array_literal ::= OPEN_BRACE array_element_list CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int obleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int obright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object ob = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int aelleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aelright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayElementList ael = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayElementList> value();
                 RESULT = new ArrayLiteral(ael, obleft, obright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literal",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // assignment_stmt ::= dotable_expr GETS expr 
            {
                AssignmentStmt RESULT = null;
                int deleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int deright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                DotableExpr de = CUP$parser$stack.elementAt(CUP$parser$top-2).<DotableExpr> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignmentStmt(de, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // block_stmt ::= OPEN_BRACE CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                 RESULT = new BlockStmt(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // block_stmt ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                StmtList sl = CUP$parser$stack.elementAt(CUP$parser$top-1).<StmtList> value();
                 RESULT = new BlockStmt(sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // block_stmt ::= OPEN_BRACE stmt_list return_stmt CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                StmtList sl = CUP$parser$stack.elementAt(CUP$parser$top-2).<StmtList> value();
                int rsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnStmt rs = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnStmt> value();
                 RESULT = new BlockStmt(sl, rs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // block_stmt ::= OPEN_BRACE return_stmt CLOSE_BRACE 
            {
                BlockStmt RESULT = null;
                int rsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnStmt rs = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnStmt> value();
                 RESULT = new BlockStmt(rs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // brackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
                Brackets RESULT = null;
                 RESULT = new Brackets(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // brackets ::= OPEN_BRACKET CLOSE_BRACKET brackets 
            {
                Brackets RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new Brackets(b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",5, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // class_body ::= field_decl class_body 
            {
                ClassBody RESULT = null;
                int fdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FieldDecl fd = CUP$parser$stack.elementAt(CUP$parser$top-1).<FieldDecl> value();
                int cbleft = CUP$parser$stack.peek().left;
                int cbright = CUP$parser$stack.peek().right;
                ClassBody cb = CUP$parser$stack.peek().<ClassBody> value();
                 RESULT = new ClassBody(fd,cb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // class_body ::= function_decl class_body 
            {
                ClassBody RESULT = null;
                int fdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionDecl fd = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionDecl> value();
                int cbleft = CUP$parser$stack.peek().left;
                int cbright = CUP$parser$stack.peek().right;
                ClassBody cb = CUP$parser$stack.peek().<ClassBody> value();
                 RESULT = new ClassBody(fd,cb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // class_body ::= 
            {
                ClassBody RESULT = null;
                 RESULT = new ClassBody(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",6, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // class_decl ::= CLASS identifier OPEN_BRACE class_body CLOSE_BRACE 
            {
                ClassDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int cbleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int cbright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ClassBody cb = CUP$parser$stack.elementAt(CUP$parser$top-1).<ClassBody> value();
                 RESULT = new ClassDecl(id,cb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",7, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // class_decl ::= CLASS identifier EXTENDS identifier OPEN_BRACE class_body CLOSE_BRACE 
            {
                ClassDecl RESULT = null;
                int id1left = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int id1right = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                Identifier id1 = CUP$parser$stack.elementAt(CUP$parser$top-5).<Identifier> value();
                int id2left = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int id2right = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id2 = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int cbleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int cbright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ClassBody cb = CUP$parser$stack.elementAt(CUP$parser$top-1).<ClassBody> value();
                 RESULT = new ClassDecl(id1,id2,cb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",7, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // constant ::= literal 
            {
                Constant RESULT = null;
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Literal l = CUP$parser$stack.peek().<Literal> value();
                 RESULT = l; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // constant ::= array_literal 
            {
                Constant RESULT = null;
                int alleft = CUP$parser$stack.peek().left;
                int alright = CUP$parser$stack.peek().right;
                ArrayLiteral al = CUP$parser$stack.peek().<ArrayLiteral> value();
                 RESULT = al; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // dotable_expr ::= identifier 
            {
                DotableExpr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new DotableExpr(id,false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // dotable_expr ::= function_call 
            {
                DotableExpr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new DotableExpr(fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // dotable_expr ::= dotable_expr DOT identifier 
            {
                DotableExpr RESULT = null;
                int deleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int deright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                DotableExpr de = CUP$parser$stack.elementAt(CUP$parser$top-2).<DotableExpr> value();
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new DotableExpr(de,id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // dotable_expr ::= NEW identifier 
            {
                DotableExpr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new DotableExpr(id,true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // dotable_expr ::= THIS 
            {
                DotableExpr RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Object t = CUP$parser$stack.peek().<Object> value();
                 RESULT = new DotableExpr(tleft, tright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // dotable_expr ::= array_element 
            {
                DotableExpr RESULT = null;
                int aeleft = CUP$parser$stack.peek().left;
                int aeright = CUP$parser$stack.peek().right;
                ArrayElement ae = CUP$parser$stack.peek().<ArrayElement> value();
                 RESULT = new DotableExpr(ae); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("dotable_expr",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // empty_array_type ::= primitive_type brackets 
            {
                EmptyArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new EmptyArrayType(pt, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("empty_array_type",10, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // empty_array_type ::= identifier brackets 
            {
                EmptyArrayType RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new EmptyArrayType(id, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("empty_array_type",10, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // expr ::= dotable_expr 
            {
                Expr RESULT = null;
                int deleft = CUP$parser$stack.peek().left;
                int deright = CUP$parser$stack.peek().right;
                DotableExpr de = CUP$parser$stack.peek().<DotableExpr> value();
                 RESULT = de; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // expr ::= normal_expr 
            {
                Expr RESULT = null;
                int neleft = CUP$parser$stack.peek().left;
                int neright = CUP$parser$stack.peek().right;
                Expr ne = CUP$parser$stack.peek().<Expr> value();
                 RESULT = ne; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // field_decl ::= var_decl 
            {
                FieldDecl RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new FieldDecl(vd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // field_decl ::= short_tuple_decl 
            {
                FieldDecl RESULT = null;
                int stdleft = CUP$parser$stack.peek().left;
                int stdright = CUP$parser$stack.peek().right;
                ShortTupleDecl std = CUP$parser$stack.peek().<ShortTupleDecl> value();
                 RESULT = new FieldDecl(std); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // field_decl ::= var_decl SEMICOLON 
            {
                FieldDecl RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl> value();
                 RESULT = new FieldDecl(vd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",13, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // field_decl ::= short_tuple_decl SEMICOLON 
            {
                FieldDecl RESULT = null;
                int stdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int stdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ShortTupleDecl std = CUP$parser$stack.elementAt(CUP$parser$top-1).<ShortTupleDecl> value();
                 RESULT = new FieldDecl(std); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",13, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // function_arg ::= expr 
            {
                FunctionArg RESULT = null;
                int expressionleft = CUP$parser$stack.peek().left;
                int expressionright = CUP$parser$stack.peek().right;
                Expr expression = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new FunctionArg(expression); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // function_arg ::= expr COMMA function_arg 
            {
                FunctionArg RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int faleft = CUP$parser$stack.peek().left;
                int faright = CUP$parser$stack.peek().right;
                FunctionArg fa = CUP$parser$stack.peek().<FunctionArg> value();
                 RESULT = new FunctionArg(expression, fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_arg",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // function_call ::= identifier OPEN_PAREN function_arg CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int faleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int faright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionArg fa = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionArg> value();
                 RESULT = new FunctionCall(id, fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",15, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // function_call ::= identifier OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                 RESULT = new FunctionCall(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // function_call ::= dotable_expr DOT identifier OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int deleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int deright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                DotableExpr de = CUP$parser$stack.elementAt(CUP$parser$top-4).<DotableExpr> value();
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                 RESULT = new FunctionCall(de,id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",15, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // function_call ::= dotable_expr DOT identifier OPEN_PAREN function_arg CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int deleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int deright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                DotableExpr de = CUP$parser$stack.elementAt(CUP$parser$top-5).<DotableExpr> value();
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-3).<Identifier> value();
                int faleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int faright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionArg fa = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionArg> value();
                 RESULT = new FunctionCall(de,id,fa); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",15, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // function_call ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int lleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int lright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Object l = CUP$parser$stack.elementAt(CUP$parser$top-3).<Object> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new FunctionCall(e, lleft, lright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",15, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // function_decl ::= identifier OPEN_PAREN CLOSE_PAREN return_type block_stmt 
            {
                FunctionDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int rtleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rtright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnType rt = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnType> value();
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = new FunctionDecl(id, rt, bs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",16, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // function_decl ::= identifier OPEN_PAREN function_param CLOSE_PAREN return_type block_stmt 
            {
                FunctionDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-5).<Identifier> value();
                int fpleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int fpright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                FunctionParam fp = CUP$parser$stack.elementAt(CUP$parser$top-3).<FunctionParam> value();
                int rtleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rtright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnType rt = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnType> value();
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = new FunctionDecl(id, fp, rt, bs); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",16, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // function_param ::= identifier COLON type 
            {
                FunctionParam RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new FunctionParam(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // function_param ::= identifier COLON type COMMA function_param 
            {
                FunctionParam RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int fpleft = CUP$parser$stack.peek().left;
                int fpright = CUP$parser$stack.peek().right;
                FunctionParam fp = CUP$parser$stack.peek().<FunctionParam> value();
                 RESULT = new FunctionParam(id, t, fp); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_param",17, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // global_decl ::= var_decl SEMICOLON 
            {
                GlobalDecl RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl> value();
                 RESULT = new GlobalDecl(vd, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",18, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // global_decl ::= var_decl 
            {
                GlobalDecl RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new GlobalDecl(vd, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // global_decl ::= short_tuple_decl SEMICOLON 
            {
                GlobalDecl RESULT = null;
                int stdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int stdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ShortTupleDecl std = CUP$parser$stack.elementAt(CUP$parser$top-1).<ShortTupleDecl> value();
                 RESULT = new GlobalDecl(std, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",18, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // global_decl ::= short_tuple_decl 
            {
                GlobalDecl RESULT = null;
                int stdleft = CUP$parser$stack.peek().left;
                int stdright = CUP$parser$stack.peek().right;
                ShortTupleDecl std = CUP$parser$stack.peek().<ShortTupleDecl> value();
                 RESULT = new GlobalDecl(std, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // global_decl ::= simple_var_init SEMICOLON 
            {
                GlobalDecl RESULT = null;
                int svileft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sviright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                SimpleVarInit svi = CUP$parser$stack.elementAt(CUP$parser$top-1).<SimpleVarInit> value();
                 RESULT = new GlobalDecl(svi, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",18, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // global_decl ::= simple_var_init 
            {
                GlobalDecl RESULT = null;
                int svileft = CUP$parser$stack.peek().left;
                int sviright = CUP$parser$stack.peek().right;
                SimpleVarInit svi = CUP$parser$stack.peek().<SimpleVarInit> value();
                 RESULT = new GlobalDecl(svi, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // identifier ::= IDENTIFIER 
            {
                Identifier RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Identifier(id, idleft, idright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // identifier_list ::= identifier COMMA identifier_list 
            {
                IdentifierList RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int idlleft = CUP$parser$stack.peek().left;
                int idlright = CUP$parser$stack.peek().right;
                IdentifierList idl = CUP$parser$stack.peek().<IdentifierList> value();
                 RESULT = new IdentifierList(id, idl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // identifier_list ::= identifier 
            {
                IdentifierList RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new IdentifierList(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                IfStmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new IfStmt(e, s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt ELSE stmt 
            {
                IfStmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-4).<Expr> value();
                int s1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int s1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Stmt s1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Stmt> value();
                int s2left = CUP$parser$stack.peek().left;
                int s2right = CUP$parser$stack.peek().right;
                Stmt s2 = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new IfStmt(e, s1, s2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // indexed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                IndexedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new IndexedBrackets(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexed_brackets",22, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // indexed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET indexed_brackets 
            {
                IndexedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new IndexedBrackets(e, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexed_brackets",22, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // label ::= identifier COLON 
            {
                Label RESULT = null;
                int labelNameleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int labelNameright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier labelName = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                 RESULT = new Label(labelName.getTheValue(), labelNameleft, labelNameright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("label",23, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // literal ::= INTEGER_LITERAL 
            {
                Literal RESULT = null;
                int illeft = CUP$parser$stack.peek().left;
                int ilright = CUP$parser$stack.peek().right;
                String il = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(il, 0, illeft, ilright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // literal ::= CHARACTER_LITERAL 
            {
                Literal RESULT = null;
                int clleft = CUP$parser$stack.peek().left;
                int clright = CUP$parser$stack.peek().right;
                String cl = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(cl, 2, clleft, clright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // literal ::= STRING_LITERAL 
            {
                Literal RESULT = null;
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                String sl = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal(sl, 1, slleft, slright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // literal ::= TRUE 
            {
                Literal RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Boolean t = CUP$parser$stack.peek().<Boolean> value();
                 RESULT = new Literal(true, tleft, tright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // literal ::= FALSE 
            {
                Literal RESULT = null;
                int fleft = CUP$parser$stack.peek().left;
                int fright = CUP$parser$stack.peek().right;
                Boolean f = CUP$parser$stack.peek().<Boolean> value();
                 RESULT = new Literal(false, fleft, fright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // mixed_array_type ::= primitive_type brackets 
            {
                MixedArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new MixedArrayType(pt, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_array_type",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // mixed_array_type ::= primitive_type mixed_brackets 
            {
                MixedArrayType RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<PrimitiveType> value();
                int mbleft = CUP$parser$stack.peek().left;
                int mbright = CUP$parser$stack.peek().right;
                MixedBrackets mb = CUP$parser$stack.peek().<MixedBrackets> value();
                 RESULT = new MixedArrayType(pt, mb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_array_type",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // mixed_array_type ::= identifier brackets 
            {
                MixedArrayType RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new MixedArrayType(id, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_array_type",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // mixed_array_type ::= identifier mixed_brackets 
            {
                MixedArrayType RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int mbleft = CUP$parser$stack.peek().left;
                int mbright = CUP$parser$stack.peek().right;
                MixedBrackets mb = CUP$parser$stack.peek().<MixedBrackets> value();
                 RESULT = new MixedArrayType(id, mb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_array_type",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new MixedBrackets(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET mixed_brackets 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int mbleft = CUP$parser$stack.peek().left;
                int mbright = CUP$parser$stack.peek().right;
                MixedBrackets mb = CUP$parser$stack.peek().<MixedBrackets> value();
                 RESULT = new MixedBrackets(e, mb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",26, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // mixed_brackets ::= OPEN_BRACKET expr CLOSE_BRACKET brackets 
            {
                MixedBrackets RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Brackets b = CUP$parser$stack.peek().<Brackets> value();
                 RESULT = new MixedBrackets(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_brackets",26, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // module_list ::= class_decl module_list 
            {
                ModuleList RESULT = null;
                int cdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int cdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ClassDecl cd = CUP$parser$stack.elementAt(CUP$parser$top-1).<ClassDecl> value();
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new ModuleList(cd, ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",27, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // module_list ::= function_decl module_list 
            {
                ModuleList RESULT = null;
                int fdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionDecl fd = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionDecl> value();
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new ModuleList(fd, ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",27, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // module_list ::= global_decl module_list 
            {
                ModuleList RESULT = null;
                int gdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int gdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                GlobalDecl gd = CUP$parser$stack.elementAt(CUP$parser$top-1).<GlobalDecl> value();
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new ModuleList(gd, ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",27, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // module_list ::= class_decl 
            {
                ModuleList RESULT = null;
                int cdleft = CUP$parser$stack.peek().left;
                int cdright = CUP$parser$stack.peek().right;
                ClassDecl cd = CUP$parser$stack.peek().<ClassDecl> value();
                 RESULT = new ModuleList(cd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // module_list ::= function_decl 
            {
                ModuleList RESULT = null;
                int fdleft = CUP$parser$stack.peek().left;
                int fdright = CUP$parser$stack.peek().right;
                FunctionDecl fd = CUP$parser$stack.peek().<FunctionDecl> value();
                 RESULT = new ModuleList(fd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // module_list ::= global_decl 
            {
                ModuleList RESULT = null;
                int gdleft = CUP$parser$stack.peek().left;
                int gdright = CUP$parser$stack.peek().right;
                GlobalDecl gd = CUP$parser$stack.peek().<GlobalDecl> value();
                 RESULT = new ModuleList(gd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("module_list",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // naked_stmt ::= assignment_stmt 
            {
                NakedStmt RESULT = null;
                int assleft = CUP$parser$stack.peek().left;
                int assright = CUP$parser$stack.peek().right;
                AssignmentStmt ass = CUP$parser$stack.peek().<AssignmentStmt> value();
                 RESULT = ass; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // naked_stmt ::= if_stmt 
            {
                NakedStmt RESULT = null;
                int isleft = CUP$parser$stack.peek().left;
                int isright = CUP$parser$stack.peek().right;
                IfStmt is = CUP$parser$stack.peek().<IfStmt> value();
                 RESULT = is; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // naked_stmt ::= while_stmt 
            {
                NakedStmt RESULT = null;
                int wsleft = CUP$parser$stack.peek().left;
                int wsright = CUP$parser$stack.peek().right;
                WhileStmt ws = CUP$parser$stack.peek().<WhileStmt> value();
                 RESULT = ws; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // naked_stmt ::= function_call 
            {
                NakedStmt RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // naked_stmt ::= block_stmt 
            {
                NakedStmt RESULT = null;
                int bsleft = CUP$parser$stack.peek().left;
                int bsright = CUP$parser$stack.peek().right;
                BlockStmt bs = CUP$parser$stack.peek().<BlockStmt> value();
                 RESULT = bs; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // naked_stmt ::= short_tuple_decl 
            {
                NakedStmt RESULT = null;
                int stdleft = CUP$parser$stack.peek().left;
                int stdright = CUP$parser$stack.peek().right;
                ShortTupleDecl std = CUP$parser$stack.peek().<ShortTupleDecl> value();
                 RESULT = std; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // naked_stmt ::= var_decl 
            {
                NakedStmt RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = vd; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // naked_stmt ::= var_init 
            {
                NakedStmt RESULT = null;
                int vileft = CUP$parser$stack.peek().left;
                int viright = CUP$parser$stack.peek().right;
                VarInit vi = CUP$parser$stack.peek().<VarInit> value();
                 RESULT = vi; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // naked_stmt ::= tuple_init 
            {
                NakedStmt RESULT = null;
                int tileft = CUP$parser$stack.peek().left;
                int tiright = CUP$parser$stack.peek().right;
                TupleInit ti = CUP$parser$stack.peek().<TupleInit> value();
                 RESULT = ti; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // naked_stmt ::= BREAK 
            {
                NakedStmt RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Break(bleft, bright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // naked_stmt ::= BREAK FROM IDENTIFIER 
            {
                NakedStmt RESULT = null;
                int bleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int bright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object b = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int labelNameleft = CUP$parser$stack.peek().left;
                int labelNameright = CUP$parser$stack.peek().right;
                String labelName = CUP$parser$stack.peek().<String> value();
                 RESULT = new Break(labelName, bleft, bright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // naked_stmt ::= CONTINUE 
            {
                NakedStmt RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Object c = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Continue(cleft, cright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // naked_stmt ::= CONTINUE TO IDENTIFIER 
            {
                NakedStmt RESULT = null;
                int cleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int cright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object c = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int labelNameleft = CUP$parser$stack.peek().left;
                int labelNameright = CUP$parser$stack.peek().right;
                String labelName = CUP$parser$stack.peek().<String> value();
                 RESULT = new Continue(labelName, cleft, cright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("naked_stmt",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // normal_expr ::= constant 
            {
                Expr RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Constant c = CUP$parser$stack.peek().<Constant> value();
                 RESULT = c; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // normal_expr ::= op_expr 
            {
                Expr RESULT = null;
                int oeleft = CUP$parser$stack.peek().left;
                int oeright = CUP$parser$stack.peek().right;
                Expr oe = CUP$parser$stack.peek().<Expr> value();
                 RESULT = oe; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // normal_expr ::= NULL 
            {
                Expr RESULT = null;
                int nleft = CUP$parser$stack.peek().left;
                int nright = CUP$parser$stack.peek().right;
                Object n = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Null(nleft, nright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // normal_expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 e.setSurroundedParentheses(); RESULT = e; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",29, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // normal_expr ::= array_literal indexed_brackets 
            {
                Expr RESULT = null;
                int alleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int alright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayLiteral al = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayLiteral> value();
                int ibleft = CUP$parser$stack.peek().left;
                int ibright = CUP$parser$stack.peek().right;
                IndexedBrackets ib = CUP$parser$stack.peek().<IndexedBrackets> value();
                 RESULT = new ArrayElement(al, ib); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("normal_expr",29, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // op_expr ::= MINUS expr 
            {
                Expr RESULT = null;
                int mleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int mright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object m = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(e, UnaryOp.INT_NEG, mleft, mright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // op_expr ::= NOT expr 
            {
                Expr RESULT = null;
                int nleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int nright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object n = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(e, UnaryOp.LOG_NEG, nleft, nright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // op_expr ::= expr PLUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.PLUS); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // op_expr ::= expr MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.MINUS); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // op_expr ::= expr TIMES expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.TIMES); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // op_expr ::= expr HIGH_MULT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.HIGH_MULT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // op_expr ::= expr DIVIDE expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.DIVIDE); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // op_expr ::= expr MODULO expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.MODULO); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // op_expr ::= expr NOT_EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.NOT_EQUAL); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // op_expr ::= expr EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.EQUAL); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // op_expr ::= expr LT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.LT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // op_expr ::= expr LEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.LEQ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // op_expr ::= expr GT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.GT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // op_expr ::= expr GEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.GEQ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // op_expr ::= expr AND expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.AND); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // op_expr ::= expr OR expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2, BinaryOp.OR); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("op_expr",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 111: // primitive_type ::= INT 
            {
                PrimitiveType RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Object i = CUP$parser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(0, ileft, iright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 112: // primitive_type ::= BOOL 
            {
                PrimitiveType RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new PrimitiveType(1, bleft, bright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 113: // program ::= module_list 
            {
                Program RESULT = null;
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new Program(ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 114: // program ::= use_id module_list 
            {
                Program RESULT = null;
                int useidcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int useidcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                UseId useidc = CUP$parser$stack.elementAt(CUP$parser$top-1).<UseId> value();
                int mlleft = CUP$parser$stack.peek().left;
                int mlright = CUP$parser$stack.peek().right;
                ModuleList ml = CUP$parser$stack.peek().<ModuleList> value();
                 RESULT = new Program(useidc, ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",31, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 115: // return_list ::= expr 
            {
                ReturnList RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ReturnList(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",32, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 116: // return_list ::= expr COMMA return_list 
            {
                ReturnList RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int rlleft = CUP$parser$stack.peek().left;
                int rlright = CUP$parser$stack.peek().right;
                ReturnList rl = CUP$parser$stack.peek().<ReturnList> value();
                 RESULT = new ReturnList(e, rl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 117: // return_stmt ::= RETURN 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.peek().left;
                int rright = CUP$parser$stack.peek().right;
                Object r = CUP$parser$stack.peek().<Object> value();
                 RESULT = new ReturnStmt(rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",33, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 118: // return_stmt ::= RETURN return_list 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int rlleft = CUP$parser$stack.peek().left;
                int rlright = CUP$parser$stack.peek().right;
                ReturnList rl = CUP$parser$stack.peek().<ReturnList> value();
                 RESULT = new ReturnStmt(rl, rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",33, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 119: // return_stmt ::= RETURN SEMICOLON 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = new ReturnStmt(rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",33, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 120: // return_stmt ::= RETURN return_list SEMICOLON 
            {
                ReturnStmt RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int rlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnList rl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnList> value();
                 RESULT = new ReturnStmt(rl, rleft, rright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",33, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 121: // return_type ::= COLON type_list 
            {
                ReturnType RESULT = null;
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                TypeList tl = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new ReturnType(tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",34, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 122: // return_type ::= 
            {
                ReturnType RESULT = null;
                 RESULT = new ReturnType(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",34, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 123: // short_tuple_decl ::= identifier COMMA identifier_list COLON primitive_type 
            {
                ShortTupleDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int idlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                IdentifierList idl = CUP$parser$stack.elementAt(CUP$parser$top-2).<IdentifierList> value();
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                PrimitiveType pt = CUP$parser$stack.peek().<PrimitiveType> value();
                 RESULT = new ShortTupleDecl(id,idl,pt); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("short_tuple_decl",35, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 124: // short_tuple_decl ::= identifier COMMA identifier_list COLON identifier 
            {
                ShortTupleDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int idlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                IdentifierList idl = CUP$parser$stack.elementAt(CUP$parser$top-2).<IdentifierList> value();
                int id2left = CUP$parser$stack.peek().left;
                int id2right = CUP$parser$stack.peek().right;
                Identifier id2 = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new ShortTupleDecl(id,idl,id2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("short_tuple_decl",35, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 125: // short_tuple_decl ::= identifier COMMA identifier_list COLON mixed_array_type 
            {
                ShortTupleDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int idlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                IdentifierList idl = CUP$parser$stack.elementAt(CUP$parser$top-2).<IdentifierList> value();
                int matleft = CUP$parser$stack.peek().left;
                int matright = CUP$parser$stack.peek().right;
                MixedArrayType mat = CUP$parser$stack.peek().<MixedArrayType> value();
                 RESULT = new ShortTupleDecl(id,idl,mat); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("short_tuple_decl",35, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 126: // simple_var_init ::= identifier COLON primitive_type GETS literal 
            {
                SimpleVarInit RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-2).<PrimitiveType> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Literal l = CUP$parser$stack.peek().<Literal> value();
                 RESULT = new SimpleVarInit(id,pt,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_var_init",36, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 127: // stmt ::= naked_stmt SEMICOLON 
            {
                Stmt RESULT = null;
                int nsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int nsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                NakedStmt ns = CUP$parser$stack.elementAt(CUP$parser$top-1).<NakedStmt> value();
                 RESULT = new Stmt(ns, true, nsleft, nsright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",37, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 128: // stmt ::= naked_stmt 
            {
                Stmt RESULT = null;
                int nsleft = CUP$parser$stack.peek().left;
                int nsright = CUP$parser$stack.peek().right;
                NakedStmt ns = CUP$parser$stack.peek().<NakedStmt> value();
                 RESULT = new Stmt(ns, false, nsleft, nsright); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",37, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 129: // stmt_list ::= stmt 
            {
                StmtList RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new StmtList(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 130: // stmt_list ::= stmt stmt_list 
            {
                StmtList RESULT = null;
                int sleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Stmt s = CUP$parser$stack.elementAt(CUP$parser$top-1).<Stmt> value();
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                StmtList sl = CUP$parser$stack.peek().<StmtList> value();
                 RESULT = new StmtList(s, sl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",38, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 131: // tuple_decl_list ::= COMMA var_decl 
            {
                TupleDeclList RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new TupleDeclList(vd, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",39, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 132: // tuple_decl_list ::= COMMA var_decl tuple_decl_list 
            {
                TupleDeclList RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl> value();
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                TupleDeclList tdl = CUP$parser$stack.peek().<TupleDeclList> value();
                 RESULT = new TupleDeclList(vd, tdl, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",39, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 133: // tuple_decl_list ::= COMMA UNDERSCORE 
            {
                TupleDeclList RESULT = null;
                 RESULT = new TupleDeclList(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",39, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 134: // tuple_decl_list ::= COMMA UNDERSCORE tuple_decl_list 
            {
                TupleDeclList RESULT = null;
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                TupleDeclList tdl = CUP$parser$stack.peek().<TupleDeclList> value();
                 RESULT = new TupleDeclList(tdl, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_decl_list",39, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 135: // tuple_init ::= UNDERSCORE tuple_decl_list GETS function_call 
            {
                TupleInit RESULT = null;
                int tdlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TupleDeclList tdl = CUP$parser$stack.elementAt(CUP$parser$top-2).<TupleDeclList> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(tdl, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",40, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 136: // tuple_init ::= var_decl tuple_decl_list GETS function_call 
            {
                TupleInit RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-3).<VarDecl> value();
                int tdlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TupleDeclList tdl = CUP$parser$stack.elementAt(CUP$parser$top-2).<TupleDeclList> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(vd, tdl, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",40, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 137: // tuple_init ::= UNDERSCORE GETS function_call 
            {
                TupleInit RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new TupleInit(fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_init",40, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 138: // type ::= primitive_type 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                PrimitiveType pt = CUP$parser$stack.peek().<PrimitiveType> value();
                 RESULT = pt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",41, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 139: // type ::= empty_array_type 
            {
                Type RESULT = null;
                int atleft = CUP$parser$stack.peek().left;
                int atright = CUP$parser$stack.peek().right;
                EmptyArrayType at = CUP$parser$stack.peek().<EmptyArrayType> value();
                 RESULT = at; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",41, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 140: // type ::= identifier 
            {
                Type RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 id.setIsClassName(); RESULT = id; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",41, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 141: // type_list ::= type 
            {
                TypeList RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new TypeList(t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",42, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 142: // type_list ::= type COMMA type_list 
            {
                TypeList RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                TypeList tl = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new TypeList(t, tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",42, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 143: // use_id ::= USE identifier 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                Identifier id = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new UseId(id, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",43, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 144: // use_id ::= USE identifier SEMICOLON 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                 RESULT = new UseId(id, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",43, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 145: // use_id ::= USE identifier use_id 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-1).<Identifier> value();
                int uileft = CUP$parser$stack.peek().left;
                int uiright = CUP$parser$stack.peek().right;
                UseId ui = CUP$parser$stack.peek().<UseId> value();
                 RESULT = new UseId(id, ui, false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",43, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 146: // use_id ::= USE identifier SEMICOLON use_id 
            {
                UseId RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int uileft = CUP$parser$stack.peek().left;
                int uiright = CUP$parser$stack.peek().right;
                UseId ui = CUP$parser$stack.peek().<UseId> value();
                 RESULT = new UseId(id, ui, true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_id",43, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 147: // var_decl ::= identifier COLON mixed_array_type 
            {
                VarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int matleft = CUP$parser$stack.peek().left;
                int matright = CUP$parser$stack.peek().right;
                MixedArrayType mat = CUP$parser$stack.peek().<MixedArrayType> value();
                 RESULT = new VarDecl(id, mat); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",44, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 148: // var_decl ::= identifier COLON primitive_type 
            {
                VarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                PrimitiveType pt = CUP$parser$stack.peek().<PrimitiveType> value();
                 RESULT = new VarDecl(id, pt); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",44, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 149: // var_decl ::= identifier COLON identifier 
            {
                VarDecl RESULT = null;
                int id1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int id1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Identifier id1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Identifier> value();
                int id2left = CUP$parser$stack.peek().left;
                int id2right = CUP$parser$stack.peek().right;
                Identifier id2 = CUP$parser$stack.peek().<Identifier> value();
                 RESULT = new VarDecl(id1, id2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",44, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 150: // var_init ::= identifier COLON type GETS expr 
            {
                VarInit RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Identifier id = CUP$parser$stack.elementAt(CUP$parser$top-4).<Identifier> value();
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new VarInit(id, t, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var_init",45, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 151: // while_stmt ::= WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                WhileStmt RESULT = null;
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new WhileStmt(expression, s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",46, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 152: // while_stmt ::= label WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
                WhileStmt RESULT = null;
                int lleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int lright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                Label l = CUP$parser$stack.elementAt(CUP$parser$top-5).<Label> value();
                int expressionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int expressionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr expression = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = new WhileStmt(expression, s); RESULT.setLabel(l); l.setLoop(RESULT); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",46, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
