# xth test script
#
# This file is a test script for xth (xic Test Harness).  It
# conforms to the following grammar:
#
#   ScriptFile      ::= Commands+
#   Command         ::= build
#                     | CompilerTest
#   CompilerTest    ::= TestKind (\(TestName\))? ([TestPath])? ("CmdLineArgs")?
#                           { (FileTest;)* }
#   TestKind        ::= xic
#   TestName        ::= LitString
#   FileTest        ::= Filenames Description? FailureSet?
#   Filenames       ::= Filename+
#   Description     ::= LitString
#   FailureSet      ::= Failure (, Failure)*
#   Failure         ::= \( ErrorKind \)
#                     | \( ErrorKind, LitString \)
#
#   TestPath        :   the path to the test files, enclosed in quotes,
#                       relative to the path given in xth's -testpath flag.
#   CmdLineArgs     :   command-line arguments for xic
#   Filename        :   the name of a file, interpreted from TestPath.
#   LitString       :   a literal string, enclosed in quotes.
#   ErrorKind       :   one of, or a unique prefix of one of the following
#                       strings: "Lexical Error", "Syntax Error", or
#                       "Semantic Error".
#
# xth runs the commands in order of appearance.

# build compiler first
build

xic ("Test --help") "--help" {
    ;
}

xic ("Test --typecheck -O") ["../pa3"] "-libpath $(testpath) --typecheck -O" {
    ex01.xi;
    ex02.xi;
    ex03.xi;
    ex04.xi (Semantic, "Cannot assign");
    ex05.xi (Semantic, "Operands");
    ex06.xi (Semantic, "Name .* cannot be resolved");
    ex07.xi (Semantic, "Expected .*, but found .*");
    ex08.xi (Semantic, "Missing return");
    ex09.xi (Semantic, "Expected function call");
    ex10.xi (Semantic, "Mismatched number of values");
    ex11.xi (Semantic, "Expected .*, but found .*");
    ex12.xi (Semantic, "not a function");
    spec1-full.xi;
    spec1.xi (Semantic, "Name .* cannot be resolved");
    spec2.xi (Semantic, "Name .* cannot be resolved");
    spec3.xi;
    gcd.xi;
    ratadd-full.xi;
    ratadd.xi (Semantic, "Name .* cannot be resolved");
    ratadduse-full.xi;
    ratadduse.xi (Semantic, "Name .* cannot be resolved");
    insertionsort.xi;
    arrayinit.xi;
    arrayinit2-full.xi;
    arrayinit2.xi (Semantic, "Name .* cannot be resolved");
    mdarrays.xi;
}

xic ("Test --typecheck -O") ["../customPA3"] "-libpath $(testpath) --typecheck -O" {
    array01.xi;
    array02.xi;
    extend1.xi;
    extend3.xi;
    extend4.xi;
    extend5.xi;
    field_decl1.xi;
    field_decl2.xi;
    global_decl1.xi;
    global_decl2.xi;
    global_decl3.xi;
    global_decl4.xi;
    global_decl5.xi;
    global_decl6.xi;
    juheetest01.xi;
    module1.xi;
    neighbor.xi;
    sameClassName-1ixifail.xi;
    sameClassName-1xifail.xi;
    sameClassName-2ixifail.xi;
    sameClassName-2ixiok.xi;
    sameClassName-bothfail.xi;
    sameClassName-bothok.xi;
    sameFunctionName-1ixifail.xi;
    sameFunctionName-1xifail.xi;
    sameFunctionName-2ixifail.xi;
    sameFunctionName-2ixiok.xi;
    sameFunctionName-bothfail.xi;
    sameFunctionName-bothok.xi;
    superClass-fail.xi;
    superClass-ok.xi;
    superClass2-fail.xi;
    superClass2-ok.xi;
}

