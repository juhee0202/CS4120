// tricky arrays
// will get array index out of bounds if generated code is incorrect
f(a:int[][][][][][]) { a[2] = {{{}}} }
main(args:int[][]) {
  f({{{}}} + {{}} + {{{{{{1}}}}}})
  x:int[][][][][] = {{}, {{{{}, {1, 2}}}}}
  x[1][0][0][1][1] = 3
  y:int[][] = {{1}} + {{}} + {{2, x[1][0][0][1][1]}, {}} + {{4}, {5}}
  z:int = {5}[{7}[y[0][0] - y[2][0] - y[2][1] + y[4][0] + y[5][0] - 5] - 7]
  w:int[][][] = {{{1}+{2}} + {{3}+{}+{4,5}} + {{}+{}}} + {{}} + {{{}, {6}} + {}}
  z =     1 * w[0][0][0] + 2 * w[0][0][1] + 3 * w[0][1][0]
  z = z + 4 * w[0][1][1] + 5 * w[0][1][2] + 6 * w[2][1][0]
  z = {0}[z - 91]
  z = {0}[length(w[0]) + 2 * length(w[1]) + 3 * length(w[2]) - 9]
  z = {0}[length(w[0][0]) + 2 * length(w[0][1]) + 3 * length(w[0][2]) - 8]
  z = {0}[length(w[2][0]) + 2 * length(w[2][1]) - 2]
  w[0][0][1] = -7;    w[0][2] = w[0][1];    w[0][1] = {17, -19};
  w[1] = w[0]; w[2][0] = {41} + {99, -101}; w[2][1][0] = 1000
  z =     1 * w[1][0][1] + 2 * w[0][1][0] + 3 * w[1][1][1]
  z = z + 4 * w[0][2][1] + 5 * w[2][0][0] + 6 * w[2][0][2] + 7 * w[2][1][0]
  z = {0}[z - 6585]
}
